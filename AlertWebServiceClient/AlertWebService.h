/* AlertWebService.h
   Generated by wsdl2h 2.8.71 from AlertWebService.wsdl and typemap.dat
   2018-11-21 13:40:01 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

/** @page page_notes Notes

@note HINTS:
 - Run soapcpp2 on AlertWebService.h to generate the SOAP/XML processing logic.
   Use soapcpp2 -I to specify paths for #import
   Use soapcpp2 -j to generate improved proxy and server classes.
   Use soapcpp2 -r to generate a report.
 - Use wsdl2h -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Run Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h -R to generate REST operations.
 - Use wsdl2h -Onum to optimize output by removing unused schema components.
 - Use wsdl2h -nname to use name as the base namespace prefix instead of 'ns'.
 - Use wsdl2h -Nname for service prefix and produce multiple service bindings
 - Use wsdl2h -d to enable DOM support for xsd:anyType.
 - Use wsdl2h -g to auto-generate readers and writers for root elements.
 - Use wsdl2h -b to auto-generate bi-directional operations (duplex ops).
 - Use wsdl2h -U to map XML names to C++ Unicode identifiers instead of _xNNNN.
 - Use wsdl2h -u to disable the generation of unions.
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

@warning
   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

@copyright LICENSE:
@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The wsdl2h tool and its generated software are released under the GPL.
This software is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt c++,w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://Alert.Concerto.com                                                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * $CONTAINER                                                                 *
 *   std::vector                                                              *
 *                                                                            *
\******************************************************************************/

#include <vector>
template <class T> class std::vector;

/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

ns1 = "http://Alert.Concerto.com"

*/

#define SOAP_NAMESPACE_OF_ns1	"http://Alert.Concerto.com"
//gsoap ns1   schema namespace:	http://Alert.Concerto.com
//gsoap ns1   schema form:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/

/// Built-in XSD type "SOAP-ENC:string".
typedef std::string SOAP_ENC__string;


/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/


//  Forward declaration of class ns1__DCenterCordInfo.
class ns1__DCenterCordInfo;


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://Alert.Concerto.com                                                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://Alert.Concerto.com                                                *
 *                                                                            *
\******************************************************************************/

/// @brief "http://Alert.Concerto.com":DCenterCordInfo is a complexType.
///
/// class ns1__DCenterCordInfo operations:
/// - ns1__DCenterCordInfo* soap_new_ns1__DCenterCordInfo(soap*) allocate and default initialize
/// - ns1__DCenterCordInfo* soap_new_ns1__DCenterCordInfo(soap*, int num) allocate array and default initialize values
/// - ns1__DCenterCordInfo* soap_new_req_ns1__DCenterCordInfo(soap*, ...) allocate, set required members
/// - ns1__DCenterCordInfo* soap_new_set_ns1__DCenterCordInfo(soap*, ...) allocate, set all public members
/// - ns1__DCenterCordInfo::soap_default(soap*) default initialize members
/// - int soap_read_ns1__DCenterCordInfo(soap*, ns1__DCenterCordInfo*) deserialize from a stream
/// - int soap_write_ns1__DCenterCordInfo(soap*, ns1__DCenterCordInfo*) serialize to a stream
/// - ns1__DCenterCordInfo* ns1__DCenterCordInfo::soap_dup(soap*) returns deep copy of ns1__DCenterCordInfo, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__DCenterCordInfo::soap_del() deep deletes ns1__DCenterCordInfo data members, use only after ns1__DCenterCordInfo::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__DCenterCordInfo
{ public:
/// Element "AODFeedPortNum" of XSD type xs:int.
    int                                  AODFeedPortNum                 1;	///< Required element.
/// Element "AWDPortNum" of XSD type xs:int.
    int                                  AWDPortNum                     1;	///< Required element.
/// Element "CSLPortNum" of XSD type xs:int.
    int                                  CSLPortNum                     1;	///< Required element.
/// Element "IPAddress" of XSD type SOAP-ENC:string.
    SOAP_ENC__string*                    IPAddress                      nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "clientPortNum" of XSD type xs:int.
    int                                  clientPortNum                  1;	///< Required element.
/// Element "extLoggerPortNum" of XSD type xs:int.
    int                                  extLoggerPortNum               1;	///< Required element.
/// Element "serverId" of XSD type xs:int.
    int                                  serverId                       1;	///< Required element.
/// Element "siteId" of XSD type xs:int.
    int                                  siteId                         1;	///< Required element.
/// Element "tenantId" of XSD type xs:int.
    int                                  tenantId                       1;	///< Required element.
    struct soap                         *soap                          ;
};


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://Alert.Concerto.com                                                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://Alert.Concerto.com                                                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap ns1  service name:	AlertWebServiceSoapBinding 
//gsoap ns1  service type:	AlertWebService 
//gsoap ns1  service port:	http://192.168.156.104:8180/AlertWebService/services/AlertWebService 
//gsoap ns1  service namespace:	http://Alert.Concerto.com 
//gsoap ns1  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage Service Definitions

@section Service_bindings Service Bindings

  - @ref AlertWebServiceSoapBinding

@section Service_more More Information

  - @ref page_notes "Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page AlertWebServiceSoapBinding Binding "AlertWebServiceSoapBinding"

@section AlertWebServiceSoapBinding_operations Operations of Binding "AlertWebServiceSoapBinding"

  - @ref ns1__GetVersion

  - @ref ns1__ClearSystemAlert

  - @ref ns1__ClearApplicationAlert

  - @ref ns1__GetSiteRecord

  - @ref ns1__GetServerTypeRecord

  - @ref ns1__GetServerRecord

  - @ref ns1__GetTlkpSystemAlertStatesRecord

  - @ref ns1__GetTlkpSystemAlertActionsRecord

  - @ref ns1__GetTlkpSystemAlertTypesRecord

  - @ref ns1__GetApplicationAlertsByStartDate

  - @ref ns1__GetApplicationAlerts

  - @ref ns1__GetApplicationAlertsFilter

  - @ref ns1__GetSystemAlertsFilter

  - @ref ns1__GetSystemAlertsByStartDate

  - @ref ns1__GetSystemAlerts

  - @ref ns1__AcknowledgeApplicationAlert

  - @ref ns1__AcknowledgeSystemAlert

  - @ref ns1__DeleteAlertActionField2

  - @ref ns1__DeleteAlertActionField

  - @ref ns1__DeleteAlertActionParameter2

  - @ref ns1__DeleteAlertActionParameter

  - @ref ns1__DeleteAlertScheduleByScheduleId

  - @ref ns1__DeleteAlertSchedule

  - @ref ns1__DeleteAlertAction2

  - @ref ns1__DeleteAlertAction

  - @ref ns1__DeleteAlertEvaluation2

  - @ref ns1__DeleteAlertEvaluation

  - @ref ns1__DeleteAlert

  - @ref ns1__GetRunningCenterCord

  - @ref ns1__SetClientType

  - @ref ns1__SendServerUpdateNotification

  - @ref ns1__UnSubscribeToDocumentType

  - @ref ns1__SubscribeToDocumentType

  - @ref ns1__SendNetworkDocument

  - @ref ns1__SendAlert

  - @ref ns1__GetTlkpActionParametersRecordByParameterId

  - @ref ns1__GetTlkpActionParametersRecord

  - @ref ns1__GetTlkpPriorityLevelRecordByPriorityLevel

  - @ref ns1__GetTlkpPriorityLevelRecord

  - @ref ns1__GetTlkpActionsRecordByAction

  - @ref ns1__GetTlkpActionsRecord

  - @ref ns1__GetTlkpDocumentFieldTypesRecord

  - @ref ns1__GetTlkpDocumentFieldsRecord

  - @ref ns1__GetTlkpDocumentTypesRecordByClientType

  - @ref ns1__GetTlkpDocumentTypesRecord

  - @ref ns1__GetAlertActionFieldsRecord

  - @ref ns1__GetAlertActionParameterRecord

  - @ref ns1__GetAlertSchedulesRecord

  - @ref ns1__GetAlertActionsRecord

  - @ref ns1__GetAlertEvaluationsRecord

  - @ref ns1__GetAlertsRecordByDocumentType

  - @ref ns1__GetAlertsRecord

  - @ref ns1__UpdateAlertActionField

  - @ref ns1__InsertAlertActionField

  - @ref ns1__UpdateAlertActionParameter

  - @ref ns1__InsertAlertActionParameter

  - @ref ns1__UpdateAlertSchedule

  - @ref ns1__InsertAlertSchedule

  - @ref ns1__UpdateAlertAction

  - @ref ns1__InsertAlertAction

  - @ref ns1__UpdatetAlertEvaluation

  - @ref ns1__InsertAlertEvaluation

  - @ref ns1__UpdateAlert

  - @ref ns1__InsertAlert

  - @ref ns1__GetWebServiceName

@section AlertWebServiceSoapBinding_ports Default endpoints of Binding "AlertWebServiceSoapBinding"

  - http://192.168.156.104:8180/AlertWebService/services/AlertWebService

@note Use wsdl2h option -Nname to change the service binding prefix name


*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   AlertWebServiceSoapBinding                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__GetVersion                                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "ns1__GetVersion" of service binding "AlertWebServiceSoapBinding".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://192.168.156.104:8180/AlertWebService/services/AlertWebService

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__GetVersion(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    // output parameters:
    SOAP_ENC__string                   &GetVersionReturn
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__GetVersion(
    struct soap *soap,
    // input parameters:
    // output parameters:
    SOAP_ENC__string                   &GetVersionReturn
  );
@endcode

C++ proxy class (defined in soapAlertWebServiceSoapBindingProxy.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAlertWebServiceSoapBindingService.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetVersion SOAP
//gsoap ns1  service method-style:	GetVersion rpc
//gsoap ns1  service method-encoding:	GetVersion http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	GetVersion ""
//gsoap ns1  service method-output-action:	GetVersion Response
int ns1__GetVersion(
    SOAP_ENC__string                   &:GetVersionReturn	///< Output parameter, : unqualified name as per RPC encoding
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__ClearSystemAlert                                                    *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__ClearSystemAlertResponse" of operation "ns1__ClearSystemAlert".
struct ns1__ClearSystemAlertResponse
{
};

/** Operation "ns1__ClearSystemAlert" of service binding "AlertWebServiceSoapBinding".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://192.168.156.104:8180/AlertWebService/services/AlertWebService

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__ClearSystemAlert(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    int                                 in0,
    // output parameters:
    struct ns1__ClearSystemAlertResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__ClearSystemAlert(
    struct soap *soap,
    // input parameters:
    int                                 in0,
    // output parameters:
    struct ns1__ClearSystemAlertResponse&
  );
@endcode

C++ proxy class (defined in soapAlertWebServiceSoapBindingProxy.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAlertWebServiceSoapBindingService.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	ClearSystemAlert SOAP
//gsoap ns1  service method-style:	ClearSystemAlert rpc
//gsoap ns1  service method-encoding:	ClearSystemAlert http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	ClearSystemAlert ""
//gsoap ns1  service method-output-action:	ClearSystemAlert Response
int ns1__ClearSystemAlert(
    int                                 :_in0,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    struct ns1__ClearSystemAlertResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__ClearApplicationAlert                                               *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__ClearApplicationAlertResponse" of operation "ns1__ClearApplicationAlert".
struct ns1__ClearApplicationAlertResponse
{
};

/** Operation "ns1__ClearApplicationAlert" of service binding "AlertWebServiceSoapBinding".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://192.168.156.104:8180/AlertWebService/services/AlertWebService

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__ClearApplicationAlert(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    int                                 in0,
    // output parameters:
    struct ns1__ClearApplicationAlertResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__ClearApplicationAlert(
    struct soap *soap,
    // input parameters:
    int                                 in0,
    // output parameters:
    struct ns1__ClearApplicationAlertResponse&
  );
@endcode

C++ proxy class (defined in soapAlertWebServiceSoapBindingProxy.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAlertWebServiceSoapBindingService.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	ClearApplicationAlert SOAP
//gsoap ns1  service method-style:	ClearApplicationAlert rpc
//gsoap ns1  service method-encoding:	ClearApplicationAlert http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	ClearApplicationAlert ""
//gsoap ns1  service method-output-action:	ClearApplicationAlert Response
int ns1__ClearApplicationAlert(
    int                                 :_in0,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    struct ns1__ClearApplicationAlertResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__GetSiteRecord                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "ns1__GetSiteRecord" of service binding "AlertWebServiceSoapBinding".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://192.168.156.104:8180/AlertWebService/services/AlertWebService

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__GetSiteRecord(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    // output parameters:
    SOAP_ENC__string                   &GetSiteRecordReturn
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__GetSiteRecord(
    struct soap *soap,
    // input parameters:
    // output parameters:
    SOAP_ENC__string                   &GetSiteRecordReturn
  );
@endcode

C++ proxy class (defined in soapAlertWebServiceSoapBindingProxy.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAlertWebServiceSoapBindingService.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetSiteRecord SOAP
//gsoap ns1  service method-style:	GetSiteRecord rpc
//gsoap ns1  service method-encoding:	GetSiteRecord http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	GetSiteRecord ""
//gsoap ns1  service method-output-action:	GetSiteRecord Response
int ns1__GetSiteRecord(
    SOAP_ENC__string                   &:GetSiteRecordReturn	///< Output parameter, : unqualified name as per RPC encoding
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__GetServerTypeRecord                                                 *
 *                                                                            *
\******************************************************************************/


/** Operation "ns1__GetServerTypeRecord" of service binding "AlertWebServiceSoapBinding".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://192.168.156.104:8180/AlertWebService/services/AlertWebService

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__GetServerTypeRecord(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    // output parameters:
    SOAP_ENC__string                   &GetServerTypeRecordReturn
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__GetServerTypeRecord(
    struct soap *soap,
    // input parameters:
    // output parameters:
    SOAP_ENC__string                   &GetServerTypeRecordReturn
  );
@endcode

C++ proxy class (defined in soapAlertWebServiceSoapBindingProxy.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAlertWebServiceSoapBindingService.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetServerTypeRecord SOAP
//gsoap ns1  service method-style:	GetServerTypeRecord rpc
//gsoap ns1  service method-encoding:	GetServerTypeRecord http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	GetServerTypeRecord ""
//gsoap ns1  service method-output-action:	GetServerTypeRecord Response
int ns1__GetServerTypeRecord(
    SOAP_ENC__string                   &:GetServerTypeRecordReturn	///< Output parameter, : unqualified name as per RPC encoding
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__GetServerRecord                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "ns1__GetServerRecord" of service binding "AlertWebServiceSoapBinding".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://192.168.156.104:8180/AlertWebService/services/AlertWebService

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__GetServerRecord(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    // output parameters:
    SOAP_ENC__string                   &GetServerRecordReturn
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__GetServerRecord(
    struct soap *soap,
    // input parameters:
    // output parameters:
    SOAP_ENC__string                   &GetServerRecordReturn
  );
@endcode

C++ proxy class (defined in soapAlertWebServiceSoapBindingProxy.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAlertWebServiceSoapBindingService.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetServerRecord SOAP
//gsoap ns1  service method-style:	GetServerRecord rpc
//gsoap ns1  service method-encoding:	GetServerRecord http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	GetServerRecord ""
//gsoap ns1  service method-output-action:	GetServerRecord Response
int ns1__GetServerRecord(
    SOAP_ENC__string                   &:GetServerRecordReturn	///< Output parameter, : unqualified name as per RPC encoding
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__GetTlkpSystemAlertStatesRecord                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "ns1__GetTlkpSystemAlertStatesRecord" of service binding "AlertWebServiceSoapBinding".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://192.168.156.104:8180/AlertWebService/services/AlertWebService

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__GetTlkpSystemAlertStatesRecord(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    // output parameters:
    SOAP_ENC__string                   &GetTlkpSystemAlertStatesRecordReturn
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__GetTlkpSystemAlertStatesRecord(
    struct soap *soap,
    // input parameters:
    // output parameters:
    SOAP_ENC__string                   &GetTlkpSystemAlertStatesRecordReturn
  );
@endcode

C++ proxy class (defined in soapAlertWebServiceSoapBindingProxy.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAlertWebServiceSoapBindingService.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetTlkpSystemAlertStatesRecord SOAP
//gsoap ns1  service method-style:	GetTlkpSystemAlertStatesRecord rpc
//gsoap ns1  service method-encoding:	GetTlkpSystemAlertStatesRecord http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	GetTlkpSystemAlertStatesRecord ""
//gsoap ns1  service method-output-action:	GetTlkpSystemAlertStatesRecord Response
int ns1__GetTlkpSystemAlertStatesRecord(
    SOAP_ENC__string                   &:GetTlkpSystemAlertStatesRecordReturn	///< Output parameter, : unqualified name as per RPC encoding
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__GetTlkpSystemAlertActionsRecord                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "ns1__GetTlkpSystemAlertActionsRecord" of service binding "AlertWebServiceSoapBinding".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://192.168.156.104:8180/AlertWebService/services/AlertWebService

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__GetTlkpSystemAlertActionsRecord(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    // output parameters:
    SOAP_ENC__string                   &GetTlkpSystemAlertActionsRecordReturn
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__GetTlkpSystemAlertActionsRecord(
    struct soap *soap,
    // input parameters:
    // output parameters:
    SOAP_ENC__string                   &GetTlkpSystemAlertActionsRecordReturn
  );
@endcode

C++ proxy class (defined in soapAlertWebServiceSoapBindingProxy.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAlertWebServiceSoapBindingService.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetTlkpSystemAlertActionsRecord SOAP
//gsoap ns1  service method-style:	GetTlkpSystemAlertActionsRecord rpc
//gsoap ns1  service method-encoding:	GetTlkpSystemAlertActionsRecord http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	GetTlkpSystemAlertActionsRecord ""
//gsoap ns1  service method-output-action:	GetTlkpSystemAlertActionsRecord Response
int ns1__GetTlkpSystemAlertActionsRecord(
    SOAP_ENC__string                   &:GetTlkpSystemAlertActionsRecordReturn	///< Output parameter, : unqualified name as per RPC encoding
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__GetTlkpSystemAlertTypesRecord                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "ns1__GetTlkpSystemAlertTypesRecord" of service binding "AlertWebServiceSoapBinding".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://192.168.156.104:8180/AlertWebService/services/AlertWebService

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__GetTlkpSystemAlertTypesRecord(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    // output parameters:
    SOAP_ENC__string                   &GetTlkpSystemAlertTypesRecordReturn
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__GetTlkpSystemAlertTypesRecord(
    struct soap *soap,
    // input parameters:
    // output parameters:
    SOAP_ENC__string                   &GetTlkpSystemAlertTypesRecordReturn
  );
@endcode

C++ proxy class (defined in soapAlertWebServiceSoapBindingProxy.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAlertWebServiceSoapBindingService.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetTlkpSystemAlertTypesRecord SOAP
//gsoap ns1  service method-style:	GetTlkpSystemAlertTypesRecord rpc
//gsoap ns1  service method-encoding:	GetTlkpSystemAlertTypesRecord http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	GetTlkpSystemAlertTypesRecord ""
//gsoap ns1  service method-output-action:	GetTlkpSystemAlertTypesRecord Response
int ns1__GetTlkpSystemAlertTypesRecord(
    SOAP_ENC__string                   &:GetTlkpSystemAlertTypesRecordReturn	///< Output parameter, : unqualified name as per RPC encoding
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__GetApplicationAlertsByStartDate                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "ns1__GetApplicationAlertsByStartDate" of service binding "AlertWebServiceSoapBinding".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://192.168.156.104:8180/AlertWebService/services/AlertWebService

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__GetApplicationAlertsByStartDate(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    SOAP_ENC__string                    in0,
    SOAP_ENC__string                    in1,
    int                                 in2,
    // output parameters:
    SOAP_ENC__string                   &_GetApplicationAlertsByStartDateReturn
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__GetApplicationAlertsByStartDate(
    struct soap *soap,
    // input parameters:
    SOAP_ENC__string                    in0,
    SOAP_ENC__string                    in1,
    int                                 in2,
    // output parameters:
    SOAP_ENC__string                   &_GetApplicationAlertsByStartDateReturn
  );
@endcode

C++ proxy class (defined in soapAlertWebServiceSoapBindingProxy.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAlertWebServiceSoapBindingService.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetApplicationAlertsByStartDate SOAP
//gsoap ns1  service method-style:	GetApplicationAlertsByStartDate rpc
//gsoap ns1  service method-encoding:	GetApplicationAlertsByStartDate http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	GetApplicationAlertsByStartDate ""
//gsoap ns1  service method-output-action:	GetApplicationAlertsByStartDate Response
int ns1__GetApplicationAlertsByStartDate(
    SOAP_ENC__string                    :_in0,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    SOAP_ENC__string                    :_in1,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    int                                 :_in2,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    SOAP_ENC__string                   &:_GetApplicationAlertsByStartDateReturn	///< Output parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__GetApplicationAlerts                                                *
 *                                                                            *
\******************************************************************************/


/** Operation "ns1__GetApplicationAlerts" of service binding "AlertWebServiceSoapBinding".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://192.168.156.104:8180/AlertWebService/services/AlertWebService

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__GetApplicationAlerts(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    SOAP_ENC__string                    in0,
    int                                 in1,
    // output parameters:
    SOAP_ENC__string                   &_GetApplicationAlertsReturn
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__GetApplicationAlerts(
    struct soap *soap,
    // input parameters:
    SOAP_ENC__string                    in0,
    int                                 in1,
    // output parameters:
    SOAP_ENC__string                   &_GetApplicationAlertsReturn
  );
@endcode

C++ proxy class (defined in soapAlertWebServiceSoapBindingProxy.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAlertWebServiceSoapBindingService.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetApplicationAlerts SOAP
//gsoap ns1  service method-style:	GetApplicationAlerts rpc
//gsoap ns1  service method-encoding:	GetApplicationAlerts http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	GetApplicationAlerts ""
//gsoap ns1  service method-output-action:	GetApplicationAlerts Response
int ns1__GetApplicationAlerts(
    SOAP_ENC__string                    :_in0,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    int                                 :_in1,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    SOAP_ENC__string                   &:_GetApplicationAlertsReturn	///< Output parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__GetApplicationAlertsFilter                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "ns1__GetApplicationAlertsFilter" of service binding "AlertWebServiceSoapBinding".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://192.168.156.104:8180/AlertWebService/services/AlertWebService

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__GetApplicationAlertsFilter(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    SOAP_ENC__string                    in0,
    SOAP_ENC__string                    in1,
    SOAP_ENC__string                    in2,
    int                                 in3,
    int                                 in4,
    // output parameters:
    SOAP_ENC__string                   &_GetApplicationAlertsFilterReturn
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__GetApplicationAlertsFilter(
    struct soap *soap,
    // input parameters:
    SOAP_ENC__string                    in0,
    SOAP_ENC__string                    in1,
    SOAP_ENC__string                    in2,
    int                                 in3,
    int                                 in4,
    // output parameters:
    SOAP_ENC__string                   &_GetApplicationAlertsFilterReturn
  );
@endcode

C++ proxy class (defined in soapAlertWebServiceSoapBindingProxy.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAlertWebServiceSoapBindingService.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetApplicationAlertsFilter SOAP
//gsoap ns1  service method-style:	GetApplicationAlertsFilter rpc
//gsoap ns1  service method-encoding:	GetApplicationAlertsFilter http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	GetApplicationAlertsFilter ""
//gsoap ns1  service method-output-action:	GetApplicationAlertsFilter Response
int ns1__GetApplicationAlertsFilter(
    SOAP_ENC__string                    :_in0,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    SOAP_ENC__string                    :_in1,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    SOAP_ENC__string                    :_in2,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    int                                 :_in3,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    int                                 :_in4,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    SOAP_ENC__string                   &:_GetApplicationAlertsFilterReturn	///< Output parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__GetSystemAlertsFilter                                               *
 *                                                                            *
\******************************************************************************/


/** Operation "ns1__GetSystemAlertsFilter" of service binding "AlertWebServiceSoapBinding".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://192.168.156.104:8180/AlertWebService/services/AlertWebService

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__GetSystemAlertsFilter(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    SOAP_ENC__string                    in0,
    SOAP_ENC__string                    in1,
    int                                 in2,
    int                                 in3,
    // output parameters:
    SOAP_ENC__string                   &_GetSystemAlertsFilterReturn
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__GetSystemAlertsFilter(
    struct soap *soap,
    // input parameters:
    SOAP_ENC__string                    in0,
    SOAP_ENC__string                    in1,
    int                                 in2,
    int                                 in3,
    // output parameters:
    SOAP_ENC__string                   &_GetSystemAlertsFilterReturn
  );
@endcode

C++ proxy class (defined in soapAlertWebServiceSoapBindingProxy.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAlertWebServiceSoapBindingService.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetSystemAlertsFilter SOAP
//gsoap ns1  service method-style:	GetSystemAlertsFilter rpc
//gsoap ns1  service method-encoding:	GetSystemAlertsFilter http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	GetSystemAlertsFilter ""
//gsoap ns1  service method-output-action:	GetSystemAlertsFilter Response
int ns1__GetSystemAlertsFilter(
    SOAP_ENC__string                    :_in0,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    SOAP_ENC__string                    :_in1,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    int                                 :_in2,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    int                                 :_in3,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    SOAP_ENC__string                   &:_GetSystemAlertsFilterReturn	///< Output parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__GetSystemAlertsByStartDate                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "ns1__GetSystemAlertsByStartDate" of service binding "AlertWebServiceSoapBinding".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://192.168.156.104:8180/AlertWebService/services/AlertWebService

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__GetSystemAlertsByStartDate(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    SOAP_ENC__string                    in0,
    int                                 in1,
    // output parameters:
    SOAP_ENC__string                   &_GetSystemAlertsByStartDateReturn
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__GetSystemAlertsByStartDate(
    struct soap *soap,
    // input parameters:
    SOAP_ENC__string                    in0,
    int                                 in1,
    // output parameters:
    SOAP_ENC__string                   &_GetSystemAlertsByStartDateReturn
  );
@endcode

C++ proxy class (defined in soapAlertWebServiceSoapBindingProxy.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAlertWebServiceSoapBindingService.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetSystemAlertsByStartDate SOAP
//gsoap ns1  service method-style:	GetSystemAlertsByStartDate rpc
//gsoap ns1  service method-encoding:	GetSystemAlertsByStartDate http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	GetSystemAlertsByStartDate ""
//gsoap ns1  service method-output-action:	GetSystemAlertsByStartDate Response
int ns1__GetSystemAlertsByStartDate(
    SOAP_ENC__string                    :_in0,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    int                                 :_in1,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    SOAP_ENC__string                   &:_GetSystemAlertsByStartDateReturn	///< Output parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__GetSystemAlerts                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "ns1__GetSystemAlerts" of service binding "AlertWebServiceSoapBinding".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://192.168.156.104:8180/AlertWebService/services/AlertWebService

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__GetSystemAlerts(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    int                                 in0,
    // output parameters:
    SOAP_ENC__string                   &_GetSystemAlertsReturn
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__GetSystemAlerts(
    struct soap *soap,
    // input parameters:
    int                                 in0,
    // output parameters:
    SOAP_ENC__string                   &_GetSystemAlertsReturn
  );
@endcode

C++ proxy class (defined in soapAlertWebServiceSoapBindingProxy.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAlertWebServiceSoapBindingService.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetSystemAlerts SOAP
//gsoap ns1  service method-style:	GetSystemAlerts rpc
//gsoap ns1  service method-encoding:	GetSystemAlerts http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	GetSystemAlerts ""
//gsoap ns1  service method-output-action:	GetSystemAlerts Response
int ns1__GetSystemAlerts(
    int                                 :_in0,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    SOAP_ENC__string                   &:_GetSystemAlertsReturn	///< Output parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__AcknowledgeApplicationAlert                                         *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__AcknowledgeApplicationAlertResponse" of operation "ns1__AcknowledgeApplicationAlert".
struct ns1__AcknowledgeApplicationAlertResponse
{
};

/** Operation "ns1__AcknowledgeApplicationAlert" of service binding "AlertWebServiceSoapBinding".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://192.168.156.104:8180/AlertWebService/services/AlertWebService

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__AcknowledgeApplicationAlert(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    int                                 in0,
    SOAP_ENC__string                    in1,
    // output parameters:
    struct ns1__AcknowledgeApplicationAlertResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__AcknowledgeApplicationAlert(
    struct soap *soap,
    // input parameters:
    int                                 in0,
    SOAP_ENC__string                    in1,
    // output parameters:
    struct ns1__AcknowledgeApplicationAlertResponse&
  );
@endcode

C++ proxy class (defined in soapAlertWebServiceSoapBindingProxy.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAlertWebServiceSoapBindingService.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	AcknowledgeApplicationAlert SOAP
//gsoap ns1  service method-style:	AcknowledgeApplicationAlert rpc
//gsoap ns1  service method-encoding:	AcknowledgeApplicationAlert http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	AcknowledgeApplicationAlert ""
//gsoap ns1  service method-output-action:	AcknowledgeApplicationAlert Response
int ns1__AcknowledgeApplicationAlert(
    int                                 :_in0,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    SOAP_ENC__string                    :_in1,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    struct ns1__AcknowledgeApplicationAlertResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__AcknowledgeSystemAlert                                              *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__AcknowledgeSystemAlertResponse" of operation "ns1__AcknowledgeSystemAlert".
struct ns1__AcknowledgeSystemAlertResponse
{
};

/** Operation "ns1__AcknowledgeSystemAlert" of service binding "AlertWebServiceSoapBinding".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://192.168.156.104:8180/AlertWebService/services/AlertWebService

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__AcknowledgeSystemAlert(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    int                                 in0,
    SOAP_ENC__string                    in1,
    // output parameters:
    struct ns1__AcknowledgeSystemAlertResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__AcknowledgeSystemAlert(
    struct soap *soap,
    // input parameters:
    int                                 in0,
    SOAP_ENC__string                    in1,
    // output parameters:
    struct ns1__AcknowledgeSystemAlertResponse&
  );
@endcode

C++ proxy class (defined in soapAlertWebServiceSoapBindingProxy.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAlertWebServiceSoapBindingService.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	AcknowledgeSystemAlert SOAP
//gsoap ns1  service method-style:	AcknowledgeSystemAlert rpc
//gsoap ns1  service method-encoding:	AcknowledgeSystemAlert http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	AcknowledgeSystemAlert ""
//gsoap ns1  service method-output-action:	AcknowledgeSystemAlert Response
int ns1__AcknowledgeSystemAlert(
    int                                 :_in0,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    SOAP_ENC__string                    :_in1,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    struct ns1__AcknowledgeSystemAlertResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__DeleteAlertActionField2                                             *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__DeleteAlertActionField2Response" of operation "ns1__DeleteAlertActionField2".
struct ns1__DeleteAlertActionField2Response
{
};

/** Operation "ns1__DeleteAlertActionField2" of service binding "AlertWebServiceSoapBinding".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://192.168.156.104:8180/AlertWebService/services/AlertWebService

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__DeleteAlertActionField2(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    int                                 in0,
    int                                 in1,
    // output parameters:
    struct ns1__DeleteAlertActionField2Response&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__DeleteAlertActionField2(
    struct soap *soap,
    // input parameters:
    int                                 in0,
    int                                 in1,
    // output parameters:
    struct ns1__DeleteAlertActionField2Response&
  );
@endcode

C++ proxy class (defined in soapAlertWebServiceSoapBindingProxy.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAlertWebServiceSoapBindingService.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	DeleteAlertActionField2 SOAP
//gsoap ns1  service method-style:	DeleteAlertActionField2 rpc
//gsoap ns1  service method-encoding:	DeleteAlertActionField2 http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	DeleteAlertActionField2 ""
//gsoap ns1  service method-output-action:	DeleteAlertActionField2 Response
int ns1__DeleteAlertActionField2(
    int                                 :_in0,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    int                                 :_in1,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    struct ns1__DeleteAlertActionField2Response&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__DeleteAlertActionField                                              *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__DeleteAlertActionFieldResponse" of operation "ns1__DeleteAlertActionField".
struct ns1__DeleteAlertActionFieldResponse
{
};

/** Operation "ns1__DeleteAlertActionField" of service binding "AlertWebServiceSoapBinding".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://192.168.156.104:8180/AlertWebService/services/AlertWebService

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__DeleteAlertActionField(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    int                                 in0,
    // output parameters:
    struct ns1__DeleteAlertActionFieldResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__DeleteAlertActionField(
    struct soap *soap,
    // input parameters:
    int                                 in0,
    // output parameters:
    struct ns1__DeleteAlertActionFieldResponse&
  );
@endcode

C++ proxy class (defined in soapAlertWebServiceSoapBindingProxy.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAlertWebServiceSoapBindingService.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	DeleteAlertActionField SOAP
//gsoap ns1  service method-style:	DeleteAlertActionField rpc
//gsoap ns1  service method-encoding:	DeleteAlertActionField http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	DeleteAlertActionField ""
//gsoap ns1  service method-output-action:	DeleteAlertActionField Response
int ns1__DeleteAlertActionField(
    int                                 :_in0,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    struct ns1__DeleteAlertActionFieldResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__DeleteAlertActionParameter2                                         *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__DeleteAlertActionParameter2Response" of operation "ns1__DeleteAlertActionParameter2".
struct ns1__DeleteAlertActionParameter2Response
{
};

/** Operation "ns1__DeleteAlertActionParameter2" of service binding "AlertWebServiceSoapBinding".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://192.168.156.104:8180/AlertWebService/services/AlertWebService

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__DeleteAlertActionParameter2(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    int                                 in0,
    int                                 in1,
    // output parameters:
    struct ns1__DeleteAlertActionParameter2Response&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__DeleteAlertActionParameter2(
    struct soap *soap,
    // input parameters:
    int                                 in0,
    int                                 in1,
    // output parameters:
    struct ns1__DeleteAlertActionParameter2Response&
  );
@endcode

C++ proxy class (defined in soapAlertWebServiceSoapBindingProxy.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAlertWebServiceSoapBindingService.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	DeleteAlertActionParameter2 SOAP
//gsoap ns1  service method-style:	DeleteAlertActionParameter2 rpc
//gsoap ns1  service method-encoding:	DeleteAlertActionParameter2 http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	DeleteAlertActionParameter2 ""
//gsoap ns1  service method-output-action:	DeleteAlertActionParameter2 Response
int ns1__DeleteAlertActionParameter2(
    int                                 :_in0,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    int                                 :_in1,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    struct ns1__DeleteAlertActionParameter2Response&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__DeleteAlertActionParameter                                          *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__DeleteAlertActionParameterResponse" of operation "ns1__DeleteAlertActionParameter".
struct ns1__DeleteAlertActionParameterResponse
{
};

/** Operation "ns1__DeleteAlertActionParameter" of service binding "AlertWebServiceSoapBinding".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://192.168.156.104:8180/AlertWebService/services/AlertWebService

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__DeleteAlertActionParameter(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    int                                 in0,
    // output parameters:
    struct ns1__DeleteAlertActionParameterResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__DeleteAlertActionParameter(
    struct soap *soap,
    // input parameters:
    int                                 in0,
    // output parameters:
    struct ns1__DeleteAlertActionParameterResponse&
  );
@endcode

C++ proxy class (defined in soapAlertWebServiceSoapBindingProxy.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAlertWebServiceSoapBindingService.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	DeleteAlertActionParameter SOAP
//gsoap ns1  service method-style:	DeleteAlertActionParameter rpc
//gsoap ns1  service method-encoding:	DeleteAlertActionParameter http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	DeleteAlertActionParameter ""
//gsoap ns1  service method-output-action:	DeleteAlertActionParameter Response
int ns1__DeleteAlertActionParameter(
    int                                 :_in0,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    struct ns1__DeleteAlertActionParameterResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__DeleteAlertScheduleByScheduleId                                     *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__DeleteAlertScheduleByScheduleIdResponse" of operation "ns1__DeleteAlertScheduleByScheduleId".
struct ns1__DeleteAlertScheduleByScheduleIdResponse
{
};

/** Operation "ns1__DeleteAlertScheduleByScheduleId" of service binding "AlertWebServiceSoapBinding".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://192.168.156.104:8180/AlertWebService/services/AlertWebService

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__DeleteAlertScheduleByScheduleId(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    int                                 in0,
    // output parameters:
    struct ns1__DeleteAlertScheduleByScheduleIdResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__DeleteAlertScheduleByScheduleId(
    struct soap *soap,
    // input parameters:
    int                                 in0,
    // output parameters:
    struct ns1__DeleteAlertScheduleByScheduleIdResponse&
  );
@endcode

C++ proxy class (defined in soapAlertWebServiceSoapBindingProxy.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAlertWebServiceSoapBindingService.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	DeleteAlertScheduleByScheduleId SOAP
//gsoap ns1  service method-style:	DeleteAlertScheduleByScheduleId rpc
//gsoap ns1  service method-encoding:	DeleteAlertScheduleByScheduleId http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	DeleteAlertScheduleByScheduleId ""
//gsoap ns1  service method-output-action:	DeleteAlertScheduleByScheduleId Response
int ns1__DeleteAlertScheduleByScheduleId(
    int                                 :_in0,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    struct ns1__DeleteAlertScheduleByScheduleIdResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__DeleteAlertSchedule                                                 *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__DeleteAlertScheduleResponse" of operation "ns1__DeleteAlertSchedule".
struct ns1__DeleteAlertScheduleResponse
{
};

/** Operation "ns1__DeleteAlertSchedule" of service binding "AlertWebServiceSoapBinding".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://192.168.156.104:8180/AlertWebService/services/AlertWebService

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__DeleteAlertSchedule(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    int                                 in0,
    // output parameters:
    struct ns1__DeleteAlertScheduleResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__DeleteAlertSchedule(
    struct soap *soap,
    // input parameters:
    int                                 in0,
    // output parameters:
    struct ns1__DeleteAlertScheduleResponse&
  );
@endcode

C++ proxy class (defined in soapAlertWebServiceSoapBindingProxy.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAlertWebServiceSoapBindingService.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	DeleteAlertSchedule SOAP
//gsoap ns1  service method-style:	DeleteAlertSchedule rpc
//gsoap ns1  service method-encoding:	DeleteAlertSchedule http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	DeleteAlertSchedule ""
//gsoap ns1  service method-output-action:	DeleteAlertSchedule Response
int ns1__DeleteAlertSchedule(
    int                                 :_in0,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    struct ns1__DeleteAlertScheduleResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__DeleteAlertAction2                                                  *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__DeleteAlertAction2Response" of operation "ns1__DeleteAlertAction2".
struct ns1__DeleteAlertAction2Response
{
};

/** Operation "ns1__DeleteAlertAction2" of service binding "AlertWebServiceSoapBinding".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://192.168.156.104:8180/AlertWebService/services/AlertWebService

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__DeleteAlertAction2(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    int                                 in0,
    // output parameters:
    struct ns1__DeleteAlertAction2Response&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__DeleteAlertAction2(
    struct soap *soap,
    // input parameters:
    int                                 in0,
    // output parameters:
    struct ns1__DeleteAlertAction2Response&
  );
@endcode

C++ proxy class (defined in soapAlertWebServiceSoapBindingProxy.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAlertWebServiceSoapBindingService.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	DeleteAlertAction2 SOAP
//gsoap ns1  service method-style:	DeleteAlertAction2 rpc
//gsoap ns1  service method-encoding:	DeleteAlertAction2 http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	DeleteAlertAction2 ""
//gsoap ns1  service method-output-action:	DeleteAlertAction2 Response
int ns1__DeleteAlertAction2(
    int                                 :_in0,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    struct ns1__DeleteAlertAction2Response&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__DeleteAlertAction                                                   *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__DeleteAlertActionResponse" of operation "ns1__DeleteAlertAction".
struct ns1__DeleteAlertActionResponse
{
};

/** Operation "ns1__DeleteAlertAction" of service binding "AlertWebServiceSoapBinding".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://192.168.156.104:8180/AlertWebService/services/AlertWebService

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__DeleteAlertAction(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    int                                 in0,
    // output parameters:
    struct ns1__DeleteAlertActionResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__DeleteAlertAction(
    struct soap *soap,
    // input parameters:
    int                                 in0,
    // output parameters:
    struct ns1__DeleteAlertActionResponse&
  );
@endcode

C++ proxy class (defined in soapAlertWebServiceSoapBindingProxy.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAlertWebServiceSoapBindingService.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	DeleteAlertAction SOAP
//gsoap ns1  service method-style:	DeleteAlertAction rpc
//gsoap ns1  service method-encoding:	DeleteAlertAction http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	DeleteAlertAction ""
//gsoap ns1  service method-output-action:	DeleteAlertAction Response
int ns1__DeleteAlertAction(
    int                                 :_in0,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    struct ns1__DeleteAlertActionResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__DeleteAlertEvaluation2                                              *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__DeleteAlertEvaluation2Response" of operation "ns1__DeleteAlertEvaluation2".
struct ns1__DeleteAlertEvaluation2Response
{
};

/** Operation "ns1__DeleteAlertEvaluation2" of service binding "AlertWebServiceSoapBinding".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://192.168.156.104:8180/AlertWebService/services/AlertWebService

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__DeleteAlertEvaluation2(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    int                                 in0,
    int                                 in1,
    // output parameters:
    struct ns1__DeleteAlertEvaluation2Response&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__DeleteAlertEvaluation2(
    struct soap *soap,
    // input parameters:
    int                                 in0,
    int                                 in1,
    // output parameters:
    struct ns1__DeleteAlertEvaluation2Response&
  );
@endcode

C++ proxy class (defined in soapAlertWebServiceSoapBindingProxy.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAlertWebServiceSoapBindingService.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	DeleteAlertEvaluation2 SOAP
//gsoap ns1  service method-style:	DeleteAlertEvaluation2 rpc
//gsoap ns1  service method-encoding:	DeleteAlertEvaluation2 http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	DeleteAlertEvaluation2 ""
//gsoap ns1  service method-output-action:	DeleteAlertEvaluation2 Response
int ns1__DeleteAlertEvaluation2(
    int                                 :_in0,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    int                                 :_in1,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    struct ns1__DeleteAlertEvaluation2Response&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__DeleteAlertEvaluation                                               *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__DeleteAlertEvaluationResponse" of operation "ns1__DeleteAlertEvaluation".
struct ns1__DeleteAlertEvaluationResponse
{
};

/** Operation "ns1__DeleteAlertEvaluation" of service binding "AlertWebServiceSoapBinding".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://192.168.156.104:8180/AlertWebService/services/AlertWebService

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__DeleteAlertEvaluation(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    int                                 in0,
    // output parameters:
    struct ns1__DeleteAlertEvaluationResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__DeleteAlertEvaluation(
    struct soap *soap,
    // input parameters:
    int                                 in0,
    // output parameters:
    struct ns1__DeleteAlertEvaluationResponse&
  );
@endcode

C++ proxy class (defined in soapAlertWebServiceSoapBindingProxy.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAlertWebServiceSoapBindingService.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	DeleteAlertEvaluation SOAP
//gsoap ns1  service method-style:	DeleteAlertEvaluation rpc
//gsoap ns1  service method-encoding:	DeleteAlertEvaluation http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	DeleteAlertEvaluation ""
//gsoap ns1  service method-output-action:	DeleteAlertEvaluation Response
int ns1__DeleteAlertEvaluation(
    int                                 :_in0,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    struct ns1__DeleteAlertEvaluationResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__DeleteAlert                                                         *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__DeleteAlertResponse" of operation "ns1__DeleteAlert".
struct ns1__DeleteAlertResponse
{
};

/** Operation "ns1__DeleteAlert" of service binding "AlertWebServiceSoapBinding".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://192.168.156.104:8180/AlertWebService/services/AlertWebService

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__DeleteAlert(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    int                                 in0,
    // output parameters:
    struct ns1__DeleteAlertResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__DeleteAlert(
    struct soap *soap,
    // input parameters:
    int                                 in0,
    // output parameters:
    struct ns1__DeleteAlertResponse&
  );
@endcode

C++ proxy class (defined in soapAlertWebServiceSoapBindingProxy.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAlertWebServiceSoapBindingService.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	DeleteAlert SOAP
//gsoap ns1  service method-style:	DeleteAlert rpc
//gsoap ns1  service method-encoding:	DeleteAlert http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	DeleteAlert ""
//gsoap ns1  service method-output-action:	DeleteAlert Response
int ns1__DeleteAlert(
    int                                 :_in0,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    struct ns1__DeleteAlertResponse    &	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__GetRunningCenterCord                                                *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__GetRunningCenterCordResponse" of operation "ns1__GetRunningCenterCord".
struct ns1__GetRunningCenterCordResponse
{
    ns1__DCenterCordInfo*               :GetRunningCenterCordReturn;	///< Output parameter, : unqualified name as per RPC encoding
};

/** Operation "ns1__GetRunningCenterCord" of service binding "AlertWebServiceSoapBinding".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://192.168.156.104:8180/AlertWebService/services/AlertWebService

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__GetRunningCenterCord(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    // output parameters:
    struct ns1__GetRunningCenterCordResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__GetRunningCenterCord(
    struct soap *soap,
    // input parameters:
    // output parameters:
    struct ns1__GetRunningCenterCordResponse&
  );
@endcode

C++ proxy class (defined in soapAlertWebServiceSoapBindingProxy.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAlertWebServiceSoapBindingService.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetRunningCenterCord SOAP
//gsoap ns1  service method-style:	GetRunningCenterCord rpc
//gsoap ns1  service method-encoding:	GetRunningCenterCord http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	GetRunningCenterCord ""
//gsoap ns1  service method-output-action:	GetRunningCenterCord Response
int ns1__GetRunningCenterCord(
    struct ns1__GetRunningCenterCordResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__SetClientType                                                       *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__SetClientTypeResponse" of operation "ns1__SetClientType".
struct ns1__SetClientTypeResponse
{
};

/** Operation "ns1__SetClientType" of service binding "AlertWebServiceSoapBinding".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://192.168.156.104:8180/AlertWebService/services/AlertWebService

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__SetClientType(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    int                                 in0,
    // output parameters:
    struct ns1__SetClientTypeResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__SetClientType(
    struct soap *soap,
    // input parameters:
    int                                 in0,
    // output parameters:
    struct ns1__SetClientTypeResponse&
  );
@endcode

C++ proxy class (defined in soapAlertWebServiceSoapBindingProxy.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAlertWebServiceSoapBindingService.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	SetClientType SOAP
//gsoap ns1  service method-style:	SetClientType rpc
//gsoap ns1  service method-encoding:	SetClientType http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	SetClientType ""
//gsoap ns1  service method-output-action:	SetClientType Response
int ns1__SetClientType(
    int                                 :_in0,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    struct ns1__SetClientTypeResponse  &	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__SendServerUpdateNotification                                        *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__SendServerUpdateNotificationResponse" of operation "ns1__SendServerUpdateNotification".
struct ns1__SendServerUpdateNotificationResponse
{
};

/** Operation "ns1__SendServerUpdateNotification" of service binding "AlertWebServiceSoapBinding".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://192.168.156.104:8180/AlertWebService/services/AlertWebService

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__SendServerUpdateNotification(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    SOAP_ENC__string                    in0,
    // output parameters:
    struct ns1__SendServerUpdateNotificationResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__SendServerUpdateNotification(
    struct soap *soap,
    // input parameters:
    SOAP_ENC__string                    in0,
    // output parameters:
    struct ns1__SendServerUpdateNotificationResponse&
  );
@endcode

C++ proxy class (defined in soapAlertWebServiceSoapBindingProxy.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAlertWebServiceSoapBindingService.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	SendServerUpdateNotification SOAP
//gsoap ns1  service method-style:	SendServerUpdateNotification rpc
//gsoap ns1  service method-encoding:	SendServerUpdateNotification http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	SendServerUpdateNotification ""
//gsoap ns1  service method-output-action:	SendServerUpdateNotification Response
int ns1__SendServerUpdateNotification(
    SOAP_ENC__string                    :_in0,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    struct ns1__SendServerUpdateNotificationResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__UnSubscribeToDocumentType                                           *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__UnSubscribeToDocumentTypeResponse" of operation "ns1__UnSubscribeToDocumentType".
struct ns1__UnSubscribeToDocumentTypeResponse
{
};

/** Operation "ns1__UnSubscribeToDocumentType" of service binding "AlertWebServiceSoapBinding".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://192.168.156.104:8180/AlertWebService/services/AlertWebService

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__UnSubscribeToDocumentType(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    int                                 in0,
    // output parameters:
    struct ns1__UnSubscribeToDocumentTypeResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__UnSubscribeToDocumentType(
    struct soap *soap,
    // input parameters:
    int                                 in0,
    // output parameters:
    struct ns1__UnSubscribeToDocumentTypeResponse&
  );
@endcode

C++ proxy class (defined in soapAlertWebServiceSoapBindingProxy.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAlertWebServiceSoapBindingService.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	UnSubscribeToDocumentType SOAP
//gsoap ns1  service method-style:	UnSubscribeToDocumentType rpc
//gsoap ns1  service method-encoding:	UnSubscribeToDocumentType http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	UnSubscribeToDocumentType ""
//gsoap ns1  service method-output-action:	UnSubscribeToDocumentType Response
int ns1__UnSubscribeToDocumentType(
    int                                 :_in0,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    struct ns1__UnSubscribeToDocumentTypeResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__SubscribeToDocumentType                                             *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__SubscribeToDocumentTypeResponse" of operation "ns1__SubscribeToDocumentType".
struct ns1__SubscribeToDocumentTypeResponse
{
};

/** Operation "ns1__SubscribeToDocumentType" of service binding "AlertWebServiceSoapBinding".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://192.168.156.104:8180/AlertWebService/services/AlertWebService

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__SubscribeToDocumentType(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    int                                 in0,
    // output parameters:
    struct ns1__SubscribeToDocumentTypeResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__SubscribeToDocumentType(
    struct soap *soap,
    // input parameters:
    int                                 in0,
    // output parameters:
    struct ns1__SubscribeToDocumentTypeResponse&
  );
@endcode

C++ proxy class (defined in soapAlertWebServiceSoapBindingProxy.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAlertWebServiceSoapBindingService.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	SubscribeToDocumentType SOAP
//gsoap ns1  service method-style:	SubscribeToDocumentType rpc
//gsoap ns1  service method-encoding:	SubscribeToDocumentType http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	SubscribeToDocumentType ""
//gsoap ns1  service method-output-action:	SubscribeToDocumentType Response
int ns1__SubscribeToDocumentType(
    int                                 :_in0,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    struct ns1__SubscribeToDocumentTypeResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__SendNetworkDocument                                                 *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__SendNetworkDocumentResponse" of operation "ns1__SendNetworkDocument".
struct ns1__SendNetworkDocumentResponse
{
};

/** Operation "ns1__SendNetworkDocument" of service binding "AlertWebServiceSoapBinding".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://192.168.156.104:8180/AlertWebService/services/AlertWebService

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__SendNetworkDocument(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    SOAP_ENC__string                    in0,
    // output parameters:
    struct ns1__SendNetworkDocumentResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__SendNetworkDocument(
    struct soap *soap,
    // input parameters:
    SOAP_ENC__string                    in0,
    // output parameters:
    struct ns1__SendNetworkDocumentResponse&
  );
@endcode

C++ proxy class (defined in soapAlertWebServiceSoapBindingProxy.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAlertWebServiceSoapBindingService.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	SendNetworkDocument SOAP
//gsoap ns1  service method-style:	SendNetworkDocument rpc
//gsoap ns1  service method-encoding:	SendNetworkDocument http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	SendNetworkDocument ""
//gsoap ns1  service method-output-action:	SendNetworkDocument Response
int ns1__SendNetworkDocument(
    SOAP_ENC__string                    :_in0,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    struct ns1__SendNetworkDocumentResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__SendAlert                                                           *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__SendAlertResponse" of operation "ns1__SendAlert".
struct ns1__SendAlertResponse
{
};

/** Operation "ns1__SendAlert" of service binding "AlertWebServiceSoapBinding".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://192.168.156.104:8180/AlertWebService/services/AlertWebService

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__SendAlert(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    int                                 in0,
    int                                 in1,
    int                                 in2,
    int                                 in3,
    int                                 in4,
    int                                 in5,
    SOAP_ENC__string                    in6,
    // output parameters:
    struct ns1__SendAlertResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__SendAlert(
    struct soap *soap,
    // input parameters:
    int                                 in0,
    int                                 in1,
    int                                 in2,
    int                                 in3,
    int                                 in4,
    int                                 in5,
    SOAP_ENC__string                    in6,
    // output parameters:
    struct ns1__SendAlertResponse&
  );
@endcode

C++ proxy class (defined in soapAlertWebServiceSoapBindingProxy.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAlertWebServiceSoapBindingService.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	SendAlert SOAP
//gsoap ns1  service method-style:	SendAlert rpc
//gsoap ns1  service method-encoding:	SendAlert http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	SendAlert ""
//gsoap ns1  service method-output-action:	SendAlert Response
int ns1__SendAlert(
    int                                 :_in0,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    int                                 :_in1,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    int                                 :_in2,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    int                                 :_in3,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    int                                 :_in4,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    int                                 :_in5,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    SOAP_ENC__string                    :_in6,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    struct ns1__SendAlertResponse      &	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__GetTlkpActionParametersRecordByParameterId                          *
 *                                                                            *
\******************************************************************************/


/** Operation "ns1__GetTlkpActionParametersRecordByParameterId" of service binding "AlertWebServiceSoapBinding".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://192.168.156.104:8180/AlertWebService/services/AlertWebService

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__GetTlkpActionParametersRecordByParameterId(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    int                                 in0,
    int                                 in1,
    // output parameters:
    SOAP_ENC__string                   &_GetTlkpActionParametersRecordByParameterIdReturn
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__GetTlkpActionParametersRecordByParameterId(
    struct soap *soap,
    // input parameters:
    int                                 in0,
    int                                 in1,
    // output parameters:
    SOAP_ENC__string                   &_GetTlkpActionParametersRecordByParameterIdReturn
  );
@endcode

C++ proxy class (defined in soapAlertWebServiceSoapBindingProxy.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAlertWebServiceSoapBindingService.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetTlkpActionParametersRecordByParameterId SOAP
//gsoap ns1  service method-style:	GetTlkpActionParametersRecordByParameterId rpc
//gsoap ns1  service method-encoding:	GetTlkpActionParametersRecordByParameterId http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	GetTlkpActionParametersRecordByParameterId ""
//gsoap ns1  service method-output-action:	GetTlkpActionParametersRecordByParameterId Response
int ns1__GetTlkpActionParametersRecordByParameterId(
    int                                 :_in0,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    int                                 :_in1,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    SOAP_ENC__string                   &:_GetTlkpActionParametersRecordByParameterIdReturn	///< Output parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__GetTlkpActionParametersRecord                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "ns1__GetTlkpActionParametersRecord" of service binding "AlertWebServiceSoapBinding".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://192.168.156.104:8180/AlertWebService/services/AlertWebService

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__GetTlkpActionParametersRecord(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    int                                 in0,
    // output parameters:
    SOAP_ENC__string                   &_GetTlkpActionParametersRecordReturn
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__GetTlkpActionParametersRecord(
    struct soap *soap,
    // input parameters:
    int                                 in0,
    // output parameters:
    SOAP_ENC__string                   &_GetTlkpActionParametersRecordReturn
  );
@endcode

C++ proxy class (defined in soapAlertWebServiceSoapBindingProxy.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAlertWebServiceSoapBindingService.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetTlkpActionParametersRecord SOAP
//gsoap ns1  service method-style:	GetTlkpActionParametersRecord rpc
//gsoap ns1  service method-encoding:	GetTlkpActionParametersRecord http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	GetTlkpActionParametersRecord ""
//gsoap ns1  service method-output-action:	GetTlkpActionParametersRecord Response
int ns1__GetTlkpActionParametersRecord(
    int                                 :_in0,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    SOAP_ENC__string                   &:_GetTlkpActionParametersRecordReturn	///< Output parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__GetTlkpPriorityLevelRecordByPriorityLevel                           *
 *                                                                            *
\******************************************************************************/


/** Operation "ns1__GetTlkpPriorityLevelRecordByPriorityLevel" of service binding "AlertWebServiceSoapBinding".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://192.168.156.104:8180/AlertWebService/services/AlertWebService

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__GetTlkpPriorityLevelRecordByPriorityLevel(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    int                                 in0,
    // output parameters:
    SOAP_ENC__string                   &_GetTlkpPriorityLevelRecordByPriorityLevelReturn
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__GetTlkpPriorityLevelRecordByPriorityLevel(
    struct soap *soap,
    // input parameters:
    int                                 in0,
    // output parameters:
    SOAP_ENC__string                   &_GetTlkpPriorityLevelRecordByPriorityLevelReturn
  );
@endcode

C++ proxy class (defined in soapAlertWebServiceSoapBindingProxy.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAlertWebServiceSoapBindingService.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetTlkpPriorityLevelRecordByPriorityLevel SOAP
//gsoap ns1  service method-style:	GetTlkpPriorityLevelRecordByPriorityLevel rpc
//gsoap ns1  service method-encoding:	GetTlkpPriorityLevelRecordByPriorityLevel http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	GetTlkpPriorityLevelRecordByPriorityLevel ""
//gsoap ns1  service method-output-action:	GetTlkpPriorityLevelRecordByPriorityLevel Response
int ns1__GetTlkpPriorityLevelRecordByPriorityLevel(
    int                                 :_in0,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    SOAP_ENC__string                   &:_GetTlkpPriorityLevelRecordByPriorityLevelReturn	///< Output parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__GetTlkpPriorityLevelRecord                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "ns1__GetTlkpPriorityLevelRecord" of service binding "AlertWebServiceSoapBinding".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://192.168.156.104:8180/AlertWebService/services/AlertWebService

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__GetTlkpPriorityLevelRecord(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    // output parameters:
    SOAP_ENC__string                   &GetTlkpPriorityLevelRecordReturn
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__GetTlkpPriorityLevelRecord(
    struct soap *soap,
    // input parameters:
    // output parameters:
    SOAP_ENC__string                   &GetTlkpPriorityLevelRecordReturn
  );
@endcode

C++ proxy class (defined in soapAlertWebServiceSoapBindingProxy.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAlertWebServiceSoapBindingService.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetTlkpPriorityLevelRecord SOAP
//gsoap ns1  service method-style:	GetTlkpPriorityLevelRecord rpc
//gsoap ns1  service method-encoding:	GetTlkpPriorityLevelRecord http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	GetTlkpPriorityLevelRecord ""
//gsoap ns1  service method-output-action:	GetTlkpPriorityLevelRecord Response
int ns1__GetTlkpPriorityLevelRecord(
    SOAP_ENC__string                   &:GetTlkpPriorityLevelRecordReturn	///< Output parameter, : unqualified name as per RPC encoding
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__GetTlkpActionsRecordByAction                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "ns1__GetTlkpActionsRecordByAction" of service binding "AlertWebServiceSoapBinding".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://192.168.156.104:8180/AlertWebService/services/AlertWebService

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__GetTlkpActionsRecordByAction(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    int                                 in0,
    // output parameters:
    SOAP_ENC__string                   &_GetTlkpActionsRecordByActionReturn
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__GetTlkpActionsRecordByAction(
    struct soap *soap,
    // input parameters:
    int                                 in0,
    // output parameters:
    SOAP_ENC__string                   &_GetTlkpActionsRecordByActionReturn
  );
@endcode

C++ proxy class (defined in soapAlertWebServiceSoapBindingProxy.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAlertWebServiceSoapBindingService.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetTlkpActionsRecordByAction SOAP
//gsoap ns1  service method-style:	GetTlkpActionsRecordByAction rpc
//gsoap ns1  service method-encoding:	GetTlkpActionsRecordByAction http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	GetTlkpActionsRecordByAction ""
//gsoap ns1  service method-output-action:	GetTlkpActionsRecordByAction Response
int ns1__GetTlkpActionsRecordByAction(
    int                                 :_in0,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    SOAP_ENC__string                   &:_GetTlkpActionsRecordByActionReturn	///< Output parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__GetTlkpActionsRecord                                                *
 *                                                                            *
\******************************************************************************/


/** Operation "ns1__GetTlkpActionsRecord" of service binding "AlertWebServiceSoapBinding".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://192.168.156.104:8180/AlertWebService/services/AlertWebService

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__GetTlkpActionsRecord(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    // output parameters:
    SOAP_ENC__string                   &GetTlkpActionsRecordReturn
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__GetTlkpActionsRecord(
    struct soap *soap,
    // input parameters:
    // output parameters:
    SOAP_ENC__string                   &GetTlkpActionsRecordReturn
  );
@endcode

C++ proxy class (defined in soapAlertWebServiceSoapBindingProxy.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAlertWebServiceSoapBindingService.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetTlkpActionsRecord SOAP
//gsoap ns1  service method-style:	GetTlkpActionsRecord rpc
//gsoap ns1  service method-encoding:	GetTlkpActionsRecord http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	GetTlkpActionsRecord ""
//gsoap ns1  service method-output-action:	GetTlkpActionsRecord Response
int ns1__GetTlkpActionsRecord(
    SOAP_ENC__string                   &:GetTlkpActionsRecordReturn	///< Output parameter, : unqualified name as per RPC encoding
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__GetTlkpDocumentFieldTypesRecord                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "ns1__GetTlkpDocumentFieldTypesRecord" of service binding "AlertWebServiceSoapBinding".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://192.168.156.104:8180/AlertWebService/services/AlertWebService

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__GetTlkpDocumentFieldTypesRecord(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    int                                 in0,
    // output parameters:
    SOAP_ENC__string                   &_GetTlkpDocumentFieldTypesRecordReturn
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__GetTlkpDocumentFieldTypesRecord(
    struct soap *soap,
    // input parameters:
    int                                 in0,
    // output parameters:
    SOAP_ENC__string                   &_GetTlkpDocumentFieldTypesRecordReturn
  );
@endcode

C++ proxy class (defined in soapAlertWebServiceSoapBindingProxy.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAlertWebServiceSoapBindingService.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetTlkpDocumentFieldTypesRecord SOAP
//gsoap ns1  service method-style:	GetTlkpDocumentFieldTypesRecord rpc
//gsoap ns1  service method-encoding:	GetTlkpDocumentFieldTypesRecord http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	GetTlkpDocumentFieldTypesRecord ""
//gsoap ns1  service method-output-action:	GetTlkpDocumentFieldTypesRecord Response
int ns1__GetTlkpDocumentFieldTypesRecord(
    int                                 :_in0,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    SOAP_ENC__string                   &:_GetTlkpDocumentFieldTypesRecordReturn	///< Output parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__GetTlkpDocumentFieldsRecord                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "ns1__GetTlkpDocumentFieldsRecord" of service binding "AlertWebServiceSoapBinding".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://192.168.156.104:8180/AlertWebService/services/AlertWebService

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__GetTlkpDocumentFieldsRecord(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    int                                 in0,
    // output parameters:
    SOAP_ENC__string                   &_GetTlkpDocumentFieldsRecordReturn
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__GetTlkpDocumentFieldsRecord(
    struct soap *soap,
    // input parameters:
    int                                 in0,
    // output parameters:
    SOAP_ENC__string                   &_GetTlkpDocumentFieldsRecordReturn
  );
@endcode

C++ proxy class (defined in soapAlertWebServiceSoapBindingProxy.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAlertWebServiceSoapBindingService.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetTlkpDocumentFieldsRecord SOAP
//gsoap ns1  service method-style:	GetTlkpDocumentFieldsRecord rpc
//gsoap ns1  service method-encoding:	GetTlkpDocumentFieldsRecord http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	GetTlkpDocumentFieldsRecord ""
//gsoap ns1  service method-output-action:	GetTlkpDocumentFieldsRecord Response
int ns1__GetTlkpDocumentFieldsRecord(
    int                                 :_in0,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    SOAP_ENC__string                   &:_GetTlkpDocumentFieldsRecordReturn	///< Output parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__GetTlkpDocumentTypesRecordByClientType                              *
 *                                                                            *
\******************************************************************************/


/** Operation "ns1__GetTlkpDocumentTypesRecordByClientType" of service binding "AlertWebServiceSoapBinding".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://192.168.156.104:8180/AlertWebService/services/AlertWebService

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__GetTlkpDocumentTypesRecordByClientType(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    int                                 in0,
    // output parameters:
    SOAP_ENC__string                   &_GetTlkpDocumentTypesRecordByClientTypeReturn
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__GetTlkpDocumentTypesRecordByClientType(
    struct soap *soap,
    // input parameters:
    int                                 in0,
    // output parameters:
    SOAP_ENC__string                   &_GetTlkpDocumentTypesRecordByClientTypeReturn
  );
@endcode

C++ proxy class (defined in soapAlertWebServiceSoapBindingProxy.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAlertWebServiceSoapBindingService.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetTlkpDocumentTypesRecordByClientType SOAP
//gsoap ns1  service method-style:	GetTlkpDocumentTypesRecordByClientType rpc
//gsoap ns1  service method-encoding:	GetTlkpDocumentTypesRecordByClientType http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	GetTlkpDocumentTypesRecordByClientType ""
//gsoap ns1  service method-output-action:	GetTlkpDocumentTypesRecordByClientType Response
int ns1__GetTlkpDocumentTypesRecordByClientType(
    int                                 :_in0,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    SOAP_ENC__string                   &:_GetTlkpDocumentTypesRecordByClientTypeReturn	///< Output parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__GetTlkpDocumentTypesRecord                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "ns1__GetTlkpDocumentTypesRecord" of service binding "AlertWebServiceSoapBinding".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://192.168.156.104:8180/AlertWebService/services/AlertWebService

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__GetTlkpDocumentTypesRecord(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    // output parameters:
    SOAP_ENC__string                   &GetTlkpDocumentTypesRecordReturn
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__GetTlkpDocumentTypesRecord(
    struct soap *soap,
    // input parameters:
    // output parameters:
    SOAP_ENC__string                   &GetTlkpDocumentTypesRecordReturn
  );
@endcode

C++ proxy class (defined in soapAlertWebServiceSoapBindingProxy.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAlertWebServiceSoapBindingService.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetTlkpDocumentTypesRecord SOAP
//gsoap ns1  service method-style:	GetTlkpDocumentTypesRecord rpc
//gsoap ns1  service method-encoding:	GetTlkpDocumentTypesRecord http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	GetTlkpDocumentTypesRecord ""
//gsoap ns1  service method-output-action:	GetTlkpDocumentTypesRecord Response
int ns1__GetTlkpDocumentTypesRecord(
    SOAP_ENC__string                   &:GetTlkpDocumentTypesRecordReturn	///< Output parameter, : unqualified name as per RPC encoding
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__GetAlertActionFieldsRecord                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "ns1__GetAlertActionFieldsRecord" of service binding "AlertWebServiceSoapBinding".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://192.168.156.104:8180/AlertWebService/services/AlertWebService

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__GetAlertActionFieldsRecord(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    int                                 in0,
    // output parameters:
    SOAP_ENC__string                   &_GetAlertActionFieldsRecordReturn
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__GetAlertActionFieldsRecord(
    struct soap *soap,
    // input parameters:
    int                                 in0,
    // output parameters:
    SOAP_ENC__string                   &_GetAlertActionFieldsRecordReturn
  );
@endcode

C++ proxy class (defined in soapAlertWebServiceSoapBindingProxy.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAlertWebServiceSoapBindingService.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetAlertActionFieldsRecord SOAP
//gsoap ns1  service method-style:	GetAlertActionFieldsRecord rpc
//gsoap ns1  service method-encoding:	GetAlertActionFieldsRecord http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	GetAlertActionFieldsRecord ""
//gsoap ns1  service method-output-action:	GetAlertActionFieldsRecord Response
int ns1__GetAlertActionFieldsRecord(
    int                                 :_in0,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    SOAP_ENC__string                   &:_GetAlertActionFieldsRecordReturn	///< Output parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__GetAlertActionParameterRecord                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "ns1__GetAlertActionParameterRecord" of service binding "AlertWebServiceSoapBinding".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://192.168.156.104:8180/AlertWebService/services/AlertWebService

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__GetAlertActionParameterRecord(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    int                                 in0,
    // output parameters:
    SOAP_ENC__string                   &_GetAlertActionParameterRecordReturn
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__GetAlertActionParameterRecord(
    struct soap *soap,
    // input parameters:
    int                                 in0,
    // output parameters:
    SOAP_ENC__string                   &_GetAlertActionParameterRecordReturn
  );
@endcode

C++ proxy class (defined in soapAlertWebServiceSoapBindingProxy.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAlertWebServiceSoapBindingService.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetAlertActionParameterRecord SOAP
//gsoap ns1  service method-style:	GetAlertActionParameterRecord rpc
//gsoap ns1  service method-encoding:	GetAlertActionParameterRecord http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	GetAlertActionParameterRecord ""
//gsoap ns1  service method-output-action:	GetAlertActionParameterRecord Response
int ns1__GetAlertActionParameterRecord(
    int                                 :_in0,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    SOAP_ENC__string                   &:_GetAlertActionParameterRecordReturn	///< Output parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__GetAlertSchedulesRecord                                             *
 *                                                                            *
\******************************************************************************/


/** Operation "ns1__GetAlertSchedulesRecord" of service binding "AlertWebServiceSoapBinding".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://192.168.156.104:8180/AlertWebService/services/AlertWebService

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__GetAlertSchedulesRecord(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    int                                 in0,
    // output parameters:
    SOAP_ENC__string                   &_GetAlertSchedulesRecordReturn
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__GetAlertSchedulesRecord(
    struct soap *soap,
    // input parameters:
    int                                 in0,
    // output parameters:
    SOAP_ENC__string                   &_GetAlertSchedulesRecordReturn
  );
@endcode

C++ proxy class (defined in soapAlertWebServiceSoapBindingProxy.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAlertWebServiceSoapBindingService.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetAlertSchedulesRecord SOAP
//gsoap ns1  service method-style:	GetAlertSchedulesRecord rpc
//gsoap ns1  service method-encoding:	GetAlertSchedulesRecord http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	GetAlertSchedulesRecord ""
//gsoap ns1  service method-output-action:	GetAlertSchedulesRecord Response
int ns1__GetAlertSchedulesRecord(
    int                                 :_in0,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    SOAP_ENC__string                   &:_GetAlertSchedulesRecordReturn	///< Output parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__GetAlertActionsRecord                                               *
 *                                                                            *
\******************************************************************************/


/** Operation "ns1__GetAlertActionsRecord" of service binding "AlertWebServiceSoapBinding".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://192.168.156.104:8180/AlertWebService/services/AlertWebService

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__GetAlertActionsRecord(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    int                                 in0,
    // output parameters:
    SOAP_ENC__string                   &_GetAlertActionsRecordReturn
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__GetAlertActionsRecord(
    struct soap *soap,
    // input parameters:
    int                                 in0,
    // output parameters:
    SOAP_ENC__string                   &_GetAlertActionsRecordReturn
  );
@endcode

C++ proxy class (defined in soapAlertWebServiceSoapBindingProxy.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAlertWebServiceSoapBindingService.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetAlertActionsRecord SOAP
//gsoap ns1  service method-style:	GetAlertActionsRecord rpc
//gsoap ns1  service method-encoding:	GetAlertActionsRecord http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	GetAlertActionsRecord ""
//gsoap ns1  service method-output-action:	GetAlertActionsRecord Response
int ns1__GetAlertActionsRecord(
    int                                 :_in0,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    SOAP_ENC__string                   &:_GetAlertActionsRecordReturn	///< Output parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__GetAlertEvaluationsRecord                                           *
 *                                                                            *
\******************************************************************************/


/** Operation "ns1__GetAlertEvaluationsRecord" of service binding "AlertWebServiceSoapBinding".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://192.168.156.104:8180/AlertWebService/services/AlertWebService

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__GetAlertEvaluationsRecord(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    int                                 in0,
    // output parameters:
    SOAP_ENC__string                   &_GetAlertEvaluationsRecordReturn
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__GetAlertEvaluationsRecord(
    struct soap *soap,
    // input parameters:
    int                                 in0,
    // output parameters:
    SOAP_ENC__string                   &_GetAlertEvaluationsRecordReturn
  );
@endcode

C++ proxy class (defined in soapAlertWebServiceSoapBindingProxy.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAlertWebServiceSoapBindingService.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetAlertEvaluationsRecord SOAP
//gsoap ns1  service method-style:	GetAlertEvaluationsRecord rpc
//gsoap ns1  service method-encoding:	GetAlertEvaluationsRecord http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	GetAlertEvaluationsRecord ""
//gsoap ns1  service method-output-action:	GetAlertEvaluationsRecord Response
int ns1__GetAlertEvaluationsRecord(
    int                                 :_in0,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    SOAP_ENC__string                   &:_GetAlertEvaluationsRecordReturn	///< Output parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__GetAlertsRecordByDocumentType                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "ns1__GetAlertsRecordByDocumentType" of service binding "AlertWebServiceSoapBinding".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://192.168.156.104:8180/AlertWebService/services/AlertWebService

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__GetAlertsRecordByDocumentType(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    int                                 in0,
    // output parameters:
    SOAP_ENC__string                   &_GetAlertsRecordByDocumentTypeReturn
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__GetAlertsRecordByDocumentType(
    struct soap *soap,
    // input parameters:
    int                                 in0,
    // output parameters:
    SOAP_ENC__string                   &_GetAlertsRecordByDocumentTypeReturn
  );
@endcode

C++ proxy class (defined in soapAlertWebServiceSoapBindingProxy.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAlertWebServiceSoapBindingService.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetAlertsRecordByDocumentType SOAP
//gsoap ns1  service method-style:	GetAlertsRecordByDocumentType rpc
//gsoap ns1  service method-encoding:	GetAlertsRecordByDocumentType http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	GetAlertsRecordByDocumentType ""
//gsoap ns1  service method-output-action:	GetAlertsRecordByDocumentType Response
int ns1__GetAlertsRecordByDocumentType(
    int                                 :_in0,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    SOAP_ENC__string                   &:_GetAlertsRecordByDocumentTypeReturn	///< Output parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__GetAlertsRecord                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "ns1__GetAlertsRecord" of service binding "AlertWebServiceSoapBinding".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://192.168.156.104:8180/AlertWebService/services/AlertWebService

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__GetAlertsRecord(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    // output parameters:
    SOAP_ENC__string                   &GetAlertsRecordReturn
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__GetAlertsRecord(
    struct soap *soap,
    // input parameters:
    // output parameters:
    SOAP_ENC__string                   &GetAlertsRecordReturn
  );
@endcode

C++ proxy class (defined in soapAlertWebServiceSoapBindingProxy.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAlertWebServiceSoapBindingService.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetAlertsRecord SOAP
//gsoap ns1  service method-style:	GetAlertsRecord rpc
//gsoap ns1  service method-encoding:	GetAlertsRecord http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	GetAlertsRecord ""
//gsoap ns1  service method-output-action:	GetAlertsRecord Response
int ns1__GetAlertsRecord(
    SOAP_ENC__string                   &:GetAlertsRecordReturn	///< Output parameter, : unqualified name as per RPC encoding
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__UpdateAlertActionField                                              *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__UpdateAlertActionFieldResponse" of operation "ns1__UpdateAlertActionField".
struct ns1__UpdateAlertActionFieldResponse
{
};

/** Operation "ns1__UpdateAlertActionField" of service binding "AlertWebServiceSoapBinding".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://192.168.156.104:8180/AlertWebService/services/AlertWebService

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__UpdateAlertActionField(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    int                                 in0,
    int                                 in1,
    // output parameters:
    struct ns1__UpdateAlertActionFieldResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__UpdateAlertActionField(
    struct soap *soap,
    // input parameters:
    int                                 in0,
    int                                 in1,
    // output parameters:
    struct ns1__UpdateAlertActionFieldResponse&
  );
@endcode

C++ proxy class (defined in soapAlertWebServiceSoapBindingProxy.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAlertWebServiceSoapBindingService.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	UpdateAlertActionField SOAP
//gsoap ns1  service method-style:	UpdateAlertActionField rpc
//gsoap ns1  service method-encoding:	UpdateAlertActionField http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	UpdateAlertActionField ""
//gsoap ns1  service method-output-action:	UpdateAlertActionField Response
int ns1__UpdateAlertActionField(
    int                                 :_in0,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    int                                 :_in1,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    struct ns1__UpdateAlertActionFieldResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__InsertAlertActionField                                              *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__InsertAlertActionFieldResponse" of operation "ns1__InsertAlertActionField".
struct ns1__InsertAlertActionFieldResponse
{
};

/** Operation "ns1__InsertAlertActionField" of service binding "AlertWebServiceSoapBinding".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://192.168.156.104:8180/AlertWebService/services/AlertWebService

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__InsertAlertActionField(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    int                                 in0,
    int                                 in1,
    // output parameters:
    struct ns1__InsertAlertActionFieldResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__InsertAlertActionField(
    struct soap *soap,
    // input parameters:
    int                                 in0,
    int                                 in1,
    // output parameters:
    struct ns1__InsertAlertActionFieldResponse&
  );
@endcode

C++ proxy class (defined in soapAlertWebServiceSoapBindingProxy.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAlertWebServiceSoapBindingService.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	InsertAlertActionField SOAP
//gsoap ns1  service method-style:	InsertAlertActionField rpc
//gsoap ns1  service method-encoding:	InsertAlertActionField http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	InsertAlertActionField ""
//gsoap ns1  service method-output-action:	InsertAlertActionField Response
int ns1__InsertAlertActionField(
    int                                 :_in0,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    int                                 :_in1,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    struct ns1__InsertAlertActionFieldResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__UpdateAlertActionParameter                                          *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__UpdateAlertActionParameterResponse" of operation "ns1__UpdateAlertActionParameter".
struct ns1__UpdateAlertActionParameterResponse
{
};

/** Operation "ns1__UpdateAlertActionParameter" of service binding "AlertWebServiceSoapBinding".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://192.168.156.104:8180/AlertWebService/services/AlertWebService

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__UpdateAlertActionParameter(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    int                                 in0,
    int                                 in1,
    SOAP_ENC__string                    in2,
    // output parameters:
    struct ns1__UpdateAlertActionParameterResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__UpdateAlertActionParameter(
    struct soap *soap,
    // input parameters:
    int                                 in0,
    int                                 in1,
    SOAP_ENC__string                    in2,
    // output parameters:
    struct ns1__UpdateAlertActionParameterResponse&
  );
@endcode

C++ proxy class (defined in soapAlertWebServiceSoapBindingProxy.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAlertWebServiceSoapBindingService.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	UpdateAlertActionParameter SOAP
//gsoap ns1  service method-style:	UpdateAlertActionParameter rpc
//gsoap ns1  service method-encoding:	UpdateAlertActionParameter http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	UpdateAlertActionParameter ""
//gsoap ns1  service method-output-action:	UpdateAlertActionParameter Response
int ns1__UpdateAlertActionParameter(
    int                                 :_in0,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    int                                 :_in1,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    SOAP_ENC__string                    :_in2,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    struct ns1__UpdateAlertActionParameterResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__InsertAlertActionParameter                                          *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__InsertAlertActionParameterResponse" of operation "ns1__InsertAlertActionParameter".
struct ns1__InsertAlertActionParameterResponse
{
};

/** Operation "ns1__InsertAlertActionParameter" of service binding "AlertWebServiceSoapBinding".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://192.168.156.104:8180/AlertWebService/services/AlertWebService

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__InsertAlertActionParameter(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    int                                 in0,
    int                                 in1,
    SOAP_ENC__string                    in2,
    // output parameters:
    struct ns1__InsertAlertActionParameterResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__InsertAlertActionParameter(
    struct soap *soap,
    // input parameters:
    int                                 in0,
    int                                 in1,
    SOAP_ENC__string                    in2,
    // output parameters:
    struct ns1__InsertAlertActionParameterResponse&
  );
@endcode

C++ proxy class (defined in soapAlertWebServiceSoapBindingProxy.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAlertWebServiceSoapBindingService.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	InsertAlertActionParameter SOAP
//gsoap ns1  service method-style:	InsertAlertActionParameter rpc
//gsoap ns1  service method-encoding:	InsertAlertActionParameter http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	InsertAlertActionParameter ""
//gsoap ns1  service method-output-action:	InsertAlertActionParameter Response
int ns1__InsertAlertActionParameter(
    int                                 :_in0,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    int                                 :_in1,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    SOAP_ENC__string                    :_in2,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    struct ns1__InsertAlertActionParameterResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__UpdateAlertSchedule                                                 *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__UpdateAlertScheduleResponse" of operation "ns1__UpdateAlertSchedule".
struct ns1__UpdateAlertScheduleResponse
{
};

/** Operation "ns1__UpdateAlertSchedule" of service binding "AlertWebServiceSoapBinding".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://192.168.156.104:8180/AlertWebService/services/AlertWebService

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__UpdateAlertSchedule(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    int                                 in0,
    SOAP_ENC__string                    in1,
    SOAP_ENC__string                    in2,
    SOAP_ENC__string                    in3,
    SOAP_ENC__string                    in4,
    SOAP_ENC__string                    in5,
    // output parameters:
    struct ns1__UpdateAlertScheduleResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__UpdateAlertSchedule(
    struct soap *soap,
    // input parameters:
    int                                 in0,
    SOAP_ENC__string                    in1,
    SOAP_ENC__string                    in2,
    SOAP_ENC__string                    in3,
    SOAP_ENC__string                    in4,
    SOAP_ENC__string                    in5,
    // output parameters:
    struct ns1__UpdateAlertScheduleResponse&
  );
@endcode

C++ proxy class (defined in soapAlertWebServiceSoapBindingProxy.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAlertWebServiceSoapBindingService.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	UpdateAlertSchedule SOAP
//gsoap ns1  service method-style:	UpdateAlertSchedule rpc
//gsoap ns1  service method-encoding:	UpdateAlertSchedule http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	UpdateAlertSchedule ""
//gsoap ns1  service method-output-action:	UpdateAlertSchedule Response
int ns1__UpdateAlertSchedule(
    int                                 :_in0,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    SOAP_ENC__string                    :_in1,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    SOAP_ENC__string                    :_in2,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    SOAP_ENC__string                    :_in3,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    SOAP_ENC__string                    :_in4,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    SOAP_ENC__string                    :_in5,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    struct ns1__UpdateAlertScheduleResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__InsertAlertSchedule                                                 *
 *                                                                            *
\******************************************************************************/


/** Operation "ns1__InsertAlertSchedule" of service binding "AlertWebServiceSoapBinding".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://192.168.156.104:8180/AlertWebService/services/AlertWebService

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__InsertAlertSchedule(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    int                                 in0,
    SOAP_ENC__string                    in1,
    SOAP_ENC__string                    in2,
    SOAP_ENC__string                    in3,
    SOAP_ENC__string                    in4,
    SOAP_ENC__string                    in5,
    // output parameters:
    int                                &_InsertAlertScheduleReturn
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__InsertAlertSchedule(
    struct soap *soap,
    // input parameters:
    int                                 in0,
    SOAP_ENC__string                    in1,
    SOAP_ENC__string                    in2,
    SOAP_ENC__string                    in3,
    SOAP_ENC__string                    in4,
    SOAP_ENC__string                    in5,
    // output parameters:
    int                                &_InsertAlertScheduleReturn
  );
@endcode

C++ proxy class (defined in soapAlertWebServiceSoapBindingProxy.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAlertWebServiceSoapBindingService.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	InsertAlertSchedule SOAP
//gsoap ns1  service method-style:	InsertAlertSchedule rpc
//gsoap ns1  service method-encoding:	InsertAlertSchedule http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	InsertAlertSchedule ""
//gsoap ns1  service method-output-action:	InsertAlertSchedule Response
int ns1__InsertAlertSchedule(
    int                                 :_in0,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    SOAP_ENC__string                    :_in1,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    SOAP_ENC__string                    :_in2,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    SOAP_ENC__string                    :_in3,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    SOAP_ENC__string                    :_in4,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    SOAP_ENC__string                    :_in5,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    int                                &:_InsertAlertScheduleReturn	///< Output parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__UpdateAlertAction                                                   *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__UpdateAlertActionResponse" of operation "ns1__UpdateAlertAction".
struct ns1__UpdateAlertActionResponse
{
};

/** Operation "ns1__UpdateAlertAction" of service binding "AlertWebServiceSoapBinding".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://192.168.156.104:8180/AlertWebService/services/AlertWebService

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__UpdateAlertAction(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    int                                 in0,
    int                                 in1,
    // output parameters:
    struct ns1__UpdateAlertActionResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__UpdateAlertAction(
    struct soap *soap,
    // input parameters:
    int                                 in0,
    int                                 in1,
    // output parameters:
    struct ns1__UpdateAlertActionResponse&
  );
@endcode

C++ proxy class (defined in soapAlertWebServiceSoapBindingProxy.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAlertWebServiceSoapBindingService.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	UpdateAlertAction SOAP
//gsoap ns1  service method-style:	UpdateAlertAction rpc
//gsoap ns1  service method-encoding:	UpdateAlertAction http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	UpdateAlertAction ""
//gsoap ns1  service method-output-action:	UpdateAlertAction Response
int ns1__UpdateAlertAction(
    int                                 :_in0,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    int                                 :_in1,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    struct ns1__UpdateAlertActionResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__InsertAlertAction                                                   *
 *                                                                            *
\******************************************************************************/


/** Operation "ns1__InsertAlertAction" of service binding "AlertWebServiceSoapBinding".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://192.168.156.104:8180/AlertWebService/services/AlertWebService

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__InsertAlertAction(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    int                                 in0,
    int                                 in1,
    int                                 in2,
    // output parameters:
    int                                &_InsertAlertActionReturn
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__InsertAlertAction(
    struct soap *soap,
    // input parameters:
    int                                 in0,
    int                                 in1,
    int                                 in2,
    // output parameters:
    int                                &_InsertAlertActionReturn
  );
@endcode

C++ proxy class (defined in soapAlertWebServiceSoapBindingProxy.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAlertWebServiceSoapBindingService.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	InsertAlertAction SOAP
//gsoap ns1  service method-style:	InsertAlertAction rpc
//gsoap ns1  service method-encoding:	InsertAlertAction http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	InsertAlertAction ""
//gsoap ns1  service method-output-action:	InsertAlertAction Response
int ns1__InsertAlertAction(
    int                                 :_in0,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    int                                 :_in1,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    int                                 :_in2,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    int                                &:_InsertAlertActionReturn	///< Output parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__UpdatetAlertEvaluation                                              *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__UpdatetAlertEvaluationResponse" of operation "ns1__UpdatetAlertEvaluation".
struct ns1__UpdatetAlertEvaluationResponse
{
};

/** Operation "ns1__UpdatetAlertEvaluation" of service binding "AlertWebServiceSoapBinding".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://192.168.156.104:8180/AlertWebService/services/AlertWebService

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__UpdatetAlertEvaluation(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    int                                 in0,
    SOAP_ENC__string                    in1,
    // output parameters:
    struct ns1__UpdatetAlertEvaluationResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__UpdatetAlertEvaluation(
    struct soap *soap,
    // input parameters:
    int                                 in0,
    SOAP_ENC__string                    in1,
    // output parameters:
    struct ns1__UpdatetAlertEvaluationResponse&
  );
@endcode

C++ proxy class (defined in soapAlertWebServiceSoapBindingProxy.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAlertWebServiceSoapBindingService.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	UpdatetAlertEvaluation SOAP
//gsoap ns1  service method-style:	UpdatetAlertEvaluation rpc
//gsoap ns1  service method-encoding:	UpdatetAlertEvaluation http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	UpdatetAlertEvaluation ""
//gsoap ns1  service method-output-action:	UpdatetAlertEvaluation Response
int ns1__UpdatetAlertEvaluation(
    int                                 :_in0,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    SOAP_ENC__string                    :_in1,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    struct ns1__UpdatetAlertEvaluationResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__InsertAlertEvaluation                                               *
 *                                                                            *
\******************************************************************************/


/** Operation "ns1__InsertAlertEvaluation" of service binding "AlertWebServiceSoapBinding".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://192.168.156.104:8180/AlertWebService/services/AlertWebService

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__InsertAlertEvaluation(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    int                                 in0,
    SOAP_ENC__string                    in1,
    // output parameters:
    int                                &_InsertAlertEvaluationReturn
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__InsertAlertEvaluation(
    struct soap *soap,
    // input parameters:
    int                                 in0,
    SOAP_ENC__string                    in1,
    // output parameters:
    int                                &_InsertAlertEvaluationReturn
  );
@endcode

C++ proxy class (defined in soapAlertWebServiceSoapBindingProxy.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAlertWebServiceSoapBindingService.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	InsertAlertEvaluation SOAP
//gsoap ns1  service method-style:	InsertAlertEvaluation rpc
//gsoap ns1  service method-encoding:	InsertAlertEvaluation http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	InsertAlertEvaluation ""
//gsoap ns1  service method-output-action:	InsertAlertEvaluation Response
int ns1__InsertAlertEvaluation(
    int                                 :_in0,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    SOAP_ENC__string                    :_in1,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    int                                &:_InsertAlertEvaluationReturn	///< Output parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__UpdateAlert                                                         *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__UpdateAlertResponse" of operation "ns1__UpdateAlert".
struct ns1__UpdateAlertResponse
{
};

/** Operation "ns1__UpdateAlert" of service binding "AlertWebServiceSoapBinding".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://192.168.156.104:8180/AlertWebService/services/AlertWebService

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__UpdateAlert(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    int                                 in0,
    SOAP_ENC__string                    in1,
    SOAP_ENC__string                    in2,
    int                                 in3,
    int                                 in4,
    // output parameters:
    struct ns1__UpdateAlertResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__UpdateAlert(
    struct soap *soap,
    // input parameters:
    int                                 in0,
    SOAP_ENC__string                    in1,
    SOAP_ENC__string                    in2,
    int                                 in3,
    int                                 in4,
    // output parameters:
    struct ns1__UpdateAlertResponse&
  );
@endcode

C++ proxy class (defined in soapAlertWebServiceSoapBindingProxy.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAlertWebServiceSoapBindingService.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	UpdateAlert SOAP
//gsoap ns1  service method-style:	UpdateAlert rpc
//gsoap ns1  service method-encoding:	UpdateAlert http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	UpdateAlert ""
//gsoap ns1  service method-output-action:	UpdateAlert Response
int ns1__UpdateAlert(
    int                                 :_in0,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    SOAP_ENC__string                    :_in1,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    SOAP_ENC__string                    :_in2,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    int                                 :_in3,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    int                                 :_in4,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    struct ns1__UpdateAlertResponse    &	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__InsertAlert                                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "ns1__InsertAlert" of service binding "AlertWebServiceSoapBinding".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://192.168.156.104:8180/AlertWebService/services/AlertWebService

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__InsertAlert(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    int                                 in0,
    SOAP_ENC__string                    in1,
    SOAP_ENC__string                    in2,
    int                                 in3,
    SOAP_ENC__string                    in4,
    int                                 in5,
    // output parameters:
    int                                &_InsertAlertReturn
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__InsertAlert(
    struct soap *soap,
    // input parameters:
    int                                 in0,
    SOAP_ENC__string                    in1,
    SOAP_ENC__string                    in2,
    int                                 in3,
    SOAP_ENC__string                    in4,
    int                                 in5,
    // output parameters:
    int                                &_InsertAlertReturn
  );
@endcode

C++ proxy class (defined in soapAlertWebServiceSoapBindingProxy.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAlertWebServiceSoapBindingService.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	InsertAlert SOAP
//gsoap ns1  service method-style:	InsertAlert rpc
//gsoap ns1  service method-encoding:	InsertAlert http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	InsertAlert ""
//gsoap ns1  service method-output-action:	InsertAlert Response
int ns1__InsertAlert(
    int                                 :_in0,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    SOAP_ENC__string                    :_in1,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    SOAP_ENC__string                    :_in2,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    int                                 :_in3,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    SOAP_ENC__string                    :_in4,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    int                                 :_in5,	///< Input parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
    int                                &:_InsertAlertReturn	///< Output parameter, : unqualified name as per RPC encoding, _ wildcard name as per RPC parameterOrder
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__GetWebServiceName                                                   *
 *                                                                            *
\******************************************************************************/


/** Operation "ns1__GetWebServiceName" of service binding "AlertWebServiceSoapBinding".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://192.168.156.104:8180/AlertWebService/services/AlertWebService

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__GetWebServiceName(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    // output parameters:
    SOAP_ENC__string                   &GetWebServiceNameReturn
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__GetWebServiceName(
    struct soap *soap,
    // input parameters:
    // output parameters:
    SOAP_ENC__string                   &GetWebServiceNameReturn
  );
@endcode

C++ proxy class (defined in soapAlertWebServiceSoapBindingProxy.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAlertWebServiceSoapBindingService.h generated with soapcpp2):
@code
  class AlertWebServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetWebServiceName SOAP
//gsoap ns1  service method-style:	GetWebServiceName rpc
//gsoap ns1  service method-encoding:	GetWebServiceName http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	GetWebServiceName ""
//gsoap ns1  service method-output-action:	GetWebServiceName Response
int ns1__GetWebServiceName(
    SOAP_ENC__string                   &:GetWebServiceNameReturn	///< Output parameter, : unqualified name as per RPC encoding
);

/**

@page AlertWebServiceSoapBinding Binding "AlertWebServiceSoapBinding"

@section AlertWebServiceSoapBinding_policy_enablers Policy Enablers of Binding "AlertWebServiceSoapBinding"

None specified.

*/

/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

Data can be read and deserialized from:
  - an int file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = (int)...
  - a C++ stream (istream, stringstream), using soap->is = (istream*)...
  - a C string, using soap->is = (const char*)...
  - any input, using the soap->frecv() callback

Data can be serialized and written to:
  - an int file descriptor, using soap->sendfd = (int)...
  - a socket, using soap->socket = (int)...
  - a C++ stream (ostream, stringstream), using soap->os = (ostream*)...
  - a C string, using soap->os = (const char**)...
  - any output, using the soap->fsend() callback

The following options are available for (de)serialization control:
  - soap->encodingStyle = NULL; to remove SOAP 1.1/1.2 encodingStyle
  - soap_mode(soap, SOAP_XML_TREE); XML without id-ref (no cycles!)
  - soap_mode(soap, SOAP_XML_GRAPH); XML with id-ref (including cycles)
  - soap_set_namespaces(soap, struct Namespace *nsmap); to set xmlns bindings


@section ns1 Top-level root elements of schema "http://Alert.Concerto.com"

*/

/* End of AlertWebService.h */
