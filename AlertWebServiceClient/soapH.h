/* soapH.h
   Generated by gSOAP 2.8.71 for AlertWebService.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);
SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap*, const void*, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);
SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap *soap, struct soap_clist*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap*, int, int, void*, size_t, const void*, void**);

#ifndef SOAP_TYPE_byte_DEFINED
#define SOAP_TYPE_byte_DEFINED

inline void soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

inline int soap_write_byte(struct soap *soap, char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

inline int soap_read_byte(struct soap *soap, char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_byte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_byte(struct soap *soap, const char *URL, char *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_byte(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_byte(struct soap *soap, char *p)
{
	if (::soap_read_byte(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_int_DEFINED
#define SOAP_TYPE_int_DEFINED

inline void soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

inline int soap_write_int(struct soap *soap, int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

inline int soap_read_int(struct soap *soap, int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_int(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_int(struct soap *soap, const char *URL, int *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_int(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_int(struct soap *soap, int *p)
{
	if (::soap_read_int(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__DCenterCordInfo_DEFINED
#define SOAP_TYPE_ns1__DCenterCordInfo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DCenterCordInfo(struct soap*, const char*, int, const ns1__DCenterCordInfo *, const char*);
SOAP_FMAC3 ns1__DCenterCordInfo * SOAP_FMAC4 soap_in_ns1__DCenterCordInfo(struct soap*, const char*, ns1__DCenterCordInfo *, const char*);
SOAP_FMAC1 ns1__DCenterCordInfo * SOAP_FMAC2 soap_instantiate_ns1__DCenterCordInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns1__DCenterCordInfo * soap_new_ns1__DCenterCordInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__DCenterCordInfo(soap, n, NULL, NULL, NULL);
}

inline ns1__DCenterCordInfo * soap_new_req_ns1__DCenterCordInfo(
	struct soap *soap,
	int AODFeedPortNum,
	int AWDPortNum,
	int CSLPortNum,
	std::string *IPAddress,
	int clientPortNum,
	int extLoggerPortNum,
	int serverId,
	int siteId,
	int tenantId)
{
	ns1__DCenterCordInfo *_p = ::soap_new_ns1__DCenterCordInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DCenterCordInfo::AODFeedPortNum = AODFeedPortNum;
		_p->ns1__DCenterCordInfo::AWDPortNum = AWDPortNum;
		_p->ns1__DCenterCordInfo::CSLPortNum = CSLPortNum;
		_p->ns1__DCenterCordInfo::IPAddress = IPAddress;
		_p->ns1__DCenterCordInfo::clientPortNum = clientPortNum;
		_p->ns1__DCenterCordInfo::extLoggerPortNum = extLoggerPortNum;
		_p->ns1__DCenterCordInfo::serverId = serverId;
		_p->ns1__DCenterCordInfo::siteId = siteId;
		_p->ns1__DCenterCordInfo::tenantId = tenantId;
	}
	return _p;
}

inline ns1__DCenterCordInfo * soap_new_set_ns1__DCenterCordInfo(
	struct soap *soap,
	int AODFeedPortNum,
	int AWDPortNum,
	int CSLPortNum,
	std::string *IPAddress,
	int clientPortNum,
	int extLoggerPortNum,
	int serverId,
	int siteId,
	int tenantId)
{
	ns1__DCenterCordInfo *_p = ::soap_new_ns1__DCenterCordInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DCenterCordInfo::AODFeedPortNum = AODFeedPortNum;
		_p->ns1__DCenterCordInfo::AWDPortNum = AWDPortNum;
		_p->ns1__DCenterCordInfo::CSLPortNum = CSLPortNum;
		_p->ns1__DCenterCordInfo::IPAddress = IPAddress;
		_p->ns1__DCenterCordInfo::clientPortNum = clientPortNum;
		_p->ns1__DCenterCordInfo::extLoggerPortNum = extLoggerPortNum;
		_p->ns1__DCenterCordInfo::serverId = serverId;
		_p->ns1__DCenterCordInfo::siteId = siteId;
		_p->ns1__DCenterCordInfo::tenantId = tenantId;
	}
	return _p;
}

inline int soap_write_ns1__DCenterCordInfo(struct soap *soap, ns1__DCenterCordInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DCenterCordInfo", p->soap_type() == SOAP_TYPE_ns1__DCenterCordInfo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__DCenterCordInfo(struct soap *soap, const char *URL, ns1__DCenterCordInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DCenterCordInfo", p->soap_type() == SOAP_TYPE_ns1__DCenterCordInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__DCenterCordInfo(struct soap *soap, const char *URL, ns1__DCenterCordInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DCenterCordInfo", p->soap_type() == SOAP_TYPE_ns1__DCenterCordInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__DCenterCordInfo(struct soap *soap, const char *URL, ns1__DCenterCordInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DCenterCordInfo", p->soap_type() == SOAP_TYPE_ns1__DCenterCordInfo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__DCenterCordInfo * SOAP_FMAC4 soap_get_ns1__DCenterCordInfo(struct soap*, ns1__DCenterCordInfo *, const char*, const char*);

inline int soap_read_ns1__DCenterCordInfo(struct soap *soap, ns1__DCenterCordInfo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__DCenterCordInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__DCenterCordInfo(struct soap *soap, const char *URL, ns1__DCenterCordInfo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__DCenterCordInfo(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__DCenterCordInfo(struct soap *soap, ns1__DCenterCordInfo *p)
{
	if (::soap_read_ns1__DCenterCordInfo(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_SOAP_ENC__string_DEFINED
#define SOAP_TYPE_SOAP_ENC__string_DEFINED

inline void soap_default_SOAP_ENC__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENC__string(struct soap*, const std::string *);

#define soap_SOAP_ENC__string2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENC__string(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2SOAP_ENC__string(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_SOAP_ENC__string(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_SOAP_ENC__string soap_instantiate_std__string


#define soap_new_SOAP_ENC__string soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENC__string(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_SOAP_ENC__string(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_SOAP_ENC__string(soap, p, "SOAP-ENC:string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENC__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_SOAP_ENC__string(soap, p, "SOAP-ENC:string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENC__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_SOAP_ENC__string(soap, p, "SOAP-ENC:string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENC__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_SOAP_ENC__string(soap, p, "SOAP-ENC:string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_SOAP_ENC__string(struct soap*, std::string *, const char*, const char*);

inline int soap_read_SOAP_ENC__string(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_SOAP_ENC__string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENC__string(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENC__string(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENC__string(struct soap *soap, std::string *p)
{
	if (::soap_read_SOAP_ENC__string(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_std__string_DEFINED
#define SOAP_TYPE_std__string_DEFINED

inline void soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);

#define soap_std__string2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2std__string(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);
SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__string(soap, n, NULL, NULL, NULL);
}

inline std::string * soap_new_req_std__string(
	struct soap *soap)
{
	std::string *_p = ::soap_new_std__string(soap);
	if (_p)
	{	::soap_default_std__string(soap, _p);
	}
	return _p;
}

inline std::string * soap_new_set_std__string(
	struct soap *soap)
{
	std::string *_p = ::soap_new_std__string(soap);
	if (_p)
	{	::soap_default_std__string(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_std__string(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

inline int soap_read_std__string(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_std__string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_std__string(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_std__string(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_std__string(struct soap *soap, std::string *p)
{
	if (::soap_read_std__string(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault_DEFINED
#define SOAP_TYPE_SOAP_ENV__Fault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(
	struct soap *soap)
{
	struct SOAP_ENV__Fault *_p = ::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Fault(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(
	struct soap *soap,
	char *faultcode,
	char *faultstring,
	char *faultactor,
	struct SOAP_ENV__Detail *detail,
	struct SOAP_ENV__Code *SOAP_ENV__Code,
	struct SOAP_ENV__Reason *SOAP_ENV__Reason,
	char *SOAP_ENV__Node,
	char *SOAP_ENV__Role,
	struct SOAP_ENV__Detail *SOAP_ENV__Detail)
{
	struct SOAP_ENV__Fault *_p = ::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Fault(soap, _p);
		_p->faultcode = faultcode;
		_p->faultstring = faultstring;
		_p->faultactor = faultactor;
		_p->detail = detail;
		_p->SOAP_ENV__Code = SOAP_ENV__Code;
		_p->SOAP_ENV__Reason = SOAP_ENV__Reason;
		_p->SOAP_ENV__Node = SOAP_ENV__Node;
		_p->SOAP_ENV__Role = SOAP_ENV__Role;
		_p->SOAP_ENV__Detail = SOAP_ENV__Detail;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_write_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_read_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Fault(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Fault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Fault(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (::soap_read_SOAP_ENV__Fault(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_SOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(
	struct soap *soap)
{
	struct SOAP_ENV__Reason *_p = ::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Reason(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(
	struct soap *soap,
	char *SOAP_ENV__Text)
{
	struct SOAP_ENV__Reason *_p = ::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Reason(soap, _p);
		_p->SOAP_ENV__Text = SOAP_ENV__Text;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_write_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_read_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Reason(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Reason(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Reason(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (::soap_read_SOAP_ENV__Reason(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_SOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(
	struct soap *soap,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = ::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(
	struct soap *soap,
	char *__any,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = ::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__any = __any;
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_write_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_read_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Detail(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Detail(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Detail(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (::soap_read_SOAP_ENV__Detail(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code_DEFINED
#define SOAP_TYPE_SOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(
	struct soap *soap)
{
	struct SOAP_ENV__Code *_p = ::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Code(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(
	struct soap *soap,
	char *SOAP_ENV__Value,
	struct SOAP_ENV__Code *SOAP_ENV__Subcode)
{
	struct SOAP_ENV__Code *_p = ::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Code(soap, _p);
		_p->SOAP_ENV__Value = SOAP_ENV__Value;
		_p->SOAP_ENV__Subcode = SOAP_ENV__Subcode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_write_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_read_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Code(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Code(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (::soap_read_SOAP_ENV__Code(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header_DEFINED
#define SOAP_TYPE_SOAP_ENV__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = ::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = ::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_write_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_read_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Header(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Header(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Header(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (::soap_read_SOAP_ENV__Header(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

#ifndef SOAP_TYPE_ns1__GetWebServiceName_DEFINED
#define SOAP_TYPE_ns1__GetWebServiceName_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__GetWebServiceName(struct soap*, struct ns1__GetWebServiceName *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__GetWebServiceName(struct soap*, const struct ns1__GetWebServiceName *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetWebServiceName(struct soap*, const char*, int, const struct ns1__GetWebServiceName *, const char*);
SOAP_FMAC3 struct ns1__GetWebServiceName * SOAP_FMAC4 soap_in_ns1__GetWebServiceName(struct soap*, const char*, struct ns1__GetWebServiceName *, const char*);
SOAP_FMAC1 struct ns1__GetWebServiceName * SOAP_FMAC2 soap_instantiate_ns1__GetWebServiceName(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__GetWebServiceName * soap_new_ns1__GetWebServiceName(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetWebServiceName(soap, n, NULL, NULL, NULL);
}

inline struct ns1__GetWebServiceName * soap_new_req_ns1__GetWebServiceName(
	struct soap *soap)
{
	struct ns1__GetWebServiceName *_p = ::soap_new_ns1__GetWebServiceName(soap);
	if (_p)
	{	::soap_default_ns1__GetWebServiceName(soap, _p);
	}
	return _p;
}

inline struct ns1__GetWebServiceName * soap_new_set_ns1__GetWebServiceName(
	struct soap *soap)
{
	struct ns1__GetWebServiceName *_p = ::soap_new_ns1__GetWebServiceName(soap);
	if (_p)
	{	::soap_default_ns1__GetWebServiceName(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__GetWebServiceName(struct soap*, const struct ns1__GetWebServiceName *, const char*, const char*);

inline int soap_write_ns1__GetWebServiceName(struct soap *soap, struct ns1__GetWebServiceName const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__GetWebServiceName(soap, p), 0) || ::soap_put_ns1__GetWebServiceName(soap, p, "ns1:GetWebServiceName", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetWebServiceName(struct soap *soap, const char *URL, struct ns1__GetWebServiceName const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetWebServiceName(soap, p), 0) || ::soap_put_ns1__GetWebServiceName(soap, p, "ns1:GetWebServiceName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__GetWebServiceName(struct soap *soap, const char *URL, struct ns1__GetWebServiceName const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetWebServiceName(soap, p), 0) || ::soap_put_ns1__GetWebServiceName(soap, p, "ns1:GetWebServiceName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetWebServiceName(struct soap *soap, const char *URL, struct ns1__GetWebServiceName const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetWebServiceName(soap, p), 0) || ::soap_put_ns1__GetWebServiceName(soap, p, "ns1:GetWebServiceName", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__GetWebServiceName * SOAP_FMAC4 soap_get_ns1__GetWebServiceName(struct soap*, struct ns1__GetWebServiceName *, const char*, const char*);

inline int soap_read_ns1__GetWebServiceName(struct soap *soap, struct ns1__GetWebServiceName *p)
{
	if (p)
	{	::soap_default_ns1__GetWebServiceName(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__GetWebServiceName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetWebServiceName(struct soap *soap, const char *URL, struct ns1__GetWebServiceName *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__GetWebServiceName(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GetWebServiceName(struct soap *soap, struct ns1__GetWebServiceName *p)
{
	if (::soap_read_ns1__GetWebServiceName(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GetWebServiceNameResponse_DEFINED
#define SOAP_TYPE_ns1__GetWebServiceNameResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__GetWebServiceNameResponse(struct soap*, struct ns1__GetWebServiceNameResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__GetWebServiceNameResponse(struct soap*, const struct ns1__GetWebServiceNameResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetWebServiceNameResponse(struct soap*, const char*, int, const struct ns1__GetWebServiceNameResponse *, const char*);
SOAP_FMAC3 struct ns1__GetWebServiceNameResponse * SOAP_FMAC4 soap_in_ns1__GetWebServiceNameResponse(struct soap*, const char*, struct ns1__GetWebServiceNameResponse *, const char*);
SOAP_FMAC1 struct ns1__GetWebServiceNameResponse * SOAP_FMAC2 soap_instantiate_ns1__GetWebServiceNameResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__GetWebServiceNameResponse * soap_new_ns1__GetWebServiceNameResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetWebServiceNameResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__GetWebServiceNameResponse * soap_new_req_ns1__GetWebServiceNameResponse(
	struct soap *soap,
	const std::string& GetWebServiceNameReturn)
{
	struct ns1__GetWebServiceNameResponse *_p = ::soap_new_ns1__GetWebServiceNameResponse(soap);
	if (_p)
	{	::soap_default_ns1__GetWebServiceNameResponse(soap, _p);
		_p->GetWebServiceNameReturn = GetWebServiceNameReturn;
	}
	return _p;
}

inline struct ns1__GetWebServiceNameResponse * soap_new_set_ns1__GetWebServiceNameResponse(
	struct soap *soap,
	const std::string& GetWebServiceNameReturn)
{
	struct ns1__GetWebServiceNameResponse *_p = ::soap_new_ns1__GetWebServiceNameResponse(soap);
	if (_p)
	{	::soap_default_ns1__GetWebServiceNameResponse(soap, _p);
		_p->GetWebServiceNameReturn = GetWebServiceNameReturn;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__GetWebServiceNameResponse(struct soap*, const struct ns1__GetWebServiceNameResponse *, const char*, const char*);

inline int soap_write_ns1__GetWebServiceNameResponse(struct soap *soap, struct ns1__GetWebServiceNameResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__GetWebServiceNameResponse(soap, p), 0) || ::soap_put_ns1__GetWebServiceNameResponse(soap, p, "ns1:GetWebServiceNameResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetWebServiceNameResponse(struct soap *soap, const char *URL, struct ns1__GetWebServiceNameResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetWebServiceNameResponse(soap, p), 0) || ::soap_put_ns1__GetWebServiceNameResponse(soap, p, "ns1:GetWebServiceNameResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__GetWebServiceNameResponse(struct soap *soap, const char *URL, struct ns1__GetWebServiceNameResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetWebServiceNameResponse(soap, p), 0) || ::soap_put_ns1__GetWebServiceNameResponse(soap, p, "ns1:GetWebServiceNameResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetWebServiceNameResponse(struct soap *soap, const char *URL, struct ns1__GetWebServiceNameResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetWebServiceNameResponse(soap, p), 0) || ::soap_put_ns1__GetWebServiceNameResponse(soap, p, "ns1:GetWebServiceNameResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__GetWebServiceNameResponse * SOAP_FMAC4 soap_get_ns1__GetWebServiceNameResponse(struct soap*, struct ns1__GetWebServiceNameResponse *, const char*, const char*);

inline int soap_read_ns1__GetWebServiceNameResponse(struct soap *soap, struct ns1__GetWebServiceNameResponse *p)
{
	if (p)
	{	::soap_default_ns1__GetWebServiceNameResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__GetWebServiceNameResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetWebServiceNameResponse(struct soap *soap, const char *URL, struct ns1__GetWebServiceNameResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__GetWebServiceNameResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GetWebServiceNameResponse(struct soap *soap, struct ns1__GetWebServiceNameResponse *p)
{
	if (::soap_read_ns1__GetWebServiceNameResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__InsertAlert_DEFINED
#define SOAP_TYPE_ns1__InsertAlert_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__InsertAlert(struct soap*, struct ns1__InsertAlert *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__InsertAlert(struct soap*, const struct ns1__InsertAlert *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__InsertAlert(struct soap*, const char*, int, const struct ns1__InsertAlert *, const char*);
SOAP_FMAC3 struct ns1__InsertAlert * SOAP_FMAC4 soap_in_ns1__InsertAlert(struct soap*, const char*, struct ns1__InsertAlert *, const char*);
SOAP_FMAC1 struct ns1__InsertAlert * SOAP_FMAC2 soap_instantiate_ns1__InsertAlert(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__InsertAlert * soap_new_ns1__InsertAlert(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__InsertAlert(soap, n, NULL, NULL, NULL);
}

inline struct ns1__InsertAlert * soap_new_req_ns1__InsertAlert(
	struct soap *soap,
	int _in0,
	const std::string& _in1,
	const std::string& _in2,
	int _in3,
	const std::string& _in4,
	int _in5)
{
	struct ns1__InsertAlert *_p = ::soap_new_ns1__InsertAlert(soap);
	if (_p)
	{	::soap_default_ns1__InsertAlert(soap, _p);
		_p->_in0 = _in0;
		_p->_in1 = _in1;
		_p->_in2 = _in2;
		_p->_in3 = _in3;
		_p->_in4 = _in4;
		_p->_in5 = _in5;
	}
	return _p;
}

inline struct ns1__InsertAlert * soap_new_set_ns1__InsertAlert(
	struct soap *soap,
	int _in0,
	const std::string& _in1,
	const std::string& _in2,
	int _in3,
	const std::string& _in4,
	int _in5)
{
	struct ns1__InsertAlert *_p = ::soap_new_ns1__InsertAlert(soap);
	if (_p)
	{	::soap_default_ns1__InsertAlert(soap, _p);
		_p->_in0 = _in0;
		_p->_in1 = _in1;
		_p->_in2 = _in2;
		_p->_in3 = _in3;
		_p->_in4 = _in4;
		_p->_in5 = _in5;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__InsertAlert(struct soap*, const struct ns1__InsertAlert *, const char*, const char*);

inline int soap_write_ns1__InsertAlert(struct soap *soap, struct ns1__InsertAlert const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__InsertAlert(soap, p), 0) || ::soap_put_ns1__InsertAlert(soap, p, "ns1:InsertAlert", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__InsertAlert(struct soap *soap, const char *URL, struct ns1__InsertAlert const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__InsertAlert(soap, p), 0) || ::soap_put_ns1__InsertAlert(soap, p, "ns1:InsertAlert", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__InsertAlert(struct soap *soap, const char *URL, struct ns1__InsertAlert const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__InsertAlert(soap, p), 0) || ::soap_put_ns1__InsertAlert(soap, p, "ns1:InsertAlert", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__InsertAlert(struct soap *soap, const char *URL, struct ns1__InsertAlert const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__InsertAlert(soap, p), 0) || ::soap_put_ns1__InsertAlert(soap, p, "ns1:InsertAlert", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__InsertAlert * SOAP_FMAC4 soap_get_ns1__InsertAlert(struct soap*, struct ns1__InsertAlert *, const char*, const char*);

inline int soap_read_ns1__InsertAlert(struct soap *soap, struct ns1__InsertAlert *p)
{
	if (p)
	{	::soap_default_ns1__InsertAlert(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__InsertAlert(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__InsertAlert(struct soap *soap, const char *URL, struct ns1__InsertAlert *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__InsertAlert(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__InsertAlert(struct soap *soap, struct ns1__InsertAlert *p)
{
	if (::soap_read_ns1__InsertAlert(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__InsertAlertResponse_DEFINED
#define SOAP_TYPE_ns1__InsertAlertResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__InsertAlertResponse(struct soap*, struct ns1__InsertAlertResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__InsertAlertResponse(struct soap*, const struct ns1__InsertAlertResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__InsertAlertResponse(struct soap*, const char*, int, const struct ns1__InsertAlertResponse *, const char*);
SOAP_FMAC3 struct ns1__InsertAlertResponse * SOAP_FMAC4 soap_in_ns1__InsertAlertResponse(struct soap*, const char*, struct ns1__InsertAlertResponse *, const char*);
SOAP_FMAC1 struct ns1__InsertAlertResponse * SOAP_FMAC2 soap_instantiate_ns1__InsertAlertResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__InsertAlertResponse * soap_new_ns1__InsertAlertResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__InsertAlertResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__InsertAlertResponse * soap_new_req_ns1__InsertAlertResponse(
	struct soap *soap,
	int _InsertAlertReturn)
{
	struct ns1__InsertAlertResponse *_p = ::soap_new_ns1__InsertAlertResponse(soap);
	if (_p)
	{	::soap_default_ns1__InsertAlertResponse(soap, _p);
		_p->_InsertAlertReturn = _InsertAlertReturn;
	}
	return _p;
}

inline struct ns1__InsertAlertResponse * soap_new_set_ns1__InsertAlertResponse(
	struct soap *soap,
	int _InsertAlertReturn)
{
	struct ns1__InsertAlertResponse *_p = ::soap_new_ns1__InsertAlertResponse(soap);
	if (_p)
	{	::soap_default_ns1__InsertAlertResponse(soap, _p);
		_p->_InsertAlertReturn = _InsertAlertReturn;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__InsertAlertResponse(struct soap*, const struct ns1__InsertAlertResponse *, const char*, const char*);

inline int soap_write_ns1__InsertAlertResponse(struct soap *soap, struct ns1__InsertAlertResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__InsertAlertResponse(soap, p), 0) || ::soap_put_ns1__InsertAlertResponse(soap, p, "ns1:InsertAlertResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__InsertAlertResponse(struct soap *soap, const char *URL, struct ns1__InsertAlertResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__InsertAlertResponse(soap, p), 0) || ::soap_put_ns1__InsertAlertResponse(soap, p, "ns1:InsertAlertResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__InsertAlertResponse(struct soap *soap, const char *URL, struct ns1__InsertAlertResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__InsertAlertResponse(soap, p), 0) || ::soap_put_ns1__InsertAlertResponse(soap, p, "ns1:InsertAlertResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__InsertAlertResponse(struct soap *soap, const char *URL, struct ns1__InsertAlertResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__InsertAlertResponse(soap, p), 0) || ::soap_put_ns1__InsertAlertResponse(soap, p, "ns1:InsertAlertResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__InsertAlertResponse * SOAP_FMAC4 soap_get_ns1__InsertAlertResponse(struct soap*, struct ns1__InsertAlertResponse *, const char*, const char*);

inline int soap_read_ns1__InsertAlertResponse(struct soap *soap, struct ns1__InsertAlertResponse *p)
{
	if (p)
	{	::soap_default_ns1__InsertAlertResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__InsertAlertResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__InsertAlertResponse(struct soap *soap, const char *URL, struct ns1__InsertAlertResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__InsertAlertResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__InsertAlertResponse(struct soap *soap, struct ns1__InsertAlertResponse *p)
{
	if (::soap_read_ns1__InsertAlertResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__UpdateAlert_DEFINED
#define SOAP_TYPE_ns1__UpdateAlert_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__UpdateAlert(struct soap*, struct ns1__UpdateAlert *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__UpdateAlert(struct soap*, const struct ns1__UpdateAlert *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__UpdateAlert(struct soap*, const char*, int, const struct ns1__UpdateAlert *, const char*);
SOAP_FMAC3 struct ns1__UpdateAlert * SOAP_FMAC4 soap_in_ns1__UpdateAlert(struct soap*, const char*, struct ns1__UpdateAlert *, const char*);
SOAP_FMAC1 struct ns1__UpdateAlert * SOAP_FMAC2 soap_instantiate_ns1__UpdateAlert(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__UpdateAlert * soap_new_ns1__UpdateAlert(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__UpdateAlert(soap, n, NULL, NULL, NULL);
}

inline struct ns1__UpdateAlert * soap_new_req_ns1__UpdateAlert(
	struct soap *soap,
	int _in0,
	const std::string& _in1,
	const std::string& _in2,
	int _in3,
	int _in4)
{
	struct ns1__UpdateAlert *_p = ::soap_new_ns1__UpdateAlert(soap);
	if (_p)
	{	::soap_default_ns1__UpdateAlert(soap, _p);
		_p->_in0 = _in0;
		_p->_in1 = _in1;
		_p->_in2 = _in2;
		_p->_in3 = _in3;
		_p->_in4 = _in4;
	}
	return _p;
}

inline struct ns1__UpdateAlert * soap_new_set_ns1__UpdateAlert(
	struct soap *soap,
	int _in0,
	const std::string& _in1,
	const std::string& _in2,
	int _in3,
	int _in4)
{
	struct ns1__UpdateAlert *_p = ::soap_new_ns1__UpdateAlert(soap);
	if (_p)
	{	::soap_default_ns1__UpdateAlert(soap, _p);
		_p->_in0 = _in0;
		_p->_in1 = _in1;
		_p->_in2 = _in2;
		_p->_in3 = _in3;
		_p->_in4 = _in4;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__UpdateAlert(struct soap*, const struct ns1__UpdateAlert *, const char*, const char*);

inline int soap_write_ns1__UpdateAlert(struct soap *soap, struct ns1__UpdateAlert const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__UpdateAlert(soap, p), 0) || ::soap_put_ns1__UpdateAlert(soap, p, "ns1:UpdateAlert", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__UpdateAlert(struct soap *soap, const char *URL, struct ns1__UpdateAlert const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__UpdateAlert(soap, p), 0) || ::soap_put_ns1__UpdateAlert(soap, p, "ns1:UpdateAlert", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__UpdateAlert(struct soap *soap, const char *URL, struct ns1__UpdateAlert const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__UpdateAlert(soap, p), 0) || ::soap_put_ns1__UpdateAlert(soap, p, "ns1:UpdateAlert", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__UpdateAlert(struct soap *soap, const char *URL, struct ns1__UpdateAlert const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__UpdateAlert(soap, p), 0) || ::soap_put_ns1__UpdateAlert(soap, p, "ns1:UpdateAlert", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__UpdateAlert * SOAP_FMAC4 soap_get_ns1__UpdateAlert(struct soap*, struct ns1__UpdateAlert *, const char*, const char*);

inline int soap_read_ns1__UpdateAlert(struct soap *soap, struct ns1__UpdateAlert *p)
{
	if (p)
	{	::soap_default_ns1__UpdateAlert(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__UpdateAlert(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__UpdateAlert(struct soap *soap, const char *URL, struct ns1__UpdateAlert *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__UpdateAlert(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__UpdateAlert(struct soap *soap, struct ns1__UpdateAlert *p)
{
	if (::soap_read_ns1__UpdateAlert(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__UpdateAlertResponse_DEFINED
#define SOAP_TYPE_ns1__UpdateAlertResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__UpdateAlertResponse(struct soap*, struct ns1__UpdateAlertResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__UpdateAlertResponse(struct soap*, const struct ns1__UpdateAlertResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__UpdateAlertResponse(struct soap*, const char*, int, const struct ns1__UpdateAlertResponse *, const char*);
SOAP_FMAC3 struct ns1__UpdateAlertResponse * SOAP_FMAC4 soap_in_ns1__UpdateAlertResponse(struct soap*, const char*, struct ns1__UpdateAlertResponse *, const char*);
SOAP_FMAC1 struct ns1__UpdateAlertResponse * SOAP_FMAC2 soap_instantiate_ns1__UpdateAlertResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__UpdateAlertResponse * soap_new_ns1__UpdateAlertResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__UpdateAlertResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__UpdateAlertResponse * soap_new_req_ns1__UpdateAlertResponse(
	struct soap *soap)
{
	struct ns1__UpdateAlertResponse *_p = ::soap_new_ns1__UpdateAlertResponse(soap);
	if (_p)
	{	::soap_default_ns1__UpdateAlertResponse(soap, _p);
	}
	return _p;
}

inline struct ns1__UpdateAlertResponse * soap_new_set_ns1__UpdateAlertResponse(
	struct soap *soap)
{
	struct ns1__UpdateAlertResponse *_p = ::soap_new_ns1__UpdateAlertResponse(soap);
	if (_p)
	{	::soap_default_ns1__UpdateAlertResponse(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__UpdateAlertResponse(struct soap*, const struct ns1__UpdateAlertResponse *, const char*, const char*);

inline int soap_write_ns1__UpdateAlertResponse(struct soap *soap, struct ns1__UpdateAlertResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__UpdateAlertResponse(soap, p), 0) || ::soap_put_ns1__UpdateAlertResponse(soap, p, "ns1:UpdateAlertResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__UpdateAlertResponse(struct soap *soap, const char *URL, struct ns1__UpdateAlertResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__UpdateAlertResponse(soap, p), 0) || ::soap_put_ns1__UpdateAlertResponse(soap, p, "ns1:UpdateAlertResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__UpdateAlertResponse(struct soap *soap, const char *URL, struct ns1__UpdateAlertResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__UpdateAlertResponse(soap, p), 0) || ::soap_put_ns1__UpdateAlertResponse(soap, p, "ns1:UpdateAlertResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__UpdateAlertResponse(struct soap *soap, const char *URL, struct ns1__UpdateAlertResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__UpdateAlertResponse(soap, p), 0) || ::soap_put_ns1__UpdateAlertResponse(soap, p, "ns1:UpdateAlertResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__UpdateAlertResponse * SOAP_FMAC4 soap_get_ns1__UpdateAlertResponse(struct soap*, struct ns1__UpdateAlertResponse *, const char*, const char*);

inline int soap_read_ns1__UpdateAlertResponse(struct soap *soap, struct ns1__UpdateAlertResponse *p)
{
	if (p)
	{	::soap_default_ns1__UpdateAlertResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__UpdateAlertResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__UpdateAlertResponse(struct soap *soap, const char *URL, struct ns1__UpdateAlertResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__UpdateAlertResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__UpdateAlertResponse(struct soap *soap, struct ns1__UpdateAlertResponse *p)
{
	if (::soap_read_ns1__UpdateAlertResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__InsertAlertEvaluation_DEFINED
#define SOAP_TYPE_ns1__InsertAlertEvaluation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__InsertAlertEvaluation(struct soap*, struct ns1__InsertAlertEvaluation *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__InsertAlertEvaluation(struct soap*, const struct ns1__InsertAlertEvaluation *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__InsertAlertEvaluation(struct soap*, const char*, int, const struct ns1__InsertAlertEvaluation *, const char*);
SOAP_FMAC3 struct ns1__InsertAlertEvaluation * SOAP_FMAC4 soap_in_ns1__InsertAlertEvaluation(struct soap*, const char*, struct ns1__InsertAlertEvaluation *, const char*);
SOAP_FMAC1 struct ns1__InsertAlertEvaluation * SOAP_FMAC2 soap_instantiate_ns1__InsertAlertEvaluation(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__InsertAlertEvaluation * soap_new_ns1__InsertAlertEvaluation(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__InsertAlertEvaluation(soap, n, NULL, NULL, NULL);
}

inline struct ns1__InsertAlertEvaluation * soap_new_req_ns1__InsertAlertEvaluation(
	struct soap *soap,
	int _in0,
	const std::string& _in1)
{
	struct ns1__InsertAlertEvaluation *_p = ::soap_new_ns1__InsertAlertEvaluation(soap);
	if (_p)
	{	::soap_default_ns1__InsertAlertEvaluation(soap, _p);
		_p->_in0 = _in0;
		_p->_in1 = _in1;
	}
	return _p;
}

inline struct ns1__InsertAlertEvaluation * soap_new_set_ns1__InsertAlertEvaluation(
	struct soap *soap,
	int _in0,
	const std::string& _in1)
{
	struct ns1__InsertAlertEvaluation *_p = ::soap_new_ns1__InsertAlertEvaluation(soap);
	if (_p)
	{	::soap_default_ns1__InsertAlertEvaluation(soap, _p);
		_p->_in0 = _in0;
		_p->_in1 = _in1;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__InsertAlertEvaluation(struct soap*, const struct ns1__InsertAlertEvaluation *, const char*, const char*);

inline int soap_write_ns1__InsertAlertEvaluation(struct soap *soap, struct ns1__InsertAlertEvaluation const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__InsertAlertEvaluation(soap, p), 0) || ::soap_put_ns1__InsertAlertEvaluation(soap, p, "ns1:InsertAlertEvaluation", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__InsertAlertEvaluation(struct soap *soap, const char *URL, struct ns1__InsertAlertEvaluation const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__InsertAlertEvaluation(soap, p), 0) || ::soap_put_ns1__InsertAlertEvaluation(soap, p, "ns1:InsertAlertEvaluation", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__InsertAlertEvaluation(struct soap *soap, const char *URL, struct ns1__InsertAlertEvaluation const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__InsertAlertEvaluation(soap, p), 0) || ::soap_put_ns1__InsertAlertEvaluation(soap, p, "ns1:InsertAlertEvaluation", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__InsertAlertEvaluation(struct soap *soap, const char *URL, struct ns1__InsertAlertEvaluation const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__InsertAlertEvaluation(soap, p), 0) || ::soap_put_ns1__InsertAlertEvaluation(soap, p, "ns1:InsertAlertEvaluation", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__InsertAlertEvaluation * SOAP_FMAC4 soap_get_ns1__InsertAlertEvaluation(struct soap*, struct ns1__InsertAlertEvaluation *, const char*, const char*);

inline int soap_read_ns1__InsertAlertEvaluation(struct soap *soap, struct ns1__InsertAlertEvaluation *p)
{
	if (p)
	{	::soap_default_ns1__InsertAlertEvaluation(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__InsertAlertEvaluation(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__InsertAlertEvaluation(struct soap *soap, const char *URL, struct ns1__InsertAlertEvaluation *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__InsertAlertEvaluation(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__InsertAlertEvaluation(struct soap *soap, struct ns1__InsertAlertEvaluation *p)
{
	if (::soap_read_ns1__InsertAlertEvaluation(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__InsertAlertEvaluationResponse_DEFINED
#define SOAP_TYPE_ns1__InsertAlertEvaluationResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__InsertAlertEvaluationResponse(struct soap*, struct ns1__InsertAlertEvaluationResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__InsertAlertEvaluationResponse(struct soap*, const struct ns1__InsertAlertEvaluationResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__InsertAlertEvaluationResponse(struct soap*, const char*, int, const struct ns1__InsertAlertEvaluationResponse *, const char*);
SOAP_FMAC3 struct ns1__InsertAlertEvaluationResponse * SOAP_FMAC4 soap_in_ns1__InsertAlertEvaluationResponse(struct soap*, const char*, struct ns1__InsertAlertEvaluationResponse *, const char*);
SOAP_FMAC1 struct ns1__InsertAlertEvaluationResponse * SOAP_FMAC2 soap_instantiate_ns1__InsertAlertEvaluationResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__InsertAlertEvaluationResponse * soap_new_ns1__InsertAlertEvaluationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__InsertAlertEvaluationResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__InsertAlertEvaluationResponse * soap_new_req_ns1__InsertAlertEvaluationResponse(
	struct soap *soap,
	int _InsertAlertEvaluationReturn)
{
	struct ns1__InsertAlertEvaluationResponse *_p = ::soap_new_ns1__InsertAlertEvaluationResponse(soap);
	if (_p)
	{	::soap_default_ns1__InsertAlertEvaluationResponse(soap, _p);
		_p->_InsertAlertEvaluationReturn = _InsertAlertEvaluationReturn;
	}
	return _p;
}

inline struct ns1__InsertAlertEvaluationResponse * soap_new_set_ns1__InsertAlertEvaluationResponse(
	struct soap *soap,
	int _InsertAlertEvaluationReturn)
{
	struct ns1__InsertAlertEvaluationResponse *_p = ::soap_new_ns1__InsertAlertEvaluationResponse(soap);
	if (_p)
	{	::soap_default_ns1__InsertAlertEvaluationResponse(soap, _p);
		_p->_InsertAlertEvaluationReturn = _InsertAlertEvaluationReturn;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__InsertAlertEvaluationResponse(struct soap*, const struct ns1__InsertAlertEvaluationResponse *, const char*, const char*);

inline int soap_write_ns1__InsertAlertEvaluationResponse(struct soap *soap, struct ns1__InsertAlertEvaluationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__InsertAlertEvaluationResponse(soap, p), 0) || ::soap_put_ns1__InsertAlertEvaluationResponse(soap, p, "ns1:InsertAlertEvaluationResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__InsertAlertEvaluationResponse(struct soap *soap, const char *URL, struct ns1__InsertAlertEvaluationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__InsertAlertEvaluationResponse(soap, p), 0) || ::soap_put_ns1__InsertAlertEvaluationResponse(soap, p, "ns1:InsertAlertEvaluationResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__InsertAlertEvaluationResponse(struct soap *soap, const char *URL, struct ns1__InsertAlertEvaluationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__InsertAlertEvaluationResponse(soap, p), 0) || ::soap_put_ns1__InsertAlertEvaluationResponse(soap, p, "ns1:InsertAlertEvaluationResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__InsertAlertEvaluationResponse(struct soap *soap, const char *URL, struct ns1__InsertAlertEvaluationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__InsertAlertEvaluationResponse(soap, p), 0) || ::soap_put_ns1__InsertAlertEvaluationResponse(soap, p, "ns1:InsertAlertEvaluationResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__InsertAlertEvaluationResponse * SOAP_FMAC4 soap_get_ns1__InsertAlertEvaluationResponse(struct soap*, struct ns1__InsertAlertEvaluationResponse *, const char*, const char*);

inline int soap_read_ns1__InsertAlertEvaluationResponse(struct soap *soap, struct ns1__InsertAlertEvaluationResponse *p)
{
	if (p)
	{	::soap_default_ns1__InsertAlertEvaluationResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__InsertAlertEvaluationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__InsertAlertEvaluationResponse(struct soap *soap, const char *URL, struct ns1__InsertAlertEvaluationResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__InsertAlertEvaluationResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__InsertAlertEvaluationResponse(struct soap *soap, struct ns1__InsertAlertEvaluationResponse *p)
{
	if (::soap_read_ns1__InsertAlertEvaluationResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__UpdatetAlertEvaluation_DEFINED
#define SOAP_TYPE_ns1__UpdatetAlertEvaluation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__UpdatetAlertEvaluation(struct soap*, struct ns1__UpdatetAlertEvaluation *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__UpdatetAlertEvaluation(struct soap*, const struct ns1__UpdatetAlertEvaluation *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__UpdatetAlertEvaluation(struct soap*, const char*, int, const struct ns1__UpdatetAlertEvaluation *, const char*);
SOAP_FMAC3 struct ns1__UpdatetAlertEvaluation * SOAP_FMAC4 soap_in_ns1__UpdatetAlertEvaluation(struct soap*, const char*, struct ns1__UpdatetAlertEvaluation *, const char*);
SOAP_FMAC1 struct ns1__UpdatetAlertEvaluation * SOAP_FMAC2 soap_instantiate_ns1__UpdatetAlertEvaluation(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__UpdatetAlertEvaluation * soap_new_ns1__UpdatetAlertEvaluation(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__UpdatetAlertEvaluation(soap, n, NULL, NULL, NULL);
}

inline struct ns1__UpdatetAlertEvaluation * soap_new_req_ns1__UpdatetAlertEvaluation(
	struct soap *soap,
	int _in0,
	const std::string& _in1)
{
	struct ns1__UpdatetAlertEvaluation *_p = ::soap_new_ns1__UpdatetAlertEvaluation(soap);
	if (_p)
	{	::soap_default_ns1__UpdatetAlertEvaluation(soap, _p);
		_p->_in0 = _in0;
		_p->_in1 = _in1;
	}
	return _p;
}

inline struct ns1__UpdatetAlertEvaluation * soap_new_set_ns1__UpdatetAlertEvaluation(
	struct soap *soap,
	int _in0,
	const std::string& _in1)
{
	struct ns1__UpdatetAlertEvaluation *_p = ::soap_new_ns1__UpdatetAlertEvaluation(soap);
	if (_p)
	{	::soap_default_ns1__UpdatetAlertEvaluation(soap, _p);
		_p->_in0 = _in0;
		_p->_in1 = _in1;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__UpdatetAlertEvaluation(struct soap*, const struct ns1__UpdatetAlertEvaluation *, const char*, const char*);

inline int soap_write_ns1__UpdatetAlertEvaluation(struct soap *soap, struct ns1__UpdatetAlertEvaluation const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__UpdatetAlertEvaluation(soap, p), 0) || ::soap_put_ns1__UpdatetAlertEvaluation(soap, p, "ns1:UpdatetAlertEvaluation", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__UpdatetAlertEvaluation(struct soap *soap, const char *URL, struct ns1__UpdatetAlertEvaluation const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__UpdatetAlertEvaluation(soap, p), 0) || ::soap_put_ns1__UpdatetAlertEvaluation(soap, p, "ns1:UpdatetAlertEvaluation", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__UpdatetAlertEvaluation(struct soap *soap, const char *URL, struct ns1__UpdatetAlertEvaluation const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__UpdatetAlertEvaluation(soap, p), 0) || ::soap_put_ns1__UpdatetAlertEvaluation(soap, p, "ns1:UpdatetAlertEvaluation", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__UpdatetAlertEvaluation(struct soap *soap, const char *URL, struct ns1__UpdatetAlertEvaluation const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__UpdatetAlertEvaluation(soap, p), 0) || ::soap_put_ns1__UpdatetAlertEvaluation(soap, p, "ns1:UpdatetAlertEvaluation", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__UpdatetAlertEvaluation * SOAP_FMAC4 soap_get_ns1__UpdatetAlertEvaluation(struct soap*, struct ns1__UpdatetAlertEvaluation *, const char*, const char*);

inline int soap_read_ns1__UpdatetAlertEvaluation(struct soap *soap, struct ns1__UpdatetAlertEvaluation *p)
{
	if (p)
	{	::soap_default_ns1__UpdatetAlertEvaluation(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__UpdatetAlertEvaluation(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__UpdatetAlertEvaluation(struct soap *soap, const char *URL, struct ns1__UpdatetAlertEvaluation *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__UpdatetAlertEvaluation(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__UpdatetAlertEvaluation(struct soap *soap, struct ns1__UpdatetAlertEvaluation *p)
{
	if (::soap_read_ns1__UpdatetAlertEvaluation(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__UpdatetAlertEvaluationResponse_DEFINED
#define SOAP_TYPE_ns1__UpdatetAlertEvaluationResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__UpdatetAlertEvaluationResponse(struct soap*, struct ns1__UpdatetAlertEvaluationResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__UpdatetAlertEvaluationResponse(struct soap*, const struct ns1__UpdatetAlertEvaluationResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__UpdatetAlertEvaluationResponse(struct soap*, const char*, int, const struct ns1__UpdatetAlertEvaluationResponse *, const char*);
SOAP_FMAC3 struct ns1__UpdatetAlertEvaluationResponse * SOAP_FMAC4 soap_in_ns1__UpdatetAlertEvaluationResponse(struct soap*, const char*, struct ns1__UpdatetAlertEvaluationResponse *, const char*);
SOAP_FMAC1 struct ns1__UpdatetAlertEvaluationResponse * SOAP_FMAC2 soap_instantiate_ns1__UpdatetAlertEvaluationResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__UpdatetAlertEvaluationResponse * soap_new_ns1__UpdatetAlertEvaluationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__UpdatetAlertEvaluationResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__UpdatetAlertEvaluationResponse * soap_new_req_ns1__UpdatetAlertEvaluationResponse(
	struct soap *soap)
{
	struct ns1__UpdatetAlertEvaluationResponse *_p = ::soap_new_ns1__UpdatetAlertEvaluationResponse(soap);
	if (_p)
	{	::soap_default_ns1__UpdatetAlertEvaluationResponse(soap, _p);
	}
	return _p;
}

inline struct ns1__UpdatetAlertEvaluationResponse * soap_new_set_ns1__UpdatetAlertEvaluationResponse(
	struct soap *soap)
{
	struct ns1__UpdatetAlertEvaluationResponse *_p = ::soap_new_ns1__UpdatetAlertEvaluationResponse(soap);
	if (_p)
	{	::soap_default_ns1__UpdatetAlertEvaluationResponse(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__UpdatetAlertEvaluationResponse(struct soap*, const struct ns1__UpdatetAlertEvaluationResponse *, const char*, const char*);

inline int soap_write_ns1__UpdatetAlertEvaluationResponse(struct soap *soap, struct ns1__UpdatetAlertEvaluationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__UpdatetAlertEvaluationResponse(soap, p), 0) || ::soap_put_ns1__UpdatetAlertEvaluationResponse(soap, p, "ns1:UpdatetAlertEvaluationResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__UpdatetAlertEvaluationResponse(struct soap *soap, const char *URL, struct ns1__UpdatetAlertEvaluationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__UpdatetAlertEvaluationResponse(soap, p), 0) || ::soap_put_ns1__UpdatetAlertEvaluationResponse(soap, p, "ns1:UpdatetAlertEvaluationResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__UpdatetAlertEvaluationResponse(struct soap *soap, const char *URL, struct ns1__UpdatetAlertEvaluationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__UpdatetAlertEvaluationResponse(soap, p), 0) || ::soap_put_ns1__UpdatetAlertEvaluationResponse(soap, p, "ns1:UpdatetAlertEvaluationResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__UpdatetAlertEvaluationResponse(struct soap *soap, const char *URL, struct ns1__UpdatetAlertEvaluationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__UpdatetAlertEvaluationResponse(soap, p), 0) || ::soap_put_ns1__UpdatetAlertEvaluationResponse(soap, p, "ns1:UpdatetAlertEvaluationResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__UpdatetAlertEvaluationResponse * SOAP_FMAC4 soap_get_ns1__UpdatetAlertEvaluationResponse(struct soap*, struct ns1__UpdatetAlertEvaluationResponse *, const char*, const char*);

inline int soap_read_ns1__UpdatetAlertEvaluationResponse(struct soap *soap, struct ns1__UpdatetAlertEvaluationResponse *p)
{
	if (p)
	{	::soap_default_ns1__UpdatetAlertEvaluationResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__UpdatetAlertEvaluationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__UpdatetAlertEvaluationResponse(struct soap *soap, const char *URL, struct ns1__UpdatetAlertEvaluationResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__UpdatetAlertEvaluationResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__UpdatetAlertEvaluationResponse(struct soap *soap, struct ns1__UpdatetAlertEvaluationResponse *p)
{
	if (::soap_read_ns1__UpdatetAlertEvaluationResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__InsertAlertAction_DEFINED
#define SOAP_TYPE_ns1__InsertAlertAction_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__InsertAlertAction(struct soap*, struct ns1__InsertAlertAction *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__InsertAlertAction(struct soap*, const struct ns1__InsertAlertAction *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__InsertAlertAction(struct soap*, const char*, int, const struct ns1__InsertAlertAction *, const char*);
SOAP_FMAC3 struct ns1__InsertAlertAction * SOAP_FMAC4 soap_in_ns1__InsertAlertAction(struct soap*, const char*, struct ns1__InsertAlertAction *, const char*);
SOAP_FMAC1 struct ns1__InsertAlertAction * SOAP_FMAC2 soap_instantiate_ns1__InsertAlertAction(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__InsertAlertAction * soap_new_ns1__InsertAlertAction(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__InsertAlertAction(soap, n, NULL, NULL, NULL);
}

inline struct ns1__InsertAlertAction * soap_new_req_ns1__InsertAlertAction(
	struct soap *soap,
	int _in0,
	int _in1,
	int _in2)
{
	struct ns1__InsertAlertAction *_p = ::soap_new_ns1__InsertAlertAction(soap);
	if (_p)
	{	::soap_default_ns1__InsertAlertAction(soap, _p);
		_p->_in0 = _in0;
		_p->_in1 = _in1;
		_p->_in2 = _in2;
	}
	return _p;
}

inline struct ns1__InsertAlertAction * soap_new_set_ns1__InsertAlertAction(
	struct soap *soap,
	int _in0,
	int _in1,
	int _in2)
{
	struct ns1__InsertAlertAction *_p = ::soap_new_ns1__InsertAlertAction(soap);
	if (_p)
	{	::soap_default_ns1__InsertAlertAction(soap, _p);
		_p->_in0 = _in0;
		_p->_in1 = _in1;
		_p->_in2 = _in2;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__InsertAlertAction(struct soap*, const struct ns1__InsertAlertAction *, const char*, const char*);

inline int soap_write_ns1__InsertAlertAction(struct soap *soap, struct ns1__InsertAlertAction const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__InsertAlertAction(soap, p), 0) || ::soap_put_ns1__InsertAlertAction(soap, p, "ns1:InsertAlertAction", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__InsertAlertAction(struct soap *soap, const char *URL, struct ns1__InsertAlertAction const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__InsertAlertAction(soap, p), 0) || ::soap_put_ns1__InsertAlertAction(soap, p, "ns1:InsertAlertAction", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__InsertAlertAction(struct soap *soap, const char *URL, struct ns1__InsertAlertAction const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__InsertAlertAction(soap, p), 0) || ::soap_put_ns1__InsertAlertAction(soap, p, "ns1:InsertAlertAction", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__InsertAlertAction(struct soap *soap, const char *URL, struct ns1__InsertAlertAction const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__InsertAlertAction(soap, p), 0) || ::soap_put_ns1__InsertAlertAction(soap, p, "ns1:InsertAlertAction", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__InsertAlertAction * SOAP_FMAC4 soap_get_ns1__InsertAlertAction(struct soap*, struct ns1__InsertAlertAction *, const char*, const char*);

inline int soap_read_ns1__InsertAlertAction(struct soap *soap, struct ns1__InsertAlertAction *p)
{
	if (p)
	{	::soap_default_ns1__InsertAlertAction(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__InsertAlertAction(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__InsertAlertAction(struct soap *soap, const char *URL, struct ns1__InsertAlertAction *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__InsertAlertAction(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__InsertAlertAction(struct soap *soap, struct ns1__InsertAlertAction *p)
{
	if (::soap_read_ns1__InsertAlertAction(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__InsertAlertActionResponse_DEFINED
#define SOAP_TYPE_ns1__InsertAlertActionResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__InsertAlertActionResponse(struct soap*, struct ns1__InsertAlertActionResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__InsertAlertActionResponse(struct soap*, const struct ns1__InsertAlertActionResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__InsertAlertActionResponse(struct soap*, const char*, int, const struct ns1__InsertAlertActionResponse *, const char*);
SOAP_FMAC3 struct ns1__InsertAlertActionResponse * SOAP_FMAC4 soap_in_ns1__InsertAlertActionResponse(struct soap*, const char*, struct ns1__InsertAlertActionResponse *, const char*);
SOAP_FMAC1 struct ns1__InsertAlertActionResponse * SOAP_FMAC2 soap_instantiate_ns1__InsertAlertActionResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__InsertAlertActionResponse * soap_new_ns1__InsertAlertActionResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__InsertAlertActionResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__InsertAlertActionResponse * soap_new_req_ns1__InsertAlertActionResponse(
	struct soap *soap,
	int _InsertAlertActionReturn)
{
	struct ns1__InsertAlertActionResponse *_p = ::soap_new_ns1__InsertAlertActionResponse(soap);
	if (_p)
	{	::soap_default_ns1__InsertAlertActionResponse(soap, _p);
		_p->_InsertAlertActionReturn = _InsertAlertActionReturn;
	}
	return _p;
}

inline struct ns1__InsertAlertActionResponse * soap_new_set_ns1__InsertAlertActionResponse(
	struct soap *soap,
	int _InsertAlertActionReturn)
{
	struct ns1__InsertAlertActionResponse *_p = ::soap_new_ns1__InsertAlertActionResponse(soap);
	if (_p)
	{	::soap_default_ns1__InsertAlertActionResponse(soap, _p);
		_p->_InsertAlertActionReturn = _InsertAlertActionReturn;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__InsertAlertActionResponse(struct soap*, const struct ns1__InsertAlertActionResponse *, const char*, const char*);

inline int soap_write_ns1__InsertAlertActionResponse(struct soap *soap, struct ns1__InsertAlertActionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__InsertAlertActionResponse(soap, p), 0) || ::soap_put_ns1__InsertAlertActionResponse(soap, p, "ns1:InsertAlertActionResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__InsertAlertActionResponse(struct soap *soap, const char *URL, struct ns1__InsertAlertActionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__InsertAlertActionResponse(soap, p), 0) || ::soap_put_ns1__InsertAlertActionResponse(soap, p, "ns1:InsertAlertActionResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__InsertAlertActionResponse(struct soap *soap, const char *URL, struct ns1__InsertAlertActionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__InsertAlertActionResponse(soap, p), 0) || ::soap_put_ns1__InsertAlertActionResponse(soap, p, "ns1:InsertAlertActionResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__InsertAlertActionResponse(struct soap *soap, const char *URL, struct ns1__InsertAlertActionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__InsertAlertActionResponse(soap, p), 0) || ::soap_put_ns1__InsertAlertActionResponse(soap, p, "ns1:InsertAlertActionResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__InsertAlertActionResponse * SOAP_FMAC4 soap_get_ns1__InsertAlertActionResponse(struct soap*, struct ns1__InsertAlertActionResponse *, const char*, const char*);

inline int soap_read_ns1__InsertAlertActionResponse(struct soap *soap, struct ns1__InsertAlertActionResponse *p)
{
	if (p)
	{	::soap_default_ns1__InsertAlertActionResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__InsertAlertActionResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__InsertAlertActionResponse(struct soap *soap, const char *URL, struct ns1__InsertAlertActionResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__InsertAlertActionResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__InsertAlertActionResponse(struct soap *soap, struct ns1__InsertAlertActionResponse *p)
{
	if (::soap_read_ns1__InsertAlertActionResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__UpdateAlertAction_DEFINED
#define SOAP_TYPE_ns1__UpdateAlertAction_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__UpdateAlertAction(struct soap*, struct ns1__UpdateAlertAction *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__UpdateAlertAction(struct soap*, const struct ns1__UpdateAlertAction *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__UpdateAlertAction(struct soap*, const char*, int, const struct ns1__UpdateAlertAction *, const char*);
SOAP_FMAC3 struct ns1__UpdateAlertAction * SOAP_FMAC4 soap_in_ns1__UpdateAlertAction(struct soap*, const char*, struct ns1__UpdateAlertAction *, const char*);
SOAP_FMAC1 struct ns1__UpdateAlertAction * SOAP_FMAC2 soap_instantiate_ns1__UpdateAlertAction(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__UpdateAlertAction * soap_new_ns1__UpdateAlertAction(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__UpdateAlertAction(soap, n, NULL, NULL, NULL);
}

inline struct ns1__UpdateAlertAction * soap_new_req_ns1__UpdateAlertAction(
	struct soap *soap,
	int _in0,
	int _in1)
{
	struct ns1__UpdateAlertAction *_p = ::soap_new_ns1__UpdateAlertAction(soap);
	if (_p)
	{	::soap_default_ns1__UpdateAlertAction(soap, _p);
		_p->_in0 = _in0;
		_p->_in1 = _in1;
	}
	return _p;
}

inline struct ns1__UpdateAlertAction * soap_new_set_ns1__UpdateAlertAction(
	struct soap *soap,
	int _in0,
	int _in1)
{
	struct ns1__UpdateAlertAction *_p = ::soap_new_ns1__UpdateAlertAction(soap);
	if (_p)
	{	::soap_default_ns1__UpdateAlertAction(soap, _p);
		_p->_in0 = _in0;
		_p->_in1 = _in1;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__UpdateAlertAction(struct soap*, const struct ns1__UpdateAlertAction *, const char*, const char*);

inline int soap_write_ns1__UpdateAlertAction(struct soap *soap, struct ns1__UpdateAlertAction const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__UpdateAlertAction(soap, p), 0) || ::soap_put_ns1__UpdateAlertAction(soap, p, "ns1:UpdateAlertAction", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__UpdateAlertAction(struct soap *soap, const char *URL, struct ns1__UpdateAlertAction const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__UpdateAlertAction(soap, p), 0) || ::soap_put_ns1__UpdateAlertAction(soap, p, "ns1:UpdateAlertAction", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__UpdateAlertAction(struct soap *soap, const char *URL, struct ns1__UpdateAlertAction const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__UpdateAlertAction(soap, p), 0) || ::soap_put_ns1__UpdateAlertAction(soap, p, "ns1:UpdateAlertAction", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__UpdateAlertAction(struct soap *soap, const char *URL, struct ns1__UpdateAlertAction const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__UpdateAlertAction(soap, p), 0) || ::soap_put_ns1__UpdateAlertAction(soap, p, "ns1:UpdateAlertAction", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__UpdateAlertAction * SOAP_FMAC4 soap_get_ns1__UpdateAlertAction(struct soap*, struct ns1__UpdateAlertAction *, const char*, const char*);

inline int soap_read_ns1__UpdateAlertAction(struct soap *soap, struct ns1__UpdateAlertAction *p)
{
	if (p)
	{	::soap_default_ns1__UpdateAlertAction(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__UpdateAlertAction(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__UpdateAlertAction(struct soap *soap, const char *URL, struct ns1__UpdateAlertAction *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__UpdateAlertAction(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__UpdateAlertAction(struct soap *soap, struct ns1__UpdateAlertAction *p)
{
	if (::soap_read_ns1__UpdateAlertAction(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__UpdateAlertActionResponse_DEFINED
#define SOAP_TYPE_ns1__UpdateAlertActionResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__UpdateAlertActionResponse(struct soap*, struct ns1__UpdateAlertActionResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__UpdateAlertActionResponse(struct soap*, const struct ns1__UpdateAlertActionResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__UpdateAlertActionResponse(struct soap*, const char*, int, const struct ns1__UpdateAlertActionResponse *, const char*);
SOAP_FMAC3 struct ns1__UpdateAlertActionResponse * SOAP_FMAC4 soap_in_ns1__UpdateAlertActionResponse(struct soap*, const char*, struct ns1__UpdateAlertActionResponse *, const char*);
SOAP_FMAC1 struct ns1__UpdateAlertActionResponse * SOAP_FMAC2 soap_instantiate_ns1__UpdateAlertActionResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__UpdateAlertActionResponse * soap_new_ns1__UpdateAlertActionResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__UpdateAlertActionResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__UpdateAlertActionResponse * soap_new_req_ns1__UpdateAlertActionResponse(
	struct soap *soap)
{
	struct ns1__UpdateAlertActionResponse *_p = ::soap_new_ns1__UpdateAlertActionResponse(soap);
	if (_p)
	{	::soap_default_ns1__UpdateAlertActionResponse(soap, _p);
	}
	return _p;
}

inline struct ns1__UpdateAlertActionResponse * soap_new_set_ns1__UpdateAlertActionResponse(
	struct soap *soap)
{
	struct ns1__UpdateAlertActionResponse *_p = ::soap_new_ns1__UpdateAlertActionResponse(soap);
	if (_p)
	{	::soap_default_ns1__UpdateAlertActionResponse(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__UpdateAlertActionResponse(struct soap*, const struct ns1__UpdateAlertActionResponse *, const char*, const char*);

inline int soap_write_ns1__UpdateAlertActionResponse(struct soap *soap, struct ns1__UpdateAlertActionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__UpdateAlertActionResponse(soap, p), 0) || ::soap_put_ns1__UpdateAlertActionResponse(soap, p, "ns1:UpdateAlertActionResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__UpdateAlertActionResponse(struct soap *soap, const char *URL, struct ns1__UpdateAlertActionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__UpdateAlertActionResponse(soap, p), 0) || ::soap_put_ns1__UpdateAlertActionResponse(soap, p, "ns1:UpdateAlertActionResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__UpdateAlertActionResponse(struct soap *soap, const char *URL, struct ns1__UpdateAlertActionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__UpdateAlertActionResponse(soap, p), 0) || ::soap_put_ns1__UpdateAlertActionResponse(soap, p, "ns1:UpdateAlertActionResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__UpdateAlertActionResponse(struct soap *soap, const char *URL, struct ns1__UpdateAlertActionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__UpdateAlertActionResponse(soap, p), 0) || ::soap_put_ns1__UpdateAlertActionResponse(soap, p, "ns1:UpdateAlertActionResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__UpdateAlertActionResponse * SOAP_FMAC4 soap_get_ns1__UpdateAlertActionResponse(struct soap*, struct ns1__UpdateAlertActionResponse *, const char*, const char*);

inline int soap_read_ns1__UpdateAlertActionResponse(struct soap *soap, struct ns1__UpdateAlertActionResponse *p)
{
	if (p)
	{	::soap_default_ns1__UpdateAlertActionResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__UpdateAlertActionResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__UpdateAlertActionResponse(struct soap *soap, const char *URL, struct ns1__UpdateAlertActionResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__UpdateAlertActionResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__UpdateAlertActionResponse(struct soap *soap, struct ns1__UpdateAlertActionResponse *p)
{
	if (::soap_read_ns1__UpdateAlertActionResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__InsertAlertSchedule_DEFINED
#define SOAP_TYPE_ns1__InsertAlertSchedule_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__InsertAlertSchedule(struct soap*, struct ns1__InsertAlertSchedule *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__InsertAlertSchedule(struct soap*, const struct ns1__InsertAlertSchedule *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__InsertAlertSchedule(struct soap*, const char*, int, const struct ns1__InsertAlertSchedule *, const char*);
SOAP_FMAC3 struct ns1__InsertAlertSchedule * SOAP_FMAC4 soap_in_ns1__InsertAlertSchedule(struct soap*, const char*, struct ns1__InsertAlertSchedule *, const char*);
SOAP_FMAC1 struct ns1__InsertAlertSchedule * SOAP_FMAC2 soap_instantiate_ns1__InsertAlertSchedule(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__InsertAlertSchedule * soap_new_ns1__InsertAlertSchedule(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__InsertAlertSchedule(soap, n, NULL, NULL, NULL);
}

inline struct ns1__InsertAlertSchedule * soap_new_req_ns1__InsertAlertSchedule(
	struct soap *soap,
	int _in0,
	const std::string& _in1,
	const std::string& _in2,
	const std::string& _in3,
	const std::string& _in4,
	const std::string& _in5)
{
	struct ns1__InsertAlertSchedule *_p = ::soap_new_ns1__InsertAlertSchedule(soap);
	if (_p)
	{	::soap_default_ns1__InsertAlertSchedule(soap, _p);
		_p->_in0 = _in0;
		_p->_in1 = _in1;
		_p->_in2 = _in2;
		_p->_in3 = _in3;
		_p->_in4 = _in4;
		_p->_in5 = _in5;
	}
	return _p;
}

inline struct ns1__InsertAlertSchedule * soap_new_set_ns1__InsertAlertSchedule(
	struct soap *soap,
	int _in0,
	const std::string& _in1,
	const std::string& _in2,
	const std::string& _in3,
	const std::string& _in4,
	const std::string& _in5)
{
	struct ns1__InsertAlertSchedule *_p = ::soap_new_ns1__InsertAlertSchedule(soap);
	if (_p)
	{	::soap_default_ns1__InsertAlertSchedule(soap, _p);
		_p->_in0 = _in0;
		_p->_in1 = _in1;
		_p->_in2 = _in2;
		_p->_in3 = _in3;
		_p->_in4 = _in4;
		_p->_in5 = _in5;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__InsertAlertSchedule(struct soap*, const struct ns1__InsertAlertSchedule *, const char*, const char*);

inline int soap_write_ns1__InsertAlertSchedule(struct soap *soap, struct ns1__InsertAlertSchedule const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__InsertAlertSchedule(soap, p), 0) || ::soap_put_ns1__InsertAlertSchedule(soap, p, "ns1:InsertAlertSchedule", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__InsertAlertSchedule(struct soap *soap, const char *URL, struct ns1__InsertAlertSchedule const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__InsertAlertSchedule(soap, p), 0) || ::soap_put_ns1__InsertAlertSchedule(soap, p, "ns1:InsertAlertSchedule", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__InsertAlertSchedule(struct soap *soap, const char *URL, struct ns1__InsertAlertSchedule const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__InsertAlertSchedule(soap, p), 0) || ::soap_put_ns1__InsertAlertSchedule(soap, p, "ns1:InsertAlertSchedule", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__InsertAlertSchedule(struct soap *soap, const char *URL, struct ns1__InsertAlertSchedule const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__InsertAlertSchedule(soap, p), 0) || ::soap_put_ns1__InsertAlertSchedule(soap, p, "ns1:InsertAlertSchedule", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__InsertAlertSchedule * SOAP_FMAC4 soap_get_ns1__InsertAlertSchedule(struct soap*, struct ns1__InsertAlertSchedule *, const char*, const char*);

inline int soap_read_ns1__InsertAlertSchedule(struct soap *soap, struct ns1__InsertAlertSchedule *p)
{
	if (p)
	{	::soap_default_ns1__InsertAlertSchedule(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__InsertAlertSchedule(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__InsertAlertSchedule(struct soap *soap, const char *URL, struct ns1__InsertAlertSchedule *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__InsertAlertSchedule(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__InsertAlertSchedule(struct soap *soap, struct ns1__InsertAlertSchedule *p)
{
	if (::soap_read_ns1__InsertAlertSchedule(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__InsertAlertScheduleResponse_DEFINED
#define SOAP_TYPE_ns1__InsertAlertScheduleResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__InsertAlertScheduleResponse(struct soap*, struct ns1__InsertAlertScheduleResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__InsertAlertScheduleResponse(struct soap*, const struct ns1__InsertAlertScheduleResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__InsertAlertScheduleResponse(struct soap*, const char*, int, const struct ns1__InsertAlertScheduleResponse *, const char*);
SOAP_FMAC3 struct ns1__InsertAlertScheduleResponse * SOAP_FMAC4 soap_in_ns1__InsertAlertScheduleResponse(struct soap*, const char*, struct ns1__InsertAlertScheduleResponse *, const char*);
SOAP_FMAC1 struct ns1__InsertAlertScheduleResponse * SOAP_FMAC2 soap_instantiate_ns1__InsertAlertScheduleResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__InsertAlertScheduleResponse * soap_new_ns1__InsertAlertScheduleResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__InsertAlertScheduleResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__InsertAlertScheduleResponse * soap_new_req_ns1__InsertAlertScheduleResponse(
	struct soap *soap,
	int _InsertAlertScheduleReturn)
{
	struct ns1__InsertAlertScheduleResponse *_p = ::soap_new_ns1__InsertAlertScheduleResponse(soap);
	if (_p)
	{	::soap_default_ns1__InsertAlertScheduleResponse(soap, _p);
		_p->_InsertAlertScheduleReturn = _InsertAlertScheduleReturn;
	}
	return _p;
}

inline struct ns1__InsertAlertScheduleResponse * soap_new_set_ns1__InsertAlertScheduleResponse(
	struct soap *soap,
	int _InsertAlertScheduleReturn)
{
	struct ns1__InsertAlertScheduleResponse *_p = ::soap_new_ns1__InsertAlertScheduleResponse(soap);
	if (_p)
	{	::soap_default_ns1__InsertAlertScheduleResponse(soap, _p);
		_p->_InsertAlertScheduleReturn = _InsertAlertScheduleReturn;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__InsertAlertScheduleResponse(struct soap*, const struct ns1__InsertAlertScheduleResponse *, const char*, const char*);

inline int soap_write_ns1__InsertAlertScheduleResponse(struct soap *soap, struct ns1__InsertAlertScheduleResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__InsertAlertScheduleResponse(soap, p), 0) || ::soap_put_ns1__InsertAlertScheduleResponse(soap, p, "ns1:InsertAlertScheduleResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__InsertAlertScheduleResponse(struct soap *soap, const char *URL, struct ns1__InsertAlertScheduleResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__InsertAlertScheduleResponse(soap, p), 0) || ::soap_put_ns1__InsertAlertScheduleResponse(soap, p, "ns1:InsertAlertScheduleResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__InsertAlertScheduleResponse(struct soap *soap, const char *URL, struct ns1__InsertAlertScheduleResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__InsertAlertScheduleResponse(soap, p), 0) || ::soap_put_ns1__InsertAlertScheduleResponse(soap, p, "ns1:InsertAlertScheduleResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__InsertAlertScheduleResponse(struct soap *soap, const char *URL, struct ns1__InsertAlertScheduleResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__InsertAlertScheduleResponse(soap, p), 0) || ::soap_put_ns1__InsertAlertScheduleResponse(soap, p, "ns1:InsertAlertScheduleResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__InsertAlertScheduleResponse * SOAP_FMAC4 soap_get_ns1__InsertAlertScheduleResponse(struct soap*, struct ns1__InsertAlertScheduleResponse *, const char*, const char*);

inline int soap_read_ns1__InsertAlertScheduleResponse(struct soap *soap, struct ns1__InsertAlertScheduleResponse *p)
{
	if (p)
	{	::soap_default_ns1__InsertAlertScheduleResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__InsertAlertScheduleResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__InsertAlertScheduleResponse(struct soap *soap, const char *URL, struct ns1__InsertAlertScheduleResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__InsertAlertScheduleResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__InsertAlertScheduleResponse(struct soap *soap, struct ns1__InsertAlertScheduleResponse *p)
{
	if (::soap_read_ns1__InsertAlertScheduleResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__UpdateAlertSchedule_DEFINED
#define SOAP_TYPE_ns1__UpdateAlertSchedule_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__UpdateAlertSchedule(struct soap*, struct ns1__UpdateAlertSchedule *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__UpdateAlertSchedule(struct soap*, const struct ns1__UpdateAlertSchedule *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__UpdateAlertSchedule(struct soap*, const char*, int, const struct ns1__UpdateAlertSchedule *, const char*);
SOAP_FMAC3 struct ns1__UpdateAlertSchedule * SOAP_FMAC4 soap_in_ns1__UpdateAlertSchedule(struct soap*, const char*, struct ns1__UpdateAlertSchedule *, const char*);
SOAP_FMAC1 struct ns1__UpdateAlertSchedule * SOAP_FMAC2 soap_instantiate_ns1__UpdateAlertSchedule(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__UpdateAlertSchedule * soap_new_ns1__UpdateAlertSchedule(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__UpdateAlertSchedule(soap, n, NULL, NULL, NULL);
}

inline struct ns1__UpdateAlertSchedule * soap_new_req_ns1__UpdateAlertSchedule(
	struct soap *soap,
	int _in0,
	const std::string& _in1,
	const std::string& _in2,
	const std::string& _in3,
	const std::string& _in4,
	const std::string& _in5)
{
	struct ns1__UpdateAlertSchedule *_p = ::soap_new_ns1__UpdateAlertSchedule(soap);
	if (_p)
	{	::soap_default_ns1__UpdateAlertSchedule(soap, _p);
		_p->_in0 = _in0;
		_p->_in1 = _in1;
		_p->_in2 = _in2;
		_p->_in3 = _in3;
		_p->_in4 = _in4;
		_p->_in5 = _in5;
	}
	return _p;
}

inline struct ns1__UpdateAlertSchedule * soap_new_set_ns1__UpdateAlertSchedule(
	struct soap *soap,
	int _in0,
	const std::string& _in1,
	const std::string& _in2,
	const std::string& _in3,
	const std::string& _in4,
	const std::string& _in5)
{
	struct ns1__UpdateAlertSchedule *_p = ::soap_new_ns1__UpdateAlertSchedule(soap);
	if (_p)
	{	::soap_default_ns1__UpdateAlertSchedule(soap, _p);
		_p->_in0 = _in0;
		_p->_in1 = _in1;
		_p->_in2 = _in2;
		_p->_in3 = _in3;
		_p->_in4 = _in4;
		_p->_in5 = _in5;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__UpdateAlertSchedule(struct soap*, const struct ns1__UpdateAlertSchedule *, const char*, const char*);

inline int soap_write_ns1__UpdateAlertSchedule(struct soap *soap, struct ns1__UpdateAlertSchedule const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__UpdateAlertSchedule(soap, p), 0) || ::soap_put_ns1__UpdateAlertSchedule(soap, p, "ns1:UpdateAlertSchedule", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__UpdateAlertSchedule(struct soap *soap, const char *URL, struct ns1__UpdateAlertSchedule const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__UpdateAlertSchedule(soap, p), 0) || ::soap_put_ns1__UpdateAlertSchedule(soap, p, "ns1:UpdateAlertSchedule", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__UpdateAlertSchedule(struct soap *soap, const char *URL, struct ns1__UpdateAlertSchedule const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__UpdateAlertSchedule(soap, p), 0) || ::soap_put_ns1__UpdateAlertSchedule(soap, p, "ns1:UpdateAlertSchedule", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__UpdateAlertSchedule(struct soap *soap, const char *URL, struct ns1__UpdateAlertSchedule const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__UpdateAlertSchedule(soap, p), 0) || ::soap_put_ns1__UpdateAlertSchedule(soap, p, "ns1:UpdateAlertSchedule", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__UpdateAlertSchedule * SOAP_FMAC4 soap_get_ns1__UpdateAlertSchedule(struct soap*, struct ns1__UpdateAlertSchedule *, const char*, const char*);

inline int soap_read_ns1__UpdateAlertSchedule(struct soap *soap, struct ns1__UpdateAlertSchedule *p)
{
	if (p)
	{	::soap_default_ns1__UpdateAlertSchedule(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__UpdateAlertSchedule(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__UpdateAlertSchedule(struct soap *soap, const char *URL, struct ns1__UpdateAlertSchedule *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__UpdateAlertSchedule(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__UpdateAlertSchedule(struct soap *soap, struct ns1__UpdateAlertSchedule *p)
{
	if (::soap_read_ns1__UpdateAlertSchedule(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__UpdateAlertScheduleResponse_DEFINED
#define SOAP_TYPE_ns1__UpdateAlertScheduleResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__UpdateAlertScheduleResponse(struct soap*, struct ns1__UpdateAlertScheduleResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__UpdateAlertScheduleResponse(struct soap*, const struct ns1__UpdateAlertScheduleResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__UpdateAlertScheduleResponse(struct soap*, const char*, int, const struct ns1__UpdateAlertScheduleResponse *, const char*);
SOAP_FMAC3 struct ns1__UpdateAlertScheduleResponse * SOAP_FMAC4 soap_in_ns1__UpdateAlertScheduleResponse(struct soap*, const char*, struct ns1__UpdateAlertScheduleResponse *, const char*);
SOAP_FMAC1 struct ns1__UpdateAlertScheduleResponse * SOAP_FMAC2 soap_instantiate_ns1__UpdateAlertScheduleResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__UpdateAlertScheduleResponse * soap_new_ns1__UpdateAlertScheduleResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__UpdateAlertScheduleResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__UpdateAlertScheduleResponse * soap_new_req_ns1__UpdateAlertScheduleResponse(
	struct soap *soap)
{
	struct ns1__UpdateAlertScheduleResponse *_p = ::soap_new_ns1__UpdateAlertScheduleResponse(soap);
	if (_p)
	{	::soap_default_ns1__UpdateAlertScheduleResponse(soap, _p);
	}
	return _p;
}

inline struct ns1__UpdateAlertScheduleResponse * soap_new_set_ns1__UpdateAlertScheduleResponse(
	struct soap *soap)
{
	struct ns1__UpdateAlertScheduleResponse *_p = ::soap_new_ns1__UpdateAlertScheduleResponse(soap);
	if (_p)
	{	::soap_default_ns1__UpdateAlertScheduleResponse(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__UpdateAlertScheduleResponse(struct soap*, const struct ns1__UpdateAlertScheduleResponse *, const char*, const char*);

inline int soap_write_ns1__UpdateAlertScheduleResponse(struct soap *soap, struct ns1__UpdateAlertScheduleResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__UpdateAlertScheduleResponse(soap, p), 0) || ::soap_put_ns1__UpdateAlertScheduleResponse(soap, p, "ns1:UpdateAlertScheduleResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__UpdateAlertScheduleResponse(struct soap *soap, const char *URL, struct ns1__UpdateAlertScheduleResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__UpdateAlertScheduleResponse(soap, p), 0) || ::soap_put_ns1__UpdateAlertScheduleResponse(soap, p, "ns1:UpdateAlertScheduleResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__UpdateAlertScheduleResponse(struct soap *soap, const char *URL, struct ns1__UpdateAlertScheduleResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__UpdateAlertScheduleResponse(soap, p), 0) || ::soap_put_ns1__UpdateAlertScheduleResponse(soap, p, "ns1:UpdateAlertScheduleResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__UpdateAlertScheduleResponse(struct soap *soap, const char *URL, struct ns1__UpdateAlertScheduleResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__UpdateAlertScheduleResponse(soap, p), 0) || ::soap_put_ns1__UpdateAlertScheduleResponse(soap, p, "ns1:UpdateAlertScheduleResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__UpdateAlertScheduleResponse * SOAP_FMAC4 soap_get_ns1__UpdateAlertScheduleResponse(struct soap*, struct ns1__UpdateAlertScheduleResponse *, const char*, const char*);

inline int soap_read_ns1__UpdateAlertScheduleResponse(struct soap *soap, struct ns1__UpdateAlertScheduleResponse *p)
{
	if (p)
	{	::soap_default_ns1__UpdateAlertScheduleResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__UpdateAlertScheduleResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__UpdateAlertScheduleResponse(struct soap *soap, const char *URL, struct ns1__UpdateAlertScheduleResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__UpdateAlertScheduleResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__UpdateAlertScheduleResponse(struct soap *soap, struct ns1__UpdateAlertScheduleResponse *p)
{
	if (::soap_read_ns1__UpdateAlertScheduleResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__InsertAlertActionParameter_DEFINED
#define SOAP_TYPE_ns1__InsertAlertActionParameter_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__InsertAlertActionParameter(struct soap*, struct ns1__InsertAlertActionParameter *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__InsertAlertActionParameter(struct soap*, const struct ns1__InsertAlertActionParameter *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__InsertAlertActionParameter(struct soap*, const char*, int, const struct ns1__InsertAlertActionParameter *, const char*);
SOAP_FMAC3 struct ns1__InsertAlertActionParameter * SOAP_FMAC4 soap_in_ns1__InsertAlertActionParameter(struct soap*, const char*, struct ns1__InsertAlertActionParameter *, const char*);
SOAP_FMAC1 struct ns1__InsertAlertActionParameter * SOAP_FMAC2 soap_instantiate_ns1__InsertAlertActionParameter(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__InsertAlertActionParameter * soap_new_ns1__InsertAlertActionParameter(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__InsertAlertActionParameter(soap, n, NULL, NULL, NULL);
}

inline struct ns1__InsertAlertActionParameter * soap_new_req_ns1__InsertAlertActionParameter(
	struct soap *soap,
	int _in0,
	int _in1,
	const std::string& _in2)
{
	struct ns1__InsertAlertActionParameter *_p = ::soap_new_ns1__InsertAlertActionParameter(soap);
	if (_p)
	{	::soap_default_ns1__InsertAlertActionParameter(soap, _p);
		_p->_in0 = _in0;
		_p->_in1 = _in1;
		_p->_in2 = _in2;
	}
	return _p;
}

inline struct ns1__InsertAlertActionParameter * soap_new_set_ns1__InsertAlertActionParameter(
	struct soap *soap,
	int _in0,
	int _in1,
	const std::string& _in2)
{
	struct ns1__InsertAlertActionParameter *_p = ::soap_new_ns1__InsertAlertActionParameter(soap);
	if (_p)
	{	::soap_default_ns1__InsertAlertActionParameter(soap, _p);
		_p->_in0 = _in0;
		_p->_in1 = _in1;
		_p->_in2 = _in2;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__InsertAlertActionParameter(struct soap*, const struct ns1__InsertAlertActionParameter *, const char*, const char*);

inline int soap_write_ns1__InsertAlertActionParameter(struct soap *soap, struct ns1__InsertAlertActionParameter const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__InsertAlertActionParameter(soap, p), 0) || ::soap_put_ns1__InsertAlertActionParameter(soap, p, "ns1:InsertAlertActionParameter", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__InsertAlertActionParameter(struct soap *soap, const char *URL, struct ns1__InsertAlertActionParameter const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__InsertAlertActionParameter(soap, p), 0) || ::soap_put_ns1__InsertAlertActionParameter(soap, p, "ns1:InsertAlertActionParameter", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__InsertAlertActionParameter(struct soap *soap, const char *URL, struct ns1__InsertAlertActionParameter const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__InsertAlertActionParameter(soap, p), 0) || ::soap_put_ns1__InsertAlertActionParameter(soap, p, "ns1:InsertAlertActionParameter", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__InsertAlertActionParameter(struct soap *soap, const char *URL, struct ns1__InsertAlertActionParameter const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__InsertAlertActionParameter(soap, p), 0) || ::soap_put_ns1__InsertAlertActionParameter(soap, p, "ns1:InsertAlertActionParameter", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__InsertAlertActionParameter * SOAP_FMAC4 soap_get_ns1__InsertAlertActionParameter(struct soap*, struct ns1__InsertAlertActionParameter *, const char*, const char*);

inline int soap_read_ns1__InsertAlertActionParameter(struct soap *soap, struct ns1__InsertAlertActionParameter *p)
{
	if (p)
	{	::soap_default_ns1__InsertAlertActionParameter(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__InsertAlertActionParameter(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__InsertAlertActionParameter(struct soap *soap, const char *URL, struct ns1__InsertAlertActionParameter *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__InsertAlertActionParameter(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__InsertAlertActionParameter(struct soap *soap, struct ns1__InsertAlertActionParameter *p)
{
	if (::soap_read_ns1__InsertAlertActionParameter(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__InsertAlertActionParameterResponse_DEFINED
#define SOAP_TYPE_ns1__InsertAlertActionParameterResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__InsertAlertActionParameterResponse(struct soap*, struct ns1__InsertAlertActionParameterResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__InsertAlertActionParameterResponse(struct soap*, const struct ns1__InsertAlertActionParameterResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__InsertAlertActionParameterResponse(struct soap*, const char*, int, const struct ns1__InsertAlertActionParameterResponse *, const char*);
SOAP_FMAC3 struct ns1__InsertAlertActionParameterResponse * SOAP_FMAC4 soap_in_ns1__InsertAlertActionParameterResponse(struct soap*, const char*, struct ns1__InsertAlertActionParameterResponse *, const char*);
SOAP_FMAC1 struct ns1__InsertAlertActionParameterResponse * SOAP_FMAC2 soap_instantiate_ns1__InsertAlertActionParameterResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__InsertAlertActionParameterResponse * soap_new_ns1__InsertAlertActionParameterResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__InsertAlertActionParameterResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__InsertAlertActionParameterResponse * soap_new_req_ns1__InsertAlertActionParameterResponse(
	struct soap *soap)
{
	struct ns1__InsertAlertActionParameterResponse *_p = ::soap_new_ns1__InsertAlertActionParameterResponse(soap);
	if (_p)
	{	::soap_default_ns1__InsertAlertActionParameterResponse(soap, _p);
	}
	return _p;
}

inline struct ns1__InsertAlertActionParameterResponse * soap_new_set_ns1__InsertAlertActionParameterResponse(
	struct soap *soap)
{
	struct ns1__InsertAlertActionParameterResponse *_p = ::soap_new_ns1__InsertAlertActionParameterResponse(soap);
	if (_p)
	{	::soap_default_ns1__InsertAlertActionParameterResponse(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__InsertAlertActionParameterResponse(struct soap*, const struct ns1__InsertAlertActionParameterResponse *, const char*, const char*);

inline int soap_write_ns1__InsertAlertActionParameterResponse(struct soap *soap, struct ns1__InsertAlertActionParameterResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__InsertAlertActionParameterResponse(soap, p), 0) || ::soap_put_ns1__InsertAlertActionParameterResponse(soap, p, "ns1:InsertAlertActionParameterResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__InsertAlertActionParameterResponse(struct soap *soap, const char *URL, struct ns1__InsertAlertActionParameterResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__InsertAlertActionParameterResponse(soap, p), 0) || ::soap_put_ns1__InsertAlertActionParameterResponse(soap, p, "ns1:InsertAlertActionParameterResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__InsertAlertActionParameterResponse(struct soap *soap, const char *URL, struct ns1__InsertAlertActionParameterResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__InsertAlertActionParameterResponse(soap, p), 0) || ::soap_put_ns1__InsertAlertActionParameterResponse(soap, p, "ns1:InsertAlertActionParameterResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__InsertAlertActionParameterResponse(struct soap *soap, const char *URL, struct ns1__InsertAlertActionParameterResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__InsertAlertActionParameterResponse(soap, p), 0) || ::soap_put_ns1__InsertAlertActionParameterResponse(soap, p, "ns1:InsertAlertActionParameterResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__InsertAlertActionParameterResponse * SOAP_FMAC4 soap_get_ns1__InsertAlertActionParameterResponse(struct soap*, struct ns1__InsertAlertActionParameterResponse *, const char*, const char*);

inline int soap_read_ns1__InsertAlertActionParameterResponse(struct soap *soap, struct ns1__InsertAlertActionParameterResponse *p)
{
	if (p)
	{	::soap_default_ns1__InsertAlertActionParameterResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__InsertAlertActionParameterResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__InsertAlertActionParameterResponse(struct soap *soap, const char *URL, struct ns1__InsertAlertActionParameterResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__InsertAlertActionParameterResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__InsertAlertActionParameterResponse(struct soap *soap, struct ns1__InsertAlertActionParameterResponse *p)
{
	if (::soap_read_ns1__InsertAlertActionParameterResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__UpdateAlertActionParameter_DEFINED
#define SOAP_TYPE_ns1__UpdateAlertActionParameter_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__UpdateAlertActionParameter(struct soap*, struct ns1__UpdateAlertActionParameter *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__UpdateAlertActionParameter(struct soap*, const struct ns1__UpdateAlertActionParameter *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__UpdateAlertActionParameter(struct soap*, const char*, int, const struct ns1__UpdateAlertActionParameter *, const char*);
SOAP_FMAC3 struct ns1__UpdateAlertActionParameter * SOAP_FMAC4 soap_in_ns1__UpdateAlertActionParameter(struct soap*, const char*, struct ns1__UpdateAlertActionParameter *, const char*);
SOAP_FMAC1 struct ns1__UpdateAlertActionParameter * SOAP_FMAC2 soap_instantiate_ns1__UpdateAlertActionParameter(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__UpdateAlertActionParameter * soap_new_ns1__UpdateAlertActionParameter(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__UpdateAlertActionParameter(soap, n, NULL, NULL, NULL);
}

inline struct ns1__UpdateAlertActionParameter * soap_new_req_ns1__UpdateAlertActionParameter(
	struct soap *soap,
	int _in0,
	int _in1,
	const std::string& _in2)
{
	struct ns1__UpdateAlertActionParameter *_p = ::soap_new_ns1__UpdateAlertActionParameter(soap);
	if (_p)
	{	::soap_default_ns1__UpdateAlertActionParameter(soap, _p);
		_p->_in0 = _in0;
		_p->_in1 = _in1;
		_p->_in2 = _in2;
	}
	return _p;
}

inline struct ns1__UpdateAlertActionParameter * soap_new_set_ns1__UpdateAlertActionParameter(
	struct soap *soap,
	int _in0,
	int _in1,
	const std::string& _in2)
{
	struct ns1__UpdateAlertActionParameter *_p = ::soap_new_ns1__UpdateAlertActionParameter(soap);
	if (_p)
	{	::soap_default_ns1__UpdateAlertActionParameter(soap, _p);
		_p->_in0 = _in0;
		_p->_in1 = _in1;
		_p->_in2 = _in2;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__UpdateAlertActionParameter(struct soap*, const struct ns1__UpdateAlertActionParameter *, const char*, const char*);

inline int soap_write_ns1__UpdateAlertActionParameter(struct soap *soap, struct ns1__UpdateAlertActionParameter const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__UpdateAlertActionParameter(soap, p), 0) || ::soap_put_ns1__UpdateAlertActionParameter(soap, p, "ns1:UpdateAlertActionParameter", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__UpdateAlertActionParameter(struct soap *soap, const char *URL, struct ns1__UpdateAlertActionParameter const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__UpdateAlertActionParameter(soap, p), 0) || ::soap_put_ns1__UpdateAlertActionParameter(soap, p, "ns1:UpdateAlertActionParameter", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__UpdateAlertActionParameter(struct soap *soap, const char *URL, struct ns1__UpdateAlertActionParameter const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__UpdateAlertActionParameter(soap, p), 0) || ::soap_put_ns1__UpdateAlertActionParameter(soap, p, "ns1:UpdateAlertActionParameter", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__UpdateAlertActionParameter(struct soap *soap, const char *URL, struct ns1__UpdateAlertActionParameter const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__UpdateAlertActionParameter(soap, p), 0) || ::soap_put_ns1__UpdateAlertActionParameter(soap, p, "ns1:UpdateAlertActionParameter", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__UpdateAlertActionParameter * SOAP_FMAC4 soap_get_ns1__UpdateAlertActionParameter(struct soap*, struct ns1__UpdateAlertActionParameter *, const char*, const char*);

inline int soap_read_ns1__UpdateAlertActionParameter(struct soap *soap, struct ns1__UpdateAlertActionParameter *p)
{
	if (p)
	{	::soap_default_ns1__UpdateAlertActionParameter(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__UpdateAlertActionParameter(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__UpdateAlertActionParameter(struct soap *soap, const char *URL, struct ns1__UpdateAlertActionParameter *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__UpdateAlertActionParameter(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__UpdateAlertActionParameter(struct soap *soap, struct ns1__UpdateAlertActionParameter *p)
{
	if (::soap_read_ns1__UpdateAlertActionParameter(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__UpdateAlertActionParameterResponse_DEFINED
#define SOAP_TYPE_ns1__UpdateAlertActionParameterResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__UpdateAlertActionParameterResponse(struct soap*, struct ns1__UpdateAlertActionParameterResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__UpdateAlertActionParameterResponse(struct soap*, const struct ns1__UpdateAlertActionParameterResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__UpdateAlertActionParameterResponse(struct soap*, const char*, int, const struct ns1__UpdateAlertActionParameterResponse *, const char*);
SOAP_FMAC3 struct ns1__UpdateAlertActionParameterResponse * SOAP_FMAC4 soap_in_ns1__UpdateAlertActionParameterResponse(struct soap*, const char*, struct ns1__UpdateAlertActionParameterResponse *, const char*);
SOAP_FMAC1 struct ns1__UpdateAlertActionParameterResponse * SOAP_FMAC2 soap_instantiate_ns1__UpdateAlertActionParameterResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__UpdateAlertActionParameterResponse * soap_new_ns1__UpdateAlertActionParameterResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__UpdateAlertActionParameterResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__UpdateAlertActionParameterResponse * soap_new_req_ns1__UpdateAlertActionParameterResponse(
	struct soap *soap)
{
	struct ns1__UpdateAlertActionParameterResponse *_p = ::soap_new_ns1__UpdateAlertActionParameterResponse(soap);
	if (_p)
	{	::soap_default_ns1__UpdateAlertActionParameterResponse(soap, _p);
	}
	return _p;
}

inline struct ns1__UpdateAlertActionParameterResponse * soap_new_set_ns1__UpdateAlertActionParameterResponse(
	struct soap *soap)
{
	struct ns1__UpdateAlertActionParameterResponse *_p = ::soap_new_ns1__UpdateAlertActionParameterResponse(soap);
	if (_p)
	{	::soap_default_ns1__UpdateAlertActionParameterResponse(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__UpdateAlertActionParameterResponse(struct soap*, const struct ns1__UpdateAlertActionParameterResponse *, const char*, const char*);

inline int soap_write_ns1__UpdateAlertActionParameterResponse(struct soap *soap, struct ns1__UpdateAlertActionParameterResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__UpdateAlertActionParameterResponse(soap, p), 0) || ::soap_put_ns1__UpdateAlertActionParameterResponse(soap, p, "ns1:UpdateAlertActionParameterResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__UpdateAlertActionParameterResponse(struct soap *soap, const char *URL, struct ns1__UpdateAlertActionParameterResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__UpdateAlertActionParameterResponse(soap, p), 0) || ::soap_put_ns1__UpdateAlertActionParameterResponse(soap, p, "ns1:UpdateAlertActionParameterResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__UpdateAlertActionParameterResponse(struct soap *soap, const char *URL, struct ns1__UpdateAlertActionParameterResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__UpdateAlertActionParameterResponse(soap, p), 0) || ::soap_put_ns1__UpdateAlertActionParameterResponse(soap, p, "ns1:UpdateAlertActionParameterResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__UpdateAlertActionParameterResponse(struct soap *soap, const char *URL, struct ns1__UpdateAlertActionParameterResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__UpdateAlertActionParameterResponse(soap, p), 0) || ::soap_put_ns1__UpdateAlertActionParameterResponse(soap, p, "ns1:UpdateAlertActionParameterResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__UpdateAlertActionParameterResponse * SOAP_FMAC4 soap_get_ns1__UpdateAlertActionParameterResponse(struct soap*, struct ns1__UpdateAlertActionParameterResponse *, const char*, const char*);

inline int soap_read_ns1__UpdateAlertActionParameterResponse(struct soap *soap, struct ns1__UpdateAlertActionParameterResponse *p)
{
	if (p)
	{	::soap_default_ns1__UpdateAlertActionParameterResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__UpdateAlertActionParameterResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__UpdateAlertActionParameterResponse(struct soap *soap, const char *URL, struct ns1__UpdateAlertActionParameterResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__UpdateAlertActionParameterResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__UpdateAlertActionParameterResponse(struct soap *soap, struct ns1__UpdateAlertActionParameterResponse *p)
{
	if (::soap_read_ns1__UpdateAlertActionParameterResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__InsertAlertActionField_DEFINED
#define SOAP_TYPE_ns1__InsertAlertActionField_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__InsertAlertActionField(struct soap*, struct ns1__InsertAlertActionField *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__InsertAlertActionField(struct soap*, const struct ns1__InsertAlertActionField *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__InsertAlertActionField(struct soap*, const char*, int, const struct ns1__InsertAlertActionField *, const char*);
SOAP_FMAC3 struct ns1__InsertAlertActionField * SOAP_FMAC4 soap_in_ns1__InsertAlertActionField(struct soap*, const char*, struct ns1__InsertAlertActionField *, const char*);
SOAP_FMAC1 struct ns1__InsertAlertActionField * SOAP_FMAC2 soap_instantiate_ns1__InsertAlertActionField(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__InsertAlertActionField * soap_new_ns1__InsertAlertActionField(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__InsertAlertActionField(soap, n, NULL, NULL, NULL);
}

inline struct ns1__InsertAlertActionField * soap_new_req_ns1__InsertAlertActionField(
	struct soap *soap,
	int _in0,
	int _in1)
{
	struct ns1__InsertAlertActionField *_p = ::soap_new_ns1__InsertAlertActionField(soap);
	if (_p)
	{	::soap_default_ns1__InsertAlertActionField(soap, _p);
		_p->_in0 = _in0;
		_p->_in1 = _in1;
	}
	return _p;
}

inline struct ns1__InsertAlertActionField * soap_new_set_ns1__InsertAlertActionField(
	struct soap *soap,
	int _in0,
	int _in1)
{
	struct ns1__InsertAlertActionField *_p = ::soap_new_ns1__InsertAlertActionField(soap);
	if (_p)
	{	::soap_default_ns1__InsertAlertActionField(soap, _p);
		_p->_in0 = _in0;
		_p->_in1 = _in1;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__InsertAlertActionField(struct soap*, const struct ns1__InsertAlertActionField *, const char*, const char*);

inline int soap_write_ns1__InsertAlertActionField(struct soap *soap, struct ns1__InsertAlertActionField const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__InsertAlertActionField(soap, p), 0) || ::soap_put_ns1__InsertAlertActionField(soap, p, "ns1:InsertAlertActionField", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__InsertAlertActionField(struct soap *soap, const char *URL, struct ns1__InsertAlertActionField const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__InsertAlertActionField(soap, p), 0) || ::soap_put_ns1__InsertAlertActionField(soap, p, "ns1:InsertAlertActionField", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__InsertAlertActionField(struct soap *soap, const char *URL, struct ns1__InsertAlertActionField const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__InsertAlertActionField(soap, p), 0) || ::soap_put_ns1__InsertAlertActionField(soap, p, "ns1:InsertAlertActionField", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__InsertAlertActionField(struct soap *soap, const char *URL, struct ns1__InsertAlertActionField const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__InsertAlertActionField(soap, p), 0) || ::soap_put_ns1__InsertAlertActionField(soap, p, "ns1:InsertAlertActionField", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__InsertAlertActionField * SOAP_FMAC4 soap_get_ns1__InsertAlertActionField(struct soap*, struct ns1__InsertAlertActionField *, const char*, const char*);

inline int soap_read_ns1__InsertAlertActionField(struct soap *soap, struct ns1__InsertAlertActionField *p)
{
	if (p)
	{	::soap_default_ns1__InsertAlertActionField(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__InsertAlertActionField(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__InsertAlertActionField(struct soap *soap, const char *URL, struct ns1__InsertAlertActionField *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__InsertAlertActionField(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__InsertAlertActionField(struct soap *soap, struct ns1__InsertAlertActionField *p)
{
	if (::soap_read_ns1__InsertAlertActionField(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__InsertAlertActionFieldResponse_DEFINED
#define SOAP_TYPE_ns1__InsertAlertActionFieldResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__InsertAlertActionFieldResponse(struct soap*, struct ns1__InsertAlertActionFieldResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__InsertAlertActionFieldResponse(struct soap*, const struct ns1__InsertAlertActionFieldResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__InsertAlertActionFieldResponse(struct soap*, const char*, int, const struct ns1__InsertAlertActionFieldResponse *, const char*);
SOAP_FMAC3 struct ns1__InsertAlertActionFieldResponse * SOAP_FMAC4 soap_in_ns1__InsertAlertActionFieldResponse(struct soap*, const char*, struct ns1__InsertAlertActionFieldResponse *, const char*);
SOAP_FMAC1 struct ns1__InsertAlertActionFieldResponse * SOAP_FMAC2 soap_instantiate_ns1__InsertAlertActionFieldResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__InsertAlertActionFieldResponse * soap_new_ns1__InsertAlertActionFieldResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__InsertAlertActionFieldResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__InsertAlertActionFieldResponse * soap_new_req_ns1__InsertAlertActionFieldResponse(
	struct soap *soap)
{
	struct ns1__InsertAlertActionFieldResponse *_p = ::soap_new_ns1__InsertAlertActionFieldResponse(soap);
	if (_p)
	{	::soap_default_ns1__InsertAlertActionFieldResponse(soap, _p);
	}
	return _p;
}

inline struct ns1__InsertAlertActionFieldResponse * soap_new_set_ns1__InsertAlertActionFieldResponse(
	struct soap *soap)
{
	struct ns1__InsertAlertActionFieldResponse *_p = ::soap_new_ns1__InsertAlertActionFieldResponse(soap);
	if (_p)
	{	::soap_default_ns1__InsertAlertActionFieldResponse(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__InsertAlertActionFieldResponse(struct soap*, const struct ns1__InsertAlertActionFieldResponse *, const char*, const char*);

inline int soap_write_ns1__InsertAlertActionFieldResponse(struct soap *soap, struct ns1__InsertAlertActionFieldResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__InsertAlertActionFieldResponse(soap, p), 0) || ::soap_put_ns1__InsertAlertActionFieldResponse(soap, p, "ns1:InsertAlertActionFieldResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__InsertAlertActionFieldResponse(struct soap *soap, const char *URL, struct ns1__InsertAlertActionFieldResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__InsertAlertActionFieldResponse(soap, p), 0) || ::soap_put_ns1__InsertAlertActionFieldResponse(soap, p, "ns1:InsertAlertActionFieldResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__InsertAlertActionFieldResponse(struct soap *soap, const char *URL, struct ns1__InsertAlertActionFieldResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__InsertAlertActionFieldResponse(soap, p), 0) || ::soap_put_ns1__InsertAlertActionFieldResponse(soap, p, "ns1:InsertAlertActionFieldResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__InsertAlertActionFieldResponse(struct soap *soap, const char *URL, struct ns1__InsertAlertActionFieldResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__InsertAlertActionFieldResponse(soap, p), 0) || ::soap_put_ns1__InsertAlertActionFieldResponse(soap, p, "ns1:InsertAlertActionFieldResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__InsertAlertActionFieldResponse * SOAP_FMAC4 soap_get_ns1__InsertAlertActionFieldResponse(struct soap*, struct ns1__InsertAlertActionFieldResponse *, const char*, const char*);

inline int soap_read_ns1__InsertAlertActionFieldResponse(struct soap *soap, struct ns1__InsertAlertActionFieldResponse *p)
{
	if (p)
	{	::soap_default_ns1__InsertAlertActionFieldResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__InsertAlertActionFieldResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__InsertAlertActionFieldResponse(struct soap *soap, const char *URL, struct ns1__InsertAlertActionFieldResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__InsertAlertActionFieldResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__InsertAlertActionFieldResponse(struct soap *soap, struct ns1__InsertAlertActionFieldResponse *p)
{
	if (::soap_read_ns1__InsertAlertActionFieldResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__UpdateAlertActionField_DEFINED
#define SOAP_TYPE_ns1__UpdateAlertActionField_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__UpdateAlertActionField(struct soap*, struct ns1__UpdateAlertActionField *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__UpdateAlertActionField(struct soap*, const struct ns1__UpdateAlertActionField *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__UpdateAlertActionField(struct soap*, const char*, int, const struct ns1__UpdateAlertActionField *, const char*);
SOAP_FMAC3 struct ns1__UpdateAlertActionField * SOAP_FMAC4 soap_in_ns1__UpdateAlertActionField(struct soap*, const char*, struct ns1__UpdateAlertActionField *, const char*);
SOAP_FMAC1 struct ns1__UpdateAlertActionField * SOAP_FMAC2 soap_instantiate_ns1__UpdateAlertActionField(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__UpdateAlertActionField * soap_new_ns1__UpdateAlertActionField(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__UpdateAlertActionField(soap, n, NULL, NULL, NULL);
}

inline struct ns1__UpdateAlertActionField * soap_new_req_ns1__UpdateAlertActionField(
	struct soap *soap,
	int _in0,
	int _in1)
{
	struct ns1__UpdateAlertActionField *_p = ::soap_new_ns1__UpdateAlertActionField(soap);
	if (_p)
	{	::soap_default_ns1__UpdateAlertActionField(soap, _p);
		_p->_in0 = _in0;
		_p->_in1 = _in1;
	}
	return _p;
}

inline struct ns1__UpdateAlertActionField * soap_new_set_ns1__UpdateAlertActionField(
	struct soap *soap,
	int _in0,
	int _in1)
{
	struct ns1__UpdateAlertActionField *_p = ::soap_new_ns1__UpdateAlertActionField(soap);
	if (_p)
	{	::soap_default_ns1__UpdateAlertActionField(soap, _p);
		_p->_in0 = _in0;
		_p->_in1 = _in1;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__UpdateAlertActionField(struct soap*, const struct ns1__UpdateAlertActionField *, const char*, const char*);

inline int soap_write_ns1__UpdateAlertActionField(struct soap *soap, struct ns1__UpdateAlertActionField const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__UpdateAlertActionField(soap, p), 0) || ::soap_put_ns1__UpdateAlertActionField(soap, p, "ns1:UpdateAlertActionField", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__UpdateAlertActionField(struct soap *soap, const char *URL, struct ns1__UpdateAlertActionField const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__UpdateAlertActionField(soap, p), 0) || ::soap_put_ns1__UpdateAlertActionField(soap, p, "ns1:UpdateAlertActionField", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__UpdateAlertActionField(struct soap *soap, const char *URL, struct ns1__UpdateAlertActionField const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__UpdateAlertActionField(soap, p), 0) || ::soap_put_ns1__UpdateAlertActionField(soap, p, "ns1:UpdateAlertActionField", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__UpdateAlertActionField(struct soap *soap, const char *URL, struct ns1__UpdateAlertActionField const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__UpdateAlertActionField(soap, p), 0) || ::soap_put_ns1__UpdateAlertActionField(soap, p, "ns1:UpdateAlertActionField", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__UpdateAlertActionField * SOAP_FMAC4 soap_get_ns1__UpdateAlertActionField(struct soap*, struct ns1__UpdateAlertActionField *, const char*, const char*);

inline int soap_read_ns1__UpdateAlertActionField(struct soap *soap, struct ns1__UpdateAlertActionField *p)
{
	if (p)
	{	::soap_default_ns1__UpdateAlertActionField(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__UpdateAlertActionField(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__UpdateAlertActionField(struct soap *soap, const char *URL, struct ns1__UpdateAlertActionField *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__UpdateAlertActionField(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__UpdateAlertActionField(struct soap *soap, struct ns1__UpdateAlertActionField *p)
{
	if (::soap_read_ns1__UpdateAlertActionField(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__UpdateAlertActionFieldResponse_DEFINED
#define SOAP_TYPE_ns1__UpdateAlertActionFieldResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__UpdateAlertActionFieldResponse(struct soap*, struct ns1__UpdateAlertActionFieldResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__UpdateAlertActionFieldResponse(struct soap*, const struct ns1__UpdateAlertActionFieldResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__UpdateAlertActionFieldResponse(struct soap*, const char*, int, const struct ns1__UpdateAlertActionFieldResponse *, const char*);
SOAP_FMAC3 struct ns1__UpdateAlertActionFieldResponse * SOAP_FMAC4 soap_in_ns1__UpdateAlertActionFieldResponse(struct soap*, const char*, struct ns1__UpdateAlertActionFieldResponse *, const char*);
SOAP_FMAC1 struct ns1__UpdateAlertActionFieldResponse * SOAP_FMAC2 soap_instantiate_ns1__UpdateAlertActionFieldResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__UpdateAlertActionFieldResponse * soap_new_ns1__UpdateAlertActionFieldResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__UpdateAlertActionFieldResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__UpdateAlertActionFieldResponse * soap_new_req_ns1__UpdateAlertActionFieldResponse(
	struct soap *soap)
{
	struct ns1__UpdateAlertActionFieldResponse *_p = ::soap_new_ns1__UpdateAlertActionFieldResponse(soap);
	if (_p)
	{	::soap_default_ns1__UpdateAlertActionFieldResponse(soap, _p);
	}
	return _p;
}

inline struct ns1__UpdateAlertActionFieldResponse * soap_new_set_ns1__UpdateAlertActionFieldResponse(
	struct soap *soap)
{
	struct ns1__UpdateAlertActionFieldResponse *_p = ::soap_new_ns1__UpdateAlertActionFieldResponse(soap);
	if (_p)
	{	::soap_default_ns1__UpdateAlertActionFieldResponse(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__UpdateAlertActionFieldResponse(struct soap*, const struct ns1__UpdateAlertActionFieldResponse *, const char*, const char*);

inline int soap_write_ns1__UpdateAlertActionFieldResponse(struct soap *soap, struct ns1__UpdateAlertActionFieldResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__UpdateAlertActionFieldResponse(soap, p), 0) || ::soap_put_ns1__UpdateAlertActionFieldResponse(soap, p, "ns1:UpdateAlertActionFieldResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__UpdateAlertActionFieldResponse(struct soap *soap, const char *URL, struct ns1__UpdateAlertActionFieldResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__UpdateAlertActionFieldResponse(soap, p), 0) || ::soap_put_ns1__UpdateAlertActionFieldResponse(soap, p, "ns1:UpdateAlertActionFieldResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__UpdateAlertActionFieldResponse(struct soap *soap, const char *URL, struct ns1__UpdateAlertActionFieldResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__UpdateAlertActionFieldResponse(soap, p), 0) || ::soap_put_ns1__UpdateAlertActionFieldResponse(soap, p, "ns1:UpdateAlertActionFieldResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__UpdateAlertActionFieldResponse(struct soap *soap, const char *URL, struct ns1__UpdateAlertActionFieldResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__UpdateAlertActionFieldResponse(soap, p), 0) || ::soap_put_ns1__UpdateAlertActionFieldResponse(soap, p, "ns1:UpdateAlertActionFieldResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__UpdateAlertActionFieldResponse * SOAP_FMAC4 soap_get_ns1__UpdateAlertActionFieldResponse(struct soap*, struct ns1__UpdateAlertActionFieldResponse *, const char*, const char*);

inline int soap_read_ns1__UpdateAlertActionFieldResponse(struct soap *soap, struct ns1__UpdateAlertActionFieldResponse *p)
{
	if (p)
	{	::soap_default_ns1__UpdateAlertActionFieldResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__UpdateAlertActionFieldResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__UpdateAlertActionFieldResponse(struct soap *soap, const char *URL, struct ns1__UpdateAlertActionFieldResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__UpdateAlertActionFieldResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__UpdateAlertActionFieldResponse(struct soap *soap, struct ns1__UpdateAlertActionFieldResponse *p)
{
	if (::soap_read_ns1__UpdateAlertActionFieldResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GetAlertsRecord_DEFINED
#define SOAP_TYPE_ns1__GetAlertsRecord_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__GetAlertsRecord(struct soap*, struct ns1__GetAlertsRecord *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__GetAlertsRecord(struct soap*, const struct ns1__GetAlertsRecord *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetAlertsRecord(struct soap*, const char*, int, const struct ns1__GetAlertsRecord *, const char*);
SOAP_FMAC3 struct ns1__GetAlertsRecord * SOAP_FMAC4 soap_in_ns1__GetAlertsRecord(struct soap*, const char*, struct ns1__GetAlertsRecord *, const char*);
SOAP_FMAC1 struct ns1__GetAlertsRecord * SOAP_FMAC2 soap_instantiate_ns1__GetAlertsRecord(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__GetAlertsRecord * soap_new_ns1__GetAlertsRecord(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetAlertsRecord(soap, n, NULL, NULL, NULL);
}

inline struct ns1__GetAlertsRecord * soap_new_req_ns1__GetAlertsRecord(
	struct soap *soap)
{
	struct ns1__GetAlertsRecord *_p = ::soap_new_ns1__GetAlertsRecord(soap);
	if (_p)
	{	::soap_default_ns1__GetAlertsRecord(soap, _p);
	}
	return _p;
}

inline struct ns1__GetAlertsRecord * soap_new_set_ns1__GetAlertsRecord(
	struct soap *soap)
{
	struct ns1__GetAlertsRecord *_p = ::soap_new_ns1__GetAlertsRecord(soap);
	if (_p)
	{	::soap_default_ns1__GetAlertsRecord(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__GetAlertsRecord(struct soap*, const struct ns1__GetAlertsRecord *, const char*, const char*);

inline int soap_write_ns1__GetAlertsRecord(struct soap *soap, struct ns1__GetAlertsRecord const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__GetAlertsRecord(soap, p), 0) || ::soap_put_ns1__GetAlertsRecord(soap, p, "ns1:GetAlertsRecord", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetAlertsRecord(struct soap *soap, const char *URL, struct ns1__GetAlertsRecord const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetAlertsRecord(soap, p), 0) || ::soap_put_ns1__GetAlertsRecord(soap, p, "ns1:GetAlertsRecord", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__GetAlertsRecord(struct soap *soap, const char *URL, struct ns1__GetAlertsRecord const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetAlertsRecord(soap, p), 0) || ::soap_put_ns1__GetAlertsRecord(soap, p, "ns1:GetAlertsRecord", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetAlertsRecord(struct soap *soap, const char *URL, struct ns1__GetAlertsRecord const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetAlertsRecord(soap, p), 0) || ::soap_put_ns1__GetAlertsRecord(soap, p, "ns1:GetAlertsRecord", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__GetAlertsRecord * SOAP_FMAC4 soap_get_ns1__GetAlertsRecord(struct soap*, struct ns1__GetAlertsRecord *, const char*, const char*);

inline int soap_read_ns1__GetAlertsRecord(struct soap *soap, struct ns1__GetAlertsRecord *p)
{
	if (p)
	{	::soap_default_ns1__GetAlertsRecord(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__GetAlertsRecord(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetAlertsRecord(struct soap *soap, const char *URL, struct ns1__GetAlertsRecord *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__GetAlertsRecord(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GetAlertsRecord(struct soap *soap, struct ns1__GetAlertsRecord *p)
{
	if (::soap_read_ns1__GetAlertsRecord(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GetAlertsRecordResponse_DEFINED
#define SOAP_TYPE_ns1__GetAlertsRecordResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__GetAlertsRecordResponse(struct soap*, struct ns1__GetAlertsRecordResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__GetAlertsRecordResponse(struct soap*, const struct ns1__GetAlertsRecordResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetAlertsRecordResponse(struct soap*, const char*, int, const struct ns1__GetAlertsRecordResponse *, const char*);
SOAP_FMAC3 struct ns1__GetAlertsRecordResponse * SOAP_FMAC4 soap_in_ns1__GetAlertsRecordResponse(struct soap*, const char*, struct ns1__GetAlertsRecordResponse *, const char*);
SOAP_FMAC1 struct ns1__GetAlertsRecordResponse * SOAP_FMAC2 soap_instantiate_ns1__GetAlertsRecordResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__GetAlertsRecordResponse * soap_new_ns1__GetAlertsRecordResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetAlertsRecordResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__GetAlertsRecordResponse * soap_new_req_ns1__GetAlertsRecordResponse(
	struct soap *soap,
	const std::string& GetAlertsRecordReturn)
{
	struct ns1__GetAlertsRecordResponse *_p = ::soap_new_ns1__GetAlertsRecordResponse(soap);
	if (_p)
	{	::soap_default_ns1__GetAlertsRecordResponse(soap, _p);
		_p->GetAlertsRecordReturn = GetAlertsRecordReturn;
	}
	return _p;
}

inline struct ns1__GetAlertsRecordResponse * soap_new_set_ns1__GetAlertsRecordResponse(
	struct soap *soap,
	const std::string& GetAlertsRecordReturn)
{
	struct ns1__GetAlertsRecordResponse *_p = ::soap_new_ns1__GetAlertsRecordResponse(soap);
	if (_p)
	{	::soap_default_ns1__GetAlertsRecordResponse(soap, _p);
		_p->GetAlertsRecordReturn = GetAlertsRecordReturn;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__GetAlertsRecordResponse(struct soap*, const struct ns1__GetAlertsRecordResponse *, const char*, const char*);

inline int soap_write_ns1__GetAlertsRecordResponse(struct soap *soap, struct ns1__GetAlertsRecordResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__GetAlertsRecordResponse(soap, p), 0) || ::soap_put_ns1__GetAlertsRecordResponse(soap, p, "ns1:GetAlertsRecordResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetAlertsRecordResponse(struct soap *soap, const char *URL, struct ns1__GetAlertsRecordResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetAlertsRecordResponse(soap, p), 0) || ::soap_put_ns1__GetAlertsRecordResponse(soap, p, "ns1:GetAlertsRecordResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__GetAlertsRecordResponse(struct soap *soap, const char *URL, struct ns1__GetAlertsRecordResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetAlertsRecordResponse(soap, p), 0) || ::soap_put_ns1__GetAlertsRecordResponse(soap, p, "ns1:GetAlertsRecordResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetAlertsRecordResponse(struct soap *soap, const char *URL, struct ns1__GetAlertsRecordResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetAlertsRecordResponse(soap, p), 0) || ::soap_put_ns1__GetAlertsRecordResponse(soap, p, "ns1:GetAlertsRecordResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__GetAlertsRecordResponse * SOAP_FMAC4 soap_get_ns1__GetAlertsRecordResponse(struct soap*, struct ns1__GetAlertsRecordResponse *, const char*, const char*);

inline int soap_read_ns1__GetAlertsRecordResponse(struct soap *soap, struct ns1__GetAlertsRecordResponse *p)
{
	if (p)
	{	::soap_default_ns1__GetAlertsRecordResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__GetAlertsRecordResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetAlertsRecordResponse(struct soap *soap, const char *URL, struct ns1__GetAlertsRecordResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__GetAlertsRecordResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GetAlertsRecordResponse(struct soap *soap, struct ns1__GetAlertsRecordResponse *p)
{
	if (::soap_read_ns1__GetAlertsRecordResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GetAlertsRecordByDocumentType_DEFINED
#define SOAP_TYPE_ns1__GetAlertsRecordByDocumentType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__GetAlertsRecordByDocumentType(struct soap*, struct ns1__GetAlertsRecordByDocumentType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__GetAlertsRecordByDocumentType(struct soap*, const struct ns1__GetAlertsRecordByDocumentType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetAlertsRecordByDocumentType(struct soap*, const char*, int, const struct ns1__GetAlertsRecordByDocumentType *, const char*);
SOAP_FMAC3 struct ns1__GetAlertsRecordByDocumentType * SOAP_FMAC4 soap_in_ns1__GetAlertsRecordByDocumentType(struct soap*, const char*, struct ns1__GetAlertsRecordByDocumentType *, const char*);
SOAP_FMAC1 struct ns1__GetAlertsRecordByDocumentType * SOAP_FMAC2 soap_instantiate_ns1__GetAlertsRecordByDocumentType(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__GetAlertsRecordByDocumentType * soap_new_ns1__GetAlertsRecordByDocumentType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetAlertsRecordByDocumentType(soap, n, NULL, NULL, NULL);
}

inline struct ns1__GetAlertsRecordByDocumentType * soap_new_req_ns1__GetAlertsRecordByDocumentType(
	struct soap *soap,
	int _in0)
{
	struct ns1__GetAlertsRecordByDocumentType *_p = ::soap_new_ns1__GetAlertsRecordByDocumentType(soap);
	if (_p)
	{	::soap_default_ns1__GetAlertsRecordByDocumentType(soap, _p);
		_p->_in0 = _in0;
	}
	return _p;
}

inline struct ns1__GetAlertsRecordByDocumentType * soap_new_set_ns1__GetAlertsRecordByDocumentType(
	struct soap *soap,
	int _in0)
{
	struct ns1__GetAlertsRecordByDocumentType *_p = ::soap_new_ns1__GetAlertsRecordByDocumentType(soap);
	if (_p)
	{	::soap_default_ns1__GetAlertsRecordByDocumentType(soap, _p);
		_p->_in0 = _in0;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__GetAlertsRecordByDocumentType(struct soap*, const struct ns1__GetAlertsRecordByDocumentType *, const char*, const char*);

inline int soap_write_ns1__GetAlertsRecordByDocumentType(struct soap *soap, struct ns1__GetAlertsRecordByDocumentType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__GetAlertsRecordByDocumentType(soap, p), 0) || ::soap_put_ns1__GetAlertsRecordByDocumentType(soap, p, "ns1:GetAlertsRecordByDocumentType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetAlertsRecordByDocumentType(struct soap *soap, const char *URL, struct ns1__GetAlertsRecordByDocumentType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetAlertsRecordByDocumentType(soap, p), 0) || ::soap_put_ns1__GetAlertsRecordByDocumentType(soap, p, "ns1:GetAlertsRecordByDocumentType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__GetAlertsRecordByDocumentType(struct soap *soap, const char *URL, struct ns1__GetAlertsRecordByDocumentType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetAlertsRecordByDocumentType(soap, p), 0) || ::soap_put_ns1__GetAlertsRecordByDocumentType(soap, p, "ns1:GetAlertsRecordByDocumentType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetAlertsRecordByDocumentType(struct soap *soap, const char *URL, struct ns1__GetAlertsRecordByDocumentType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetAlertsRecordByDocumentType(soap, p), 0) || ::soap_put_ns1__GetAlertsRecordByDocumentType(soap, p, "ns1:GetAlertsRecordByDocumentType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__GetAlertsRecordByDocumentType * SOAP_FMAC4 soap_get_ns1__GetAlertsRecordByDocumentType(struct soap*, struct ns1__GetAlertsRecordByDocumentType *, const char*, const char*);

inline int soap_read_ns1__GetAlertsRecordByDocumentType(struct soap *soap, struct ns1__GetAlertsRecordByDocumentType *p)
{
	if (p)
	{	::soap_default_ns1__GetAlertsRecordByDocumentType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__GetAlertsRecordByDocumentType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetAlertsRecordByDocumentType(struct soap *soap, const char *URL, struct ns1__GetAlertsRecordByDocumentType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__GetAlertsRecordByDocumentType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GetAlertsRecordByDocumentType(struct soap *soap, struct ns1__GetAlertsRecordByDocumentType *p)
{
	if (::soap_read_ns1__GetAlertsRecordByDocumentType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GetAlertsRecordByDocumentTypeResponse_DEFINED
#define SOAP_TYPE_ns1__GetAlertsRecordByDocumentTypeResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__GetAlertsRecordByDocumentTypeResponse(struct soap*, struct ns1__GetAlertsRecordByDocumentTypeResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__GetAlertsRecordByDocumentTypeResponse(struct soap*, const struct ns1__GetAlertsRecordByDocumentTypeResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetAlertsRecordByDocumentTypeResponse(struct soap*, const char*, int, const struct ns1__GetAlertsRecordByDocumentTypeResponse *, const char*);
SOAP_FMAC3 struct ns1__GetAlertsRecordByDocumentTypeResponse * SOAP_FMAC4 soap_in_ns1__GetAlertsRecordByDocumentTypeResponse(struct soap*, const char*, struct ns1__GetAlertsRecordByDocumentTypeResponse *, const char*);
SOAP_FMAC1 struct ns1__GetAlertsRecordByDocumentTypeResponse * SOAP_FMAC2 soap_instantiate_ns1__GetAlertsRecordByDocumentTypeResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__GetAlertsRecordByDocumentTypeResponse * soap_new_ns1__GetAlertsRecordByDocumentTypeResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetAlertsRecordByDocumentTypeResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__GetAlertsRecordByDocumentTypeResponse * soap_new_req_ns1__GetAlertsRecordByDocumentTypeResponse(
	struct soap *soap,
	const std::string& _GetAlertsRecordByDocumentTypeReturn)
{
	struct ns1__GetAlertsRecordByDocumentTypeResponse *_p = ::soap_new_ns1__GetAlertsRecordByDocumentTypeResponse(soap);
	if (_p)
	{	::soap_default_ns1__GetAlertsRecordByDocumentTypeResponse(soap, _p);
		_p->_GetAlertsRecordByDocumentTypeReturn = _GetAlertsRecordByDocumentTypeReturn;
	}
	return _p;
}

inline struct ns1__GetAlertsRecordByDocumentTypeResponse * soap_new_set_ns1__GetAlertsRecordByDocumentTypeResponse(
	struct soap *soap,
	const std::string& _GetAlertsRecordByDocumentTypeReturn)
{
	struct ns1__GetAlertsRecordByDocumentTypeResponse *_p = ::soap_new_ns1__GetAlertsRecordByDocumentTypeResponse(soap);
	if (_p)
	{	::soap_default_ns1__GetAlertsRecordByDocumentTypeResponse(soap, _p);
		_p->_GetAlertsRecordByDocumentTypeReturn = _GetAlertsRecordByDocumentTypeReturn;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__GetAlertsRecordByDocumentTypeResponse(struct soap*, const struct ns1__GetAlertsRecordByDocumentTypeResponse *, const char*, const char*);

inline int soap_write_ns1__GetAlertsRecordByDocumentTypeResponse(struct soap *soap, struct ns1__GetAlertsRecordByDocumentTypeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__GetAlertsRecordByDocumentTypeResponse(soap, p), 0) || ::soap_put_ns1__GetAlertsRecordByDocumentTypeResponse(soap, p, "ns1:GetAlertsRecordByDocumentTypeResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetAlertsRecordByDocumentTypeResponse(struct soap *soap, const char *URL, struct ns1__GetAlertsRecordByDocumentTypeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetAlertsRecordByDocumentTypeResponse(soap, p), 0) || ::soap_put_ns1__GetAlertsRecordByDocumentTypeResponse(soap, p, "ns1:GetAlertsRecordByDocumentTypeResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__GetAlertsRecordByDocumentTypeResponse(struct soap *soap, const char *URL, struct ns1__GetAlertsRecordByDocumentTypeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetAlertsRecordByDocumentTypeResponse(soap, p), 0) || ::soap_put_ns1__GetAlertsRecordByDocumentTypeResponse(soap, p, "ns1:GetAlertsRecordByDocumentTypeResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetAlertsRecordByDocumentTypeResponse(struct soap *soap, const char *URL, struct ns1__GetAlertsRecordByDocumentTypeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetAlertsRecordByDocumentTypeResponse(soap, p), 0) || ::soap_put_ns1__GetAlertsRecordByDocumentTypeResponse(soap, p, "ns1:GetAlertsRecordByDocumentTypeResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__GetAlertsRecordByDocumentTypeResponse * SOAP_FMAC4 soap_get_ns1__GetAlertsRecordByDocumentTypeResponse(struct soap*, struct ns1__GetAlertsRecordByDocumentTypeResponse *, const char*, const char*);

inline int soap_read_ns1__GetAlertsRecordByDocumentTypeResponse(struct soap *soap, struct ns1__GetAlertsRecordByDocumentTypeResponse *p)
{
	if (p)
	{	::soap_default_ns1__GetAlertsRecordByDocumentTypeResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__GetAlertsRecordByDocumentTypeResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetAlertsRecordByDocumentTypeResponse(struct soap *soap, const char *URL, struct ns1__GetAlertsRecordByDocumentTypeResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__GetAlertsRecordByDocumentTypeResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GetAlertsRecordByDocumentTypeResponse(struct soap *soap, struct ns1__GetAlertsRecordByDocumentTypeResponse *p)
{
	if (::soap_read_ns1__GetAlertsRecordByDocumentTypeResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GetAlertEvaluationsRecord_DEFINED
#define SOAP_TYPE_ns1__GetAlertEvaluationsRecord_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__GetAlertEvaluationsRecord(struct soap*, struct ns1__GetAlertEvaluationsRecord *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__GetAlertEvaluationsRecord(struct soap*, const struct ns1__GetAlertEvaluationsRecord *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetAlertEvaluationsRecord(struct soap*, const char*, int, const struct ns1__GetAlertEvaluationsRecord *, const char*);
SOAP_FMAC3 struct ns1__GetAlertEvaluationsRecord * SOAP_FMAC4 soap_in_ns1__GetAlertEvaluationsRecord(struct soap*, const char*, struct ns1__GetAlertEvaluationsRecord *, const char*);
SOAP_FMAC1 struct ns1__GetAlertEvaluationsRecord * SOAP_FMAC2 soap_instantiate_ns1__GetAlertEvaluationsRecord(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__GetAlertEvaluationsRecord * soap_new_ns1__GetAlertEvaluationsRecord(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetAlertEvaluationsRecord(soap, n, NULL, NULL, NULL);
}

inline struct ns1__GetAlertEvaluationsRecord * soap_new_req_ns1__GetAlertEvaluationsRecord(
	struct soap *soap,
	int _in0)
{
	struct ns1__GetAlertEvaluationsRecord *_p = ::soap_new_ns1__GetAlertEvaluationsRecord(soap);
	if (_p)
	{	::soap_default_ns1__GetAlertEvaluationsRecord(soap, _p);
		_p->_in0 = _in0;
	}
	return _p;
}

inline struct ns1__GetAlertEvaluationsRecord * soap_new_set_ns1__GetAlertEvaluationsRecord(
	struct soap *soap,
	int _in0)
{
	struct ns1__GetAlertEvaluationsRecord *_p = ::soap_new_ns1__GetAlertEvaluationsRecord(soap);
	if (_p)
	{	::soap_default_ns1__GetAlertEvaluationsRecord(soap, _p);
		_p->_in0 = _in0;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__GetAlertEvaluationsRecord(struct soap*, const struct ns1__GetAlertEvaluationsRecord *, const char*, const char*);

inline int soap_write_ns1__GetAlertEvaluationsRecord(struct soap *soap, struct ns1__GetAlertEvaluationsRecord const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__GetAlertEvaluationsRecord(soap, p), 0) || ::soap_put_ns1__GetAlertEvaluationsRecord(soap, p, "ns1:GetAlertEvaluationsRecord", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetAlertEvaluationsRecord(struct soap *soap, const char *URL, struct ns1__GetAlertEvaluationsRecord const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetAlertEvaluationsRecord(soap, p), 0) || ::soap_put_ns1__GetAlertEvaluationsRecord(soap, p, "ns1:GetAlertEvaluationsRecord", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__GetAlertEvaluationsRecord(struct soap *soap, const char *URL, struct ns1__GetAlertEvaluationsRecord const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetAlertEvaluationsRecord(soap, p), 0) || ::soap_put_ns1__GetAlertEvaluationsRecord(soap, p, "ns1:GetAlertEvaluationsRecord", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetAlertEvaluationsRecord(struct soap *soap, const char *URL, struct ns1__GetAlertEvaluationsRecord const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetAlertEvaluationsRecord(soap, p), 0) || ::soap_put_ns1__GetAlertEvaluationsRecord(soap, p, "ns1:GetAlertEvaluationsRecord", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__GetAlertEvaluationsRecord * SOAP_FMAC4 soap_get_ns1__GetAlertEvaluationsRecord(struct soap*, struct ns1__GetAlertEvaluationsRecord *, const char*, const char*);

inline int soap_read_ns1__GetAlertEvaluationsRecord(struct soap *soap, struct ns1__GetAlertEvaluationsRecord *p)
{
	if (p)
	{	::soap_default_ns1__GetAlertEvaluationsRecord(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__GetAlertEvaluationsRecord(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetAlertEvaluationsRecord(struct soap *soap, const char *URL, struct ns1__GetAlertEvaluationsRecord *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__GetAlertEvaluationsRecord(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GetAlertEvaluationsRecord(struct soap *soap, struct ns1__GetAlertEvaluationsRecord *p)
{
	if (::soap_read_ns1__GetAlertEvaluationsRecord(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GetAlertEvaluationsRecordResponse_DEFINED
#define SOAP_TYPE_ns1__GetAlertEvaluationsRecordResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__GetAlertEvaluationsRecordResponse(struct soap*, struct ns1__GetAlertEvaluationsRecordResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__GetAlertEvaluationsRecordResponse(struct soap*, const struct ns1__GetAlertEvaluationsRecordResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetAlertEvaluationsRecordResponse(struct soap*, const char*, int, const struct ns1__GetAlertEvaluationsRecordResponse *, const char*);
SOAP_FMAC3 struct ns1__GetAlertEvaluationsRecordResponse * SOAP_FMAC4 soap_in_ns1__GetAlertEvaluationsRecordResponse(struct soap*, const char*, struct ns1__GetAlertEvaluationsRecordResponse *, const char*);
SOAP_FMAC1 struct ns1__GetAlertEvaluationsRecordResponse * SOAP_FMAC2 soap_instantiate_ns1__GetAlertEvaluationsRecordResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__GetAlertEvaluationsRecordResponse * soap_new_ns1__GetAlertEvaluationsRecordResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetAlertEvaluationsRecordResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__GetAlertEvaluationsRecordResponse * soap_new_req_ns1__GetAlertEvaluationsRecordResponse(
	struct soap *soap,
	const std::string& _GetAlertEvaluationsRecordReturn)
{
	struct ns1__GetAlertEvaluationsRecordResponse *_p = ::soap_new_ns1__GetAlertEvaluationsRecordResponse(soap);
	if (_p)
	{	::soap_default_ns1__GetAlertEvaluationsRecordResponse(soap, _p);
		_p->_GetAlertEvaluationsRecordReturn = _GetAlertEvaluationsRecordReturn;
	}
	return _p;
}

inline struct ns1__GetAlertEvaluationsRecordResponse * soap_new_set_ns1__GetAlertEvaluationsRecordResponse(
	struct soap *soap,
	const std::string& _GetAlertEvaluationsRecordReturn)
{
	struct ns1__GetAlertEvaluationsRecordResponse *_p = ::soap_new_ns1__GetAlertEvaluationsRecordResponse(soap);
	if (_p)
	{	::soap_default_ns1__GetAlertEvaluationsRecordResponse(soap, _p);
		_p->_GetAlertEvaluationsRecordReturn = _GetAlertEvaluationsRecordReturn;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__GetAlertEvaluationsRecordResponse(struct soap*, const struct ns1__GetAlertEvaluationsRecordResponse *, const char*, const char*);

inline int soap_write_ns1__GetAlertEvaluationsRecordResponse(struct soap *soap, struct ns1__GetAlertEvaluationsRecordResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__GetAlertEvaluationsRecordResponse(soap, p), 0) || ::soap_put_ns1__GetAlertEvaluationsRecordResponse(soap, p, "ns1:GetAlertEvaluationsRecordResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetAlertEvaluationsRecordResponse(struct soap *soap, const char *URL, struct ns1__GetAlertEvaluationsRecordResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetAlertEvaluationsRecordResponse(soap, p), 0) || ::soap_put_ns1__GetAlertEvaluationsRecordResponse(soap, p, "ns1:GetAlertEvaluationsRecordResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__GetAlertEvaluationsRecordResponse(struct soap *soap, const char *URL, struct ns1__GetAlertEvaluationsRecordResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetAlertEvaluationsRecordResponse(soap, p), 0) || ::soap_put_ns1__GetAlertEvaluationsRecordResponse(soap, p, "ns1:GetAlertEvaluationsRecordResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetAlertEvaluationsRecordResponse(struct soap *soap, const char *URL, struct ns1__GetAlertEvaluationsRecordResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetAlertEvaluationsRecordResponse(soap, p), 0) || ::soap_put_ns1__GetAlertEvaluationsRecordResponse(soap, p, "ns1:GetAlertEvaluationsRecordResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__GetAlertEvaluationsRecordResponse * SOAP_FMAC4 soap_get_ns1__GetAlertEvaluationsRecordResponse(struct soap*, struct ns1__GetAlertEvaluationsRecordResponse *, const char*, const char*);

inline int soap_read_ns1__GetAlertEvaluationsRecordResponse(struct soap *soap, struct ns1__GetAlertEvaluationsRecordResponse *p)
{
	if (p)
	{	::soap_default_ns1__GetAlertEvaluationsRecordResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__GetAlertEvaluationsRecordResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetAlertEvaluationsRecordResponse(struct soap *soap, const char *URL, struct ns1__GetAlertEvaluationsRecordResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__GetAlertEvaluationsRecordResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GetAlertEvaluationsRecordResponse(struct soap *soap, struct ns1__GetAlertEvaluationsRecordResponse *p)
{
	if (::soap_read_ns1__GetAlertEvaluationsRecordResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GetAlertActionsRecord_DEFINED
#define SOAP_TYPE_ns1__GetAlertActionsRecord_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__GetAlertActionsRecord(struct soap*, struct ns1__GetAlertActionsRecord *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__GetAlertActionsRecord(struct soap*, const struct ns1__GetAlertActionsRecord *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetAlertActionsRecord(struct soap*, const char*, int, const struct ns1__GetAlertActionsRecord *, const char*);
SOAP_FMAC3 struct ns1__GetAlertActionsRecord * SOAP_FMAC4 soap_in_ns1__GetAlertActionsRecord(struct soap*, const char*, struct ns1__GetAlertActionsRecord *, const char*);
SOAP_FMAC1 struct ns1__GetAlertActionsRecord * SOAP_FMAC2 soap_instantiate_ns1__GetAlertActionsRecord(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__GetAlertActionsRecord * soap_new_ns1__GetAlertActionsRecord(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetAlertActionsRecord(soap, n, NULL, NULL, NULL);
}

inline struct ns1__GetAlertActionsRecord * soap_new_req_ns1__GetAlertActionsRecord(
	struct soap *soap,
	int _in0)
{
	struct ns1__GetAlertActionsRecord *_p = ::soap_new_ns1__GetAlertActionsRecord(soap);
	if (_p)
	{	::soap_default_ns1__GetAlertActionsRecord(soap, _p);
		_p->_in0 = _in0;
	}
	return _p;
}

inline struct ns1__GetAlertActionsRecord * soap_new_set_ns1__GetAlertActionsRecord(
	struct soap *soap,
	int _in0)
{
	struct ns1__GetAlertActionsRecord *_p = ::soap_new_ns1__GetAlertActionsRecord(soap);
	if (_p)
	{	::soap_default_ns1__GetAlertActionsRecord(soap, _p);
		_p->_in0 = _in0;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__GetAlertActionsRecord(struct soap*, const struct ns1__GetAlertActionsRecord *, const char*, const char*);

inline int soap_write_ns1__GetAlertActionsRecord(struct soap *soap, struct ns1__GetAlertActionsRecord const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__GetAlertActionsRecord(soap, p), 0) || ::soap_put_ns1__GetAlertActionsRecord(soap, p, "ns1:GetAlertActionsRecord", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetAlertActionsRecord(struct soap *soap, const char *URL, struct ns1__GetAlertActionsRecord const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetAlertActionsRecord(soap, p), 0) || ::soap_put_ns1__GetAlertActionsRecord(soap, p, "ns1:GetAlertActionsRecord", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__GetAlertActionsRecord(struct soap *soap, const char *URL, struct ns1__GetAlertActionsRecord const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetAlertActionsRecord(soap, p), 0) || ::soap_put_ns1__GetAlertActionsRecord(soap, p, "ns1:GetAlertActionsRecord", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetAlertActionsRecord(struct soap *soap, const char *URL, struct ns1__GetAlertActionsRecord const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetAlertActionsRecord(soap, p), 0) || ::soap_put_ns1__GetAlertActionsRecord(soap, p, "ns1:GetAlertActionsRecord", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__GetAlertActionsRecord * SOAP_FMAC4 soap_get_ns1__GetAlertActionsRecord(struct soap*, struct ns1__GetAlertActionsRecord *, const char*, const char*);

inline int soap_read_ns1__GetAlertActionsRecord(struct soap *soap, struct ns1__GetAlertActionsRecord *p)
{
	if (p)
	{	::soap_default_ns1__GetAlertActionsRecord(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__GetAlertActionsRecord(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetAlertActionsRecord(struct soap *soap, const char *URL, struct ns1__GetAlertActionsRecord *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__GetAlertActionsRecord(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GetAlertActionsRecord(struct soap *soap, struct ns1__GetAlertActionsRecord *p)
{
	if (::soap_read_ns1__GetAlertActionsRecord(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GetAlertActionsRecordResponse_DEFINED
#define SOAP_TYPE_ns1__GetAlertActionsRecordResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__GetAlertActionsRecordResponse(struct soap*, struct ns1__GetAlertActionsRecordResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__GetAlertActionsRecordResponse(struct soap*, const struct ns1__GetAlertActionsRecordResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetAlertActionsRecordResponse(struct soap*, const char*, int, const struct ns1__GetAlertActionsRecordResponse *, const char*);
SOAP_FMAC3 struct ns1__GetAlertActionsRecordResponse * SOAP_FMAC4 soap_in_ns1__GetAlertActionsRecordResponse(struct soap*, const char*, struct ns1__GetAlertActionsRecordResponse *, const char*);
SOAP_FMAC1 struct ns1__GetAlertActionsRecordResponse * SOAP_FMAC2 soap_instantiate_ns1__GetAlertActionsRecordResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__GetAlertActionsRecordResponse * soap_new_ns1__GetAlertActionsRecordResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetAlertActionsRecordResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__GetAlertActionsRecordResponse * soap_new_req_ns1__GetAlertActionsRecordResponse(
	struct soap *soap,
	const std::string& _GetAlertActionsRecordReturn)
{
	struct ns1__GetAlertActionsRecordResponse *_p = ::soap_new_ns1__GetAlertActionsRecordResponse(soap);
	if (_p)
	{	::soap_default_ns1__GetAlertActionsRecordResponse(soap, _p);
		_p->_GetAlertActionsRecordReturn = _GetAlertActionsRecordReturn;
	}
	return _p;
}

inline struct ns1__GetAlertActionsRecordResponse * soap_new_set_ns1__GetAlertActionsRecordResponse(
	struct soap *soap,
	const std::string& _GetAlertActionsRecordReturn)
{
	struct ns1__GetAlertActionsRecordResponse *_p = ::soap_new_ns1__GetAlertActionsRecordResponse(soap);
	if (_p)
	{	::soap_default_ns1__GetAlertActionsRecordResponse(soap, _p);
		_p->_GetAlertActionsRecordReturn = _GetAlertActionsRecordReturn;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__GetAlertActionsRecordResponse(struct soap*, const struct ns1__GetAlertActionsRecordResponse *, const char*, const char*);

inline int soap_write_ns1__GetAlertActionsRecordResponse(struct soap *soap, struct ns1__GetAlertActionsRecordResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__GetAlertActionsRecordResponse(soap, p), 0) || ::soap_put_ns1__GetAlertActionsRecordResponse(soap, p, "ns1:GetAlertActionsRecordResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetAlertActionsRecordResponse(struct soap *soap, const char *URL, struct ns1__GetAlertActionsRecordResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetAlertActionsRecordResponse(soap, p), 0) || ::soap_put_ns1__GetAlertActionsRecordResponse(soap, p, "ns1:GetAlertActionsRecordResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__GetAlertActionsRecordResponse(struct soap *soap, const char *URL, struct ns1__GetAlertActionsRecordResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetAlertActionsRecordResponse(soap, p), 0) || ::soap_put_ns1__GetAlertActionsRecordResponse(soap, p, "ns1:GetAlertActionsRecordResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetAlertActionsRecordResponse(struct soap *soap, const char *URL, struct ns1__GetAlertActionsRecordResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetAlertActionsRecordResponse(soap, p), 0) || ::soap_put_ns1__GetAlertActionsRecordResponse(soap, p, "ns1:GetAlertActionsRecordResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__GetAlertActionsRecordResponse * SOAP_FMAC4 soap_get_ns1__GetAlertActionsRecordResponse(struct soap*, struct ns1__GetAlertActionsRecordResponse *, const char*, const char*);

inline int soap_read_ns1__GetAlertActionsRecordResponse(struct soap *soap, struct ns1__GetAlertActionsRecordResponse *p)
{
	if (p)
	{	::soap_default_ns1__GetAlertActionsRecordResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__GetAlertActionsRecordResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetAlertActionsRecordResponse(struct soap *soap, const char *URL, struct ns1__GetAlertActionsRecordResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__GetAlertActionsRecordResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GetAlertActionsRecordResponse(struct soap *soap, struct ns1__GetAlertActionsRecordResponse *p)
{
	if (::soap_read_ns1__GetAlertActionsRecordResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GetAlertSchedulesRecord_DEFINED
#define SOAP_TYPE_ns1__GetAlertSchedulesRecord_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__GetAlertSchedulesRecord(struct soap*, struct ns1__GetAlertSchedulesRecord *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__GetAlertSchedulesRecord(struct soap*, const struct ns1__GetAlertSchedulesRecord *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetAlertSchedulesRecord(struct soap*, const char*, int, const struct ns1__GetAlertSchedulesRecord *, const char*);
SOAP_FMAC3 struct ns1__GetAlertSchedulesRecord * SOAP_FMAC4 soap_in_ns1__GetAlertSchedulesRecord(struct soap*, const char*, struct ns1__GetAlertSchedulesRecord *, const char*);
SOAP_FMAC1 struct ns1__GetAlertSchedulesRecord * SOAP_FMAC2 soap_instantiate_ns1__GetAlertSchedulesRecord(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__GetAlertSchedulesRecord * soap_new_ns1__GetAlertSchedulesRecord(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetAlertSchedulesRecord(soap, n, NULL, NULL, NULL);
}

inline struct ns1__GetAlertSchedulesRecord * soap_new_req_ns1__GetAlertSchedulesRecord(
	struct soap *soap,
	int _in0)
{
	struct ns1__GetAlertSchedulesRecord *_p = ::soap_new_ns1__GetAlertSchedulesRecord(soap);
	if (_p)
	{	::soap_default_ns1__GetAlertSchedulesRecord(soap, _p);
		_p->_in0 = _in0;
	}
	return _p;
}

inline struct ns1__GetAlertSchedulesRecord * soap_new_set_ns1__GetAlertSchedulesRecord(
	struct soap *soap,
	int _in0)
{
	struct ns1__GetAlertSchedulesRecord *_p = ::soap_new_ns1__GetAlertSchedulesRecord(soap);
	if (_p)
	{	::soap_default_ns1__GetAlertSchedulesRecord(soap, _p);
		_p->_in0 = _in0;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__GetAlertSchedulesRecord(struct soap*, const struct ns1__GetAlertSchedulesRecord *, const char*, const char*);

inline int soap_write_ns1__GetAlertSchedulesRecord(struct soap *soap, struct ns1__GetAlertSchedulesRecord const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__GetAlertSchedulesRecord(soap, p), 0) || ::soap_put_ns1__GetAlertSchedulesRecord(soap, p, "ns1:GetAlertSchedulesRecord", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetAlertSchedulesRecord(struct soap *soap, const char *URL, struct ns1__GetAlertSchedulesRecord const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetAlertSchedulesRecord(soap, p), 0) || ::soap_put_ns1__GetAlertSchedulesRecord(soap, p, "ns1:GetAlertSchedulesRecord", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__GetAlertSchedulesRecord(struct soap *soap, const char *URL, struct ns1__GetAlertSchedulesRecord const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetAlertSchedulesRecord(soap, p), 0) || ::soap_put_ns1__GetAlertSchedulesRecord(soap, p, "ns1:GetAlertSchedulesRecord", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetAlertSchedulesRecord(struct soap *soap, const char *URL, struct ns1__GetAlertSchedulesRecord const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetAlertSchedulesRecord(soap, p), 0) || ::soap_put_ns1__GetAlertSchedulesRecord(soap, p, "ns1:GetAlertSchedulesRecord", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__GetAlertSchedulesRecord * SOAP_FMAC4 soap_get_ns1__GetAlertSchedulesRecord(struct soap*, struct ns1__GetAlertSchedulesRecord *, const char*, const char*);

inline int soap_read_ns1__GetAlertSchedulesRecord(struct soap *soap, struct ns1__GetAlertSchedulesRecord *p)
{
	if (p)
	{	::soap_default_ns1__GetAlertSchedulesRecord(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__GetAlertSchedulesRecord(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetAlertSchedulesRecord(struct soap *soap, const char *URL, struct ns1__GetAlertSchedulesRecord *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__GetAlertSchedulesRecord(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GetAlertSchedulesRecord(struct soap *soap, struct ns1__GetAlertSchedulesRecord *p)
{
	if (::soap_read_ns1__GetAlertSchedulesRecord(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GetAlertSchedulesRecordResponse_DEFINED
#define SOAP_TYPE_ns1__GetAlertSchedulesRecordResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__GetAlertSchedulesRecordResponse(struct soap*, struct ns1__GetAlertSchedulesRecordResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__GetAlertSchedulesRecordResponse(struct soap*, const struct ns1__GetAlertSchedulesRecordResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetAlertSchedulesRecordResponse(struct soap*, const char*, int, const struct ns1__GetAlertSchedulesRecordResponse *, const char*);
SOAP_FMAC3 struct ns1__GetAlertSchedulesRecordResponse * SOAP_FMAC4 soap_in_ns1__GetAlertSchedulesRecordResponse(struct soap*, const char*, struct ns1__GetAlertSchedulesRecordResponse *, const char*);
SOAP_FMAC1 struct ns1__GetAlertSchedulesRecordResponse * SOAP_FMAC2 soap_instantiate_ns1__GetAlertSchedulesRecordResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__GetAlertSchedulesRecordResponse * soap_new_ns1__GetAlertSchedulesRecordResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetAlertSchedulesRecordResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__GetAlertSchedulesRecordResponse * soap_new_req_ns1__GetAlertSchedulesRecordResponse(
	struct soap *soap,
	const std::string& _GetAlertSchedulesRecordReturn)
{
	struct ns1__GetAlertSchedulesRecordResponse *_p = ::soap_new_ns1__GetAlertSchedulesRecordResponse(soap);
	if (_p)
	{	::soap_default_ns1__GetAlertSchedulesRecordResponse(soap, _p);
		_p->_GetAlertSchedulesRecordReturn = _GetAlertSchedulesRecordReturn;
	}
	return _p;
}

inline struct ns1__GetAlertSchedulesRecordResponse * soap_new_set_ns1__GetAlertSchedulesRecordResponse(
	struct soap *soap,
	const std::string& _GetAlertSchedulesRecordReturn)
{
	struct ns1__GetAlertSchedulesRecordResponse *_p = ::soap_new_ns1__GetAlertSchedulesRecordResponse(soap);
	if (_p)
	{	::soap_default_ns1__GetAlertSchedulesRecordResponse(soap, _p);
		_p->_GetAlertSchedulesRecordReturn = _GetAlertSchedulesRecordReturn;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__GetAlertSchedulesRecordResponse(struct soap*, const struct ns1__GetAlertSchedulesRecordResponse *, const char*, const char*);

inline int soap_write_ns1__GetAlertSchedulesRecordResponse(struct soap *soap, struct ns1__GetAlertSchedulesRecordResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__GetAlertSchedulesRecordResponse(soap, p), 0) || ::soap_put_ns1__GetAlertSchedulesRecordResponse(soap, p, "ns1:GetAlertSchedulesRecordResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetAlertSchedulesRecordResponse(struct soap *soap, const char *URL, struct ns1__GetAlertSchedulesRecordResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetAlertSchedulesRecordResponse(soap, p), 0) || ::soap_put_ns1__GetAlertSchedulesRecordResponse(soap, p, "ns1:GetAlertSchedulesRecordResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__GetAlertSchedulesRecordResponse(struct soap *soap, const char *URL, struct ns1__GetAlertSchedulesRecordResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetAlertSchedulesRecordResponse(soap, p), 0) || ::soap_put_ns1__GetAlertSchedulesRecordResponse(soap, p, "ns1:GetAlertSchedulesRecordResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetAlertSchedulesRecordResponse(struct soap *soap, const char *URL, struct ns1__GetAlertSchedulesRecordResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetAlertSchedulesRecordResponse(soap, p), 0) || ::soap_put_ns1__GetAlertSchedulesRecordResponse(soap, p, "ns1:GetAlertSchedulesRecordResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__GetAlertSchedulesRecordResponse * SOAP_FMAC4 soap_get_ns1__GetAlertSchedulesRecordResponse(struct soap*, struct ns1__GetAlertSchedulesRecordResponse *, const char*, const char*);

inline int soap_read_ns1__GetAlertSchedulesRecordResponse(struct soap *soap, struct ns1__GetAlertSchedulesRecordResponse *p)
{
	if (p)
	{	::soap_default_ns1__GetAlertSchedulesRecordResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__GetAlertSchedulesRecordResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetAlertSchedulesRecordResponse(struct soap *soap, const char *URL, struct ns1__GetAlertSchedulesRecordResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__GetAlertSchedulesRecordResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GetAlertSchedulesRecordResponse(struct soap *soap, struct ns1__GetAlertSchedulesRecordResponse *p)
{
	if (::soap_read_ns1__GetAlertSchedulesRecordResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GetAlertActionParameterRecord_DEFINED
#define SOAP_TYPE_ns1__GetAlertActionParameterRecord_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__GetAlertActionParameterRecord(struct soap*, struct ns1__GetAlertActionParameterRecord *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__GetAlertActionParameterRecord(struct soap*, const struct ns1__GetAlertActionParameterRecord *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetAlertActionParameterRecord(struct soap*, const char*, int, const struct ns1__GetAlertActionParameterRecord *, const char*);
SOAP_FMAC3 struct ns1__GetAlertActionParameterRecord * SOAP_FMAC4 soap_in_ns1__GetAlertActionParameterRecord(struct soap*, const char*, struct ns1__GetAlertActionParameterRecord *, const char*);
SOAP_FMAC1 struct ns1__GetAlertActionParameterRecord * SOAP_FMAC2 soap_instantiate_ns1__GetAlertActionParameterRecord(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__GetAlertActionParameterRecord * soap_new_ns1__GetAlertActionParameterRecord(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetAlertActionParameterRecord(soap, n, NULL, NULL, NULL);
}

inline struct ns1__GetAlertActionParameterRecord * soap_new_req_ns1__GetAlertActionParameterRecord(
	struct soap *soap,
	int _in0)
{
	struct ns1__GetAlertActionParameterRecord *_p = ::soap_new_ns1__GetAlertActionParameterRecord(soap);
	if (_p)
	{	::soap_default_ns1__GetAlertActionParameterRecord(soap, _p);
		_p->_in0 = _in0;
	}
	return _p;
}

inline struct ns1__GetAlertActionParameterRecord * soap_new_set_ns1__GetAlertActionParameterRecord(
	struct soap *soap,
	int _in0)
{
	struct ns1__GetAlertActionParameterRecord *_p = ::soap_new_ns1__GetAlertActionParameterRecord(soap);
	if (_p)
	{	::soap_default_ns1__GetAlertActionParameterRecord(soap, _p);
		_p->_in0 = _in0;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__GetAlertActionParameterRecord(struct soap*, const struct ns1__GetAlertActionParameterRecord *, const char*, const char*);

inline int soap_write_ns1__GetAlertActionParameterRecord(struct soap *soap, struct ns1__GetAlertActionParameterRecord const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__GetAlertActionParameterRecord(soap, p), 0) || ::soap_put_ns1__GetAlertActionParameterRecord(soap, p, "ns1:GetAlertActionParameterRecord", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetAlertActionParameterRecord(struct soap *soap, const char *URL, struct ns1__GetAlertActionParameterRecord const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetAlertActionParameterRecord(soap, p), 0) || ::soap_put_ns1__GetAlertActionParameterRecord(soap, p, "ns1:GetAlertActionParameterRecord", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__GetAlertActionParameterRecord(struct soap *soap, const char *URL, struct ns1__GetAlertActionParameterRecord const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetAlertActionParameterRecord(soap, p), 0) || ::soap_put_ns1__GetAlertActionParameterRecord(soap, p, "ns1:GetAlertActionParameterRecord", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetAlertActionParameterRecord(struct soap *soap, const char *URL, struct ns1__GetAlertActionParameterRecord const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetAlertActionParameterRecord(soap, p), 0) || ::soap_put_ns1__GetAlertActionParameterRecord(soap, p, "ns1:GetAlertActionParameterRecord", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__GetAlertActionParameterRecord * SOAP_FMAC4 soap_get_ns1__GetAlertActionParameterRecord(struct soap*, struct ns1__GetAlertActionParameterRecord *, const char*, const char*);

inline int soap_read_ns1__GetAlertActionParameterRecord(struct soap *soap, struct ns1__GetAlertActionParameterRecord *p)
{
	if (p)
	{	::soap_default_ns1__GetAlertActionParameterRecord(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__GetAlertActionParameterRecord(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetAlertActionParameterRecord(struct soap *soap, const char *URL, struct ns1__GetAlertActionParameterRecord *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__GetAlertActionParameterRecord(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GetAlertActionParameterRecord(struct soap *soap, struct ns1__GetAlertActionParameterRecord *p)
{
	if (::soap_read_ns1__GetAlertActionParameterRecord(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GetAlertActionParameterRecordResponse_DEFINED
#define SOAP_TYPE_ns1__GetAlertActionParameterRecordResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__GetAlertActionParameterRecordResponse(struct soap*, struct ns1__GetAlertActionParameterRecordResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__GetAlertActionParameterRecordResponse(struct soap*, const struct ns1__GetAlertActionParameterRecordResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetAlertActionParameterRecordResponse(struct soap*, const char*, int, const struct ns1__GetAlertActionParameterRecordResponse *, const char*);
SOAP_FMAC3 struct ns1__GetAlertActionParameterRecordResponse * SOAP_FMAC4 soap_in_ns1__GetAlertActionParameterRecordResponse(struct soap*, const char*, struct ns1__GetAlertActionParameterRecordResponse *, const char*);
SOAP_FMAC1 struct ns1__GetAlertActionParameterRecordResponse * SOAP_FMAC2 soap_instantiate_ns1__GetAlertActionParameterRecordResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__GetAlertActionParameterRecordResponse * soap_new_ns1__GetAlertActionParameterRecordResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetAlertActionParameterRecordResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__GetAlertActionParameterRecordResponse * soap_new_req_ns1__GetAlertActionParameterRecordResponse(
	struct soap *soap,
	const std::string& _GetAlertActionParameterRecordReturn)
{
	struct ns1__GetAlertActionParameterRecordResponse *_p = ::soap_new_ns1__GetAlertActionParameterRecordResponse(soap);
	if (_p)
	{	::soap_default_ns1__GetAlertActionParameterRecordResponse(soap, _p);
		_p->_GetAlertActionParameterRecordReturn = _GetAlertActionParameterRecordReturn;
	}
	return _p;
}

inline struct ns1__GetAlertActionParameterRecordResponse * soap_new_set_ns1__GetAlertActionParameterRecordResponse(
	struct soap *soap,
	const std::string& _GetAlertActionParameterRecordReturn)
{
	struct ns1__GetAlertActionParameterRecordResponse *_p = ::soap_new_ns1__GetAlertActionParameterRecordResponse(soap);
	if (_p)
	{	::soap_default_ns1__GetAlertActionParameterRecordResponse(soap, _p);
		_p->_GetAlertActionParameterRecordReturn = _GetAlertActionParameterRecordReturn;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__GetAlertActionParameterRecordResponse(struct soap*, const struct ns1__GetAlertActionParameterRecordResponse *, const char*, const char*);

inline int soap_write_ns1__GetAlertActionParameterRecordResponse(struct soap *soap, struct ns1__GetAlertActionParameterRecordResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__GetAlertActionParameterRecordResponse(soap, p), 0) || ::soap_put_ns1__GetAlertActionParameterRecordResponse(soap, p, "ns1:GetAlertActionParameterRecordResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetAlertActionParameterRecordResponse(struct soap *soap, const char *URL, struct ns1__GetAlertActionParameterRecordResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetAlertActionParameterRecordResponse(soap, p), 0) || ::soap_put_ns1__GetAlertActionParameterRecordResponse(soap, p, "ns1:GetAlertActionParameterRecordResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__GetAlertActionParameterRecordResponse(struct soap *soap, const char *URL, struct ns1__GetAlertActionParameterRecordResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetAlertActionParameterRecordResponse(soap, p), 0) || ::soap_put_ns1__GetAlertActionParameterRecordResponse(soap, p, "ns1:GetAlertActionParameterRecordResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetAlertActionParameterRecordResponse(struct soap *soap, const char *URL, struct ns1__GetAlertActionParameterRecordResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetAlertActionParameterRecordResponse(soap, p), 0) || ::soap_put_ns1__GetAlertActionParameterRecordResponse(soap, p, "ns1:GetAlertActionParameterRecordResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__GetAlertActionParameterRecordResponse * SOAP_FMAC4 soap_get_ns1__GetAlertActionParameterRecordResponse(struct soap*, struct ns1__GetAlertActionParameterRecordResponse *, const char*, const char*);

inline int soap_read_ns1__GetAlertActionParameterRecordResponse(struct soap *soap, struct ns1__GetAlertActionParameterRecordResponse *p)
{
	if (p)
	{	::soap_default_ns1__GetAlertActionParameterRecordResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__GetAlertActionParameterRecordResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetAlertActionParameterRecordResponse(struct soap *soap, const char *URL, struct ns1__GetAlertActionParameterRecordResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__GetAlertActionParameterRecordResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GetAlertActionParameterRecordResponse(struct soap *soap, struct ns1__GetAlertActionParameterRecordResponse *p)
{
	if (::soap_read_ns1__GetAlertActionParameterRecordResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GetAlertActionFieldsRecord_DEFINED
#define SOAP_TYPE_ns1__GetAlertActionFieldsRecord_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__GetAlertActionFieldsRecord(struct soap*, struct ns1__GetAlertActionFieldsRecord *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__GetAlertActionFieldsRecord(struct soap*, const struct ns1__GetAlertActionFieldsRecord *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetAlertActionFieldsRecord(struct soap*, const char*, int, const struct ns1__GetAlertActionFieldsRecord *, const char*);
SOAP_FMAC3 struct ns1__GetAlertActionFieldsRecord * SOAP_FMAC4 soap_in_ns1__GetAlertActionFieldsRecord(struct soap*, const char*, struct ns1__GetAlertActionFieldsRecord *, const char*);
SOAP_FMAC1 struct ns1__GetAlertActionFieldsRecord * SOAP_FMAC2 soap_instantiate_ns1__GetAlertActionFieldsRecord(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__GetAlertActionFieldsRecord * soap_new_ns1__GetAlertActionFieldsRecord(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetAlertActionFieldsRecord(soap, n, NULL, NULL, NULL);
}

inline struct ns1__GetAlertActionFieldsRecord * soap_new_req_ns1__GetAlertActionFieldsRecord(
	struct soap *soap,
	int _in0)
{
	struct ns1__GetAlertActionFieldsRecord *_p = ::soap_new_ns1__GetAlertActionFieldsRecord(soap);
	if (_p)
	{	::soap_default_ns1__GetAlertActionFieldsRecord(soap, _p);
		_p->_in0 = _in0;
	}
	return _p;
}

inline struct ns1__GetAlertActionFieldsRecord * soap_new_set_ns1__GetAlertActionFieldsRecord(
	struct soap *soap,
	int _in0)
{
	struct ns1__GetAlertActionFieldsRecord *_p = ::soap_new_ns1__GetAlertActionFieldsRecord(soap);
	if (_p)
	{	::soap_default_ns1__GetAlertActionFieldsRecord(soap, _p);
		_p->_in0 = _in0;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__GetAlertActionFieldsRecord(struct soap*, const struct ns1__GetAlertActionFieldsRecord *, const char*, const char*);

inline int soap_write_ns1__GetAlertActionFieldsRecord(struct soap *soap, struct ns1__GetAlertActionFieldsRecord const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__GetAlertActionFieldsRecord(soap, p), 0) || ::soap_put_ns1__GetAlertActionFieldsRecord(soap, p, "ns1:GetAlertActionFieldsRecord", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetAlertActionFieldsRecord(struct soap *soap, const char *URL, struct ns1__GetAlertActionFieldsRecord const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetAlertActionFieldsRecord(soap, p), 0) || ::soap_put_ns1__GetAlertActionFieldsRecord(soap, p, "ns1:GetAlertActionFieldsRecord", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__GetAlertActionFieldsRecord(struct soap *soap, const char *URL, struct ns1__GetAlertActionFieldsRecord const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetAlertActionFieldsRecord(soap, p), 0) || ::soap_put_ns1__GetAlertActionFieldsRecord(soap, p, "ns1:GetAlertActionFieldsRecord", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetAlertActionFieldsRecord(struct soap *soap, const char *URL, struct ns1__GetAlertActionFieldsRecord const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetAlertActionFieldsRecord(soap, p), 0) || ::soap_put_ns1__GetAlertActionFieldsRecord(soap, p, "ns1:GetAlertActionFieldsRecord", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__GetAlertActionFieldsRecord * SOAP_FMAC4 soap_get_ns1__GetAlertActionFieldsRecord(struct soap*, struct ns1__GetAlertActionFieldsRecord *, const char*, const char*);

inline int soap_read_ns1__GetAlertActionFieldsRecord(struct soap *soap, struct ns1__GetAlertActionFieldsRecord *p)
{
	if (p)
	{	::soap_default_ns1__GetAlertActionFieldsRecord(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__GetAlertActionFieldsRecord(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetAlertActionFieldsRecord(struct soap *soap, const char *URL, struct ns1__GetAlertActionFieldsRecord *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__GetAlertActionFieldsRecord(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GetAlertActionFieldsRecord(struct soap *soap, struct ns1__GetAlertActionFieldsRecord *p)
{
	if (::soap_read_ns1__GetAlertActionFieldsRecord(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GetAlertActionFieldsRecordResponse_DEFINED
#define SOAP_TYPE_ns1__GetAlertActionFieldsRecordResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__GetAlertActionFieldsRecordResponse(struct soap*, struct ns1__GetAlertActionFieldsRecordResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__GetAlertActionFieldsRecordResponse(struct soap*, const struct ns1__GetAlertActionFieldsRecordResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetAlertActionFieldsRecordResponse(struct soap*, const char*, int, const struct ns1__GetAlertActionFieldsRecordResponse *, const char*);
SOAP_FMAC3 struct ns1__GetAlertActionFieldsRecordResponse * SOAP_FMAC4 soap_in_ns1__GetAlertActionFieldsRecordResponse(struct soap*, const char*, struct ns1__GetAlertActionFieldsRecordResponse *, const char*);
SOAP_FMAC1 struct ns1__GetAlertActionFieldsRecordResponse * SOAP_FMAC2 soap_instantiate_ns1__GetAlertActionFieldsRecordResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__GetAlertActionFieldsRecordResponse * soap_new_ns1__GetAlertActionFieldsRecordResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetAlertActionFieldsRecordResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__GetAlertActionFieldsRecordResponse * soap_new_req_ns1__GetAlertActionFieldsRecordResponse(
	struct soap *soap,
	const std::string& _GetAlertActionFieldsRecordReturn)
{
	struct ns1__GetAlertActionFieldsRecordResponse *_p = ::soap_new_ns1__GetAlertActionFieldsRecordResponse(soap);
	if (_p)
	{	::soap_default_ns1__GetAlertActionFieldsRecordResponse(soap, _p);
		_p->_GetAlertActionFieldsRecordReturn = _GetAlertActionFieldsRecordReturn;
	}
	return _p;
}

inline struct ns1__GetAlertActionFieldsRecordResponse * soap_new_set_ns1__GetAlertActionFieldsRecordResponse(
	struct soap *soap,
	const std::string& _GetAlertActionFieldsRecordReturn)
{
	struct ns1__GetAlertActionFieldsRecordResponse *_p = ::soap_new_ns1__GetAlertActionFieldsRecordResponse(soap);
	if (_p)
	{	::soap_default_ns1__GetAlertActionFieldsRecordResponse(soap, _p);
		_p->_GetAlertActionFieldsRecordReturn = _GetAlertActionFieldsRecordReturn;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__GetAlertActionFieldsRecordResponse(struct soap*, const struct ns1__GetAlertActionFieldsRecordResponse *, const char*, const char*);

inline int soap_write_ns1__GetAlertActionFieldsRecordResponse(struct soap *soap, struct ns1__GetAlertActionFieldsRecordResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__GetAlertActionFieldsRecordResponse(soap, p), 0) || ::soap_put_ns1__GetAlertActionFieldsRecordResponse(soap, p, "ns1:GetAlertActionFieldsRecordResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetAlertActionFieldsRecordResponse(struct soap *soap, const char *URL, struct ns1__GetAlertActionFieldsRecordResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetAlertActionFieldsRecordResponse(soap, p), 0) || ::soap_put_ns1__GetAlertActionFieldsRecordResponse(soap, p, "ns1:GetAlertActionFieldsRecordResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__GetAlertActionFieldsRecordResponse(struct soap *soap, const char *URL, struct ns1__GetAlertActionFieldsRecordResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetAlertActionFieldsRecordResponse(soap, p), 0) || ::soap_put_ns1__GetAlertActionFieldsRecordResponse(soap, p, "ns1:GetAlertActionFieldsRecordResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetAlertActionFieldsRecordResponse(struct soap *soap, const char *URL, struct ns1__GetAlertActionFieldsRecordResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetAlertActionFieldsRecordResponse(soap, p), 0) || ::soap_put_ns1__GetAlertActionFieldsRecordResponse(soap, p, "ns1:GetAlertActionFieldsRecordResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__GetAlertActionFieldsRecordResponse * SOAP_FMAC4 soap_get_ns1__GetAlertActionFieldsRecordResponse(struct soap*, struct ns1__GetAlertActionFieldsRecordResponse *, const char*, const char*);

inline int soap_read_ns1__GetAlertActionFieldsRecordResponse(struct soap *soap, struct ns1__GetAlertActionFieldsRecordResponse *p)
{
	if (p)
	{	::soap_default_ns1__GetAlertActionFieldsRecordResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__GetAlertActionFieldsRecordResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetAlertActionFieldsRecordResponse(struct soap *soap, const char *URL, struct ns1__GetAlertActionFieldsRecordResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__GetAlertActionFieldsRecordResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GetAlertActionFieldsRecordResponse(struct soap *soap, struct ns1__GetAlertActionFieldsRecordResponse *p)
{
	if (::soap_read_ns1__GetAlertActionFieldsRecordResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GetTlkpDocumentTypesRecord_DEFINED
#define SOAP_TYPE_ns1__GetTlkpDocumentTypesRecord_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__GetTlkpDocumentTypesRecord(struct soap*, struct ns1__GetTlkpDocumentTypesRecord *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__GetTlkpDocumentTypesRecord(struct soap*, const struct ns1__GetTlkpDocumentTypesRecord *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetTlkpDocumentTypesRecord(struct soap*, const char*, int, const struct ns1__GetTlkpDocumentTypesRecord *, const char*);
SOAP_FMAC3 struct ns1__GetTlkpDocumentTypesRecord * SOAP_FMAC4 soap_in_ns1__GetTlkpDocumentTypesRecord(struct soap*, const char*, struct ns1__GetTlkpDocumentTypesRecord *, const char*);
SOAP_FMAC1 struct ns1__GetTlkpDocumentTypesRecord * SOAP_FMAC2 soap_instantiate_ns1__GetTlkpDocumentTypesRecord(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__GetTlkpDocumentTypesRecord * soap_new_ns1__GetTlkpDocumentTypesRecord(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetTlkpDocumentTypesRecord(soap, n, NULL, NULL, NULL);
}

inline struct ns1__GetTlkpDocumentTypesRecord * soap_new_req_ns1__GetTlkpDocumentTypesRecord(
	struct soap *soap)
{
	struct ns1__GetTlkpDocumentTypesRecord *_p = ::soap_new_ns1__GetTlkpDocumentTypesRecord(soap);
	if (_p)
	{	::soap_default_ns1__GetTlkpDocumentTypesRecord(soap, _p);
	}
	return _p;
}

inline struct ns1__GetTlkpDocumentTypesRecord * soap_new_set_ns1__GetTlkpDocumentTypesRecord(
	struct soap *soap)
{
	struct ns1__GetTlkpDocumentTypesRecord *_p = ::soap_new_ns1__GetTlkpDocumentTypesRecord(soap);
	if (_p)
	{	::soap_default_ns1__GetTlkpDocumentTypesRecord(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__GetTlkpDocumentTypesRecord(struct soap*, const struct ns1__GetTlkpDocumentTypesRecord *, const char*, const char*);

inline int soap_write_ns1__GetTlkpDocumentTypesRecord(struct soap *soap, struct ns1__GetTlkpDocumentTypesRecord const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__GetTlkpDocumentTypesRecord(soap, p), 0) || ::soap_put_ns1__GetTlkpDocumentTypesRecord(soap, p, "ns1:GetTlkpDocumentTypesRecord", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetTlkpDocumentTypesRecord(struct soap *soap, const char *URL, struct ns1__GetTlkpDocumentTypesRecord const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetTlkpDocumentTypesRecord(soap, p), 0) || ::soap_put_ns1__GetTlkpDocumentTypesRecord(soap, p, "ns1:GetTlkpDocumentTypesRecord", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__GetTlkpDocumentTypesRecord(struct soap *soap, const char *URL, struct ns1__GetTlkpDocumentTypesRecord const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetTlkpDocumentTypesRecord(soap, p), 0) || ::soap_put_ns1__GetTlkpDocumentTypesRecord(soap, p, "ns1:GetTlkpDocumentTypesRecord", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetTlkpDocumentTypesRecord(struct soap *soap, const char *URL, struct ns1__GetTlkpDocumentTypesRecord const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetTlkpDocumentTypesRecord(soap, p), 0) || ::soap_put_ns1__GetTlkpDocumentTypesRecord(soap, p, "ns1:GetTlkpDocumentTypesRecord", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__GetTlkpDocumentTypesRecord * SOAP_FMAC4 soap_get_ns1__GetTlkpDocumentTypesRecord(struct soap*, struct ns1__GetTlkpDocumentTypesRecord *, const char*, const char*);

inline int soap_read_ns1__GetTlkpDocumentTypesRecord(struct soap *soap, struct ns1__GetTlkpDocumentTypesRecord *p)
{
	if (p)
	{	::soap_default_ns1__GetTlkpDocumentTypesRecord(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__GetTlkpDocumentTypesRecord(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetTlkpDocumentTypesRecord(struct soap *soap, const char *URL, struct ns1__GetTlkpDocumentTypesRecord *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__GetTlkpDocumentTypesRecord(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GetTlkpDocumentTypesRecord(struct soap *soap, struct ns1__GetTlkpDocumentTypesRecord *p)
{
	if (::soap_read_ns1__GetTlkpDocumentTypesRecord(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GetTlkpDocumentTypesRecordResponse_DEFINED
#define SOAP_TYPE_ns1__GetTlkpDocumentTypesRecordResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__GetTlkpDocumentTypesRecordResponse(struct soap*, struct ns1__GetTlkpDocumentTypesRecordResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__GetTlkpDocumentTypesRecordResponse(struct soap*, const struct ns1__GetTlkpDocumentTypesRecordResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetTlkpDocumentTypesRecordResponse(struct soap*, const char*, int, const struct ns1__GetTlkpDocumentTypesRecordResponse *, const char*);
SOAP_FMAC3 struct ns1__GetTlkpDocumentTypesRecordResponse * SOAP_FMAC4 soap_in_ns1__GetTlkpDocumentTypesRecordResponse(struct soap*, const char*, struct ns1__GetTlkpDocumentTypesRecordResponse *, const char*);
SOAP_FMAC1 struct ns1__GetTlkpDocumentTypesRecordResponse * SOAP_FMAC2 soap_instantiate_ns1__GetTlkpDocumentTypesRecordResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__GetTlkpDocumentTypesRecordResponse * soap_new_ns1__GetTlkpDocumentTypesRecordResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetTlkpDocumentTypesRecordResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__GetTlkpDocumentTypesRecordResponse * soap_new_req_ns1__GetTlkpDocumentTypesRecordResponse(
	struct soap *soap,
	const std::string& GetTlkpDocumentTypesRecordReturn)
{
	struct ns1__GetTlkpDocumentTypesRecordResponse *_p = ::soap_new_ns1__GetTlkpDocumentTypesRecordResponse(soap);
	if (_p)
	{	::soap_default_ns1__GetTlkpDocumentTypesRecordResponse(soap, _p);
		_p->GetTlkpDocumentTypesRecordReturn = GetTlkpDocumentTypesRecordReturn;
	}
	return _p;
}

inline struct ns1__GetTlkpDocumentTypesRecordResponse * soap_new_set_ns1__GetTlkpDocumentTypesRecordResponse(
	struct soap *soap,
	const std::string& GetTlkpDocumentTypesRecordReturn)
{
	struct ns1__GetTlkpDocumentTypesRecordResponse *_p = ::soap_new_ns1__GetTlkpDocumentTypesRecordResponse(soap);
	if (_p)
	{	::soap_default_ns1__GetTlkpDocumentTypesRecordResponse(soap, _p);
		_p->GetTlkpDocumentTypesRecordReturn = GetTlkpDocumentTypesRecordReturn;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__GetTlkpDocumentTypesRecordResponse(struct soap*, const struct ns1__GetTlkpDocumentTypesRecordResponse *, const char*, const char*);

inline int soap_write_ns1__GetTlkpDocumentTypesRecordResponse(struct soap *soap, struct ns1__GetTlkpDocumentTypesRecordResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__GetTlkpDocumentTypesRecordResponse(soap, p), 0) || ::soap_put_ns1__GetTlkpDocumentTypesRecordResponse(soap, p, "ns1:GetTlkpDocumentTypesRecordResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetTlkpDocumentTypesRecordResponse(struct soap *soap, const char *URL, struct ns1__GetTlkpDocumentTypesRecordResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetTlkpDocumentTypesRecordResponse(soap, p), 0) || ::soap_put_ns1__GetTlkpDocumentTypesRecordResponse(soap, p, "ns1:GetTlkpDocumentTypesRecordResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__GetTlkpDocumentTypesRecordResponse(struct soap *soap, const char *URL, struct ns1__GetTlkpDocumentTypesRecordResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetTlkpDocumentTypesRecordResponse(soap, p), 0) || ::soap_put_ns1__GetTlkpDocumentTypesRecordResponse(soap, p, "ns1:GetTlkpDocumentTypesRecordResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetTlkpDocumentTypesRecordResponse(struct soap *soap, const char *URL, struct ns1__GetTlkpDocumentTypesRecordResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetTlkpDocumentTypesRecordResponse(soap, p), 0) || ::soap_put_ns1__GetTlkpDocumentTypesRecordResponse(soap, p, "ns1:GetTlkpDocumentTypesRecordResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__GetTlkpDocumentTypesRecordResponse * SOAP_FMAC4 soap_get_ns1__GetTlkpDocumentTypesRecordResponse(struct soap*, struct ns1__GetTlkpDocumentTypesRecordResponse *, const char*, const char*);

inline int soap_read_ns1__GetTlkpDocumentTypesRecordResponse(struct soap *soap, struct ns1__GetTlkpDocumentTypesRecordResponse *p)
{
	if (p)
	{	::soap_default_ns1__GetTlkpDocumentTypesRecordResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__GetTlkpDocumentTypesRecordResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetTlkpDocumentTypesRecordResponse(struct soap *soap, const char *URL, struct ns1__GetTlkpDocumentTypesRecordResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__GetTlkpDocumentTypesRecordResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GetTlkpDocumentTypesRecordResponse(struct soap *soap, struct ns1__GetTlkpDocumentTypesRecordResponse *p)
{
	if (::soap_read_ns1__GetTlkpDocumentTypesRecordResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GetTlkpDocumentTypesRecordByClientType_DEFINED
#define SOAP_TYPE_ns1__GetTlkpDocumentTypesRecordByClientType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__GetTlkpDocumentTypesRecordByClientType(struct soap*, struct ns1__GetTlkpDocumentTypesRecordByClientType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__GetTlkpDocumentTypesRecordByClientType(struct soap*, const struct ns1__GetTlkpDocumentTypesRecordByClientType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetTlkpDocumentTypesRecordByClientType(struct soap*, const char*, int, const struct ns1__GetTlkpDocumentTypesRecordByClientType *, const char*);
SOAP_FMAC3 struct ns1__GetTlkpDocumentTypesRecordByClientType * SOAP_FMAC4 soap_in_ns1__GetTlkpDocumentTypesRecordByClientType(struct soap*, const char*, struct ns1__GetTlkpDocumentTypesRecordByClientType *, const char*);
SOAP_FMAC1 struct ns1__GetTlkpDocumentTypesRecordByClientType * SOAP_FMAC2 soap_instantiate_ns1__GetTlkpDocumentTypesRecordByClientType(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__GetTlkpDocumentTypesRecordByClientType * soap_new_ns1__GetTlkpDocumentTypesRecordByClientType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetTlkpDocumentTypesRecordByClientType(soap, n, NULL, NULL, NULL);
}

inline struct ns1__GetTlkpDocumentTypesRecordByClientType * soap_new_req_ns1__GetTlkpDocumentTypesRecordByClientType(
	struct soap *soap,
	int _in0)
{
	struct ns1__GetTlkpDocumentTypesRecordByClientType *_p = ::soap_new_ns1__GetTlkpDocumentTypesRecordByClientType(soap);
	if (_p)
	{	::soap_default_ns1__GetTlkpDocumentTypesRecordByClientType(soap, _p);
		_p->_in0 = _in0;
	}
	return _p;
}

inline struct ns1__GetTlkpDocumentTypesRecordByClientType * soap_new_set_ns1__GetTlkpDocumentTypesRecordByClientType(
	struct soap *soap,
	int _in0)
{
	struct ns1__GetTlkpDocumentTypesRecordByClientType *_p = ::soap_new_ns1__GetTlkpDocumentTypesRecordByClientType(soap);
	if (_p)
	{	::soap_default_ns1__GetTlkpDocumentTypesRecordByClientType(soap, _p);
		_p->_in0 = _in0;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__GetTlkpDocumentTypesRecordByClientType(struct soap*, const struct ns1__GetTlkpDocumentTypesRecordByClientType *, const char*, const char*);

inline int soap_write_ns1__GetTlkpDocumentTypesRecordByClientType(struct soap *soap, struct ns1__GetTlkpDocumentTypesRecordByClientType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__GetTlkpDocumentTypesRecordByClientType(soap, p), 0) || ::soap_put_ns1__GetTlkpDocumentTypesRecordByClientType(soap, p, "ns1:GetTlkpDocumentTypesRecordByClientType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetTlkpDocumentTypesRecordByClientType(struct soap *soap, const char *URL, struct ns1__GetTlkpDocumentTypesRecordByClientType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetTlkpDocumentTypesRecordByClientType(soap, p), 0) || ::soap_put_ns1__GetTlkpDocumentTypesRecordByClientType(soap, p, "ns1:GetTlkpDocumentTypesRecordByClientType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__GetTlkpDocumentTypesRecordByClientType(struct soap *soap, const char *URL, struct ns1__GetTlkpDocumentTypesRecordByClientType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetTlkpDocumentTypesRecordByClientType(soap, p), 0) || ::soap_put_ns1__GetTlkpDocumentTypesRecordByClientType(soap, p, "ns1:GetTlkpDocumentTypesRecordByClientType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetTlkpDocumentTypesRecordByClientType(struct soap *soap, const char *URL, struct ns1__GetTlkpDocumentTypesRecordByClientType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetTlkpDocumentTypesRecordByClientType(soap, p), 0) || ::soap_put_ns1__GetTlkpDocumentTypesRecordByClientType(soap, p, "ns1:GetTlkpDocumentTypesRecordByClientType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__GetTlkpDocumentTypesRecordByClientType * SOAP_FMAC4 soap_get_ns1__GetTlkpDocumentTypesRecordByClientType(struct soap*, struct ns1__GetTlkpDocumentTypesRecordByClientType *, const char*, const char*);

inline int soap_read_ns1__GetTlkpDocumentTypesRecordByClientType(struct soap *soap, struct ns1__GetTlkpDocumentTypesRecordByClientType *p)
{
	if (p)
	{	::soap_default_ns1__GetTlkpDocumentTypesRecordByClientType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__GetTlkpDocumentTypesRecordByClientType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetTlkpDocumentTypesRecordByClientType(struct soap *soap, const char *URL, struct ns1__GetTlkpDocumentTypesRecordByClientType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__GetTlkpDocumentTypesRecordByClientType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GetTlkpDocumentTypesRecordByClientType(struct soap *soap, struct ns1__GetTlkpDocumentTypesRecordByClientType *p)
{
	if (::soap_read_ns1__GetTlkpDocumentTypesRecordByClientType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GetTlkpDocumentTypesRecordByClientTypeResponse_DEFINED
#define SOAP_TYPE_ns1__GetTlkpDocumentTypesRecordByClientTypeResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__GetTlkpDocumentTypesRecordByClientTypeResponse(struct soap*, struct ns1__GetTlkpDocumentTypesRecordByClientTypeResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__GetTlkpDocumentTypesRecordByClientTypeResponse(struct soap*, const struct ns1__GetTlkpDocumentTypesRecordByClientTypeResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetTlkpDocumentTypesRecordByClientTypeResponse(struct soap*, const char*, int, const struct ns1__GetTlkpDocumentTypesRecordByClientTypeResponse *, const char*);
SOAP_FMAC3 struct ns1__GetTlkpDocumentTypesRecordByClientTypeResponse * SOAP_FMAC4 soap_in_ns1__GetTlkpDocumentTypesRecordByClientTypeResponse(struct soap*, const char*, struct ns1__GetTlkpDocumentTypesRecordByClientTypeResponse *, const char*);
SOAP_FMAC1 struct ns1__GetTlkpDocumentTypesRecordByClientTypeResponse * SOAP_FMAC2 soap_instantiate_ns1__GetTlkpDocumentTypesRecordByClientTypeResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__GetTlkpDocumentTypesRecordByClientTypeResponse * soap_new_ns1__GetTlkpDocumentTypesRecordByClientTypeResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetTlkpDocumentTypesRecordByClientTypeResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__GetTlkpDocumentTypesRecordByClientTypeResponse * soap_new_req_ns1__GetTlkpDocumentTypesRecordByClientTypeResponse(
	struct soap *soap,
	const std::string& _GetTlkpDocumentTypesRecordByClientTypeReturn)
{
	struct ns1__GetTlkpDocumentTypesRecordByClientTypeResponse *_p = ::soap_new_ns1__GetTlkpDocumentTypesRecordByClientTypeResponse(soap);
	if (_p)
	{	::soap_default_ns1__GetTlkpDocumentTypesRecordByClientTypeResponse(soap, _p);
		_p->_GetTlkpDocumentTypesRecordByClientTypeReturn = _GetTlkpDocumentTypesRecordByClientTypeReturn;
	}
	return _p;
}

inline struct ns1__GetTlkpDocumentTypesRecordByClientTypeResponse * soap_new_set_ns1__GetTlkpDocumentTypesRecordByClientTypeResponse(
	struct soap *soap,
	const std::string& _GetTlkpDocumentTypesRecordByClientTypeReturn)
{
	struct ns1__GetTlkpDocumentTypesRecordByClientTypeResponse *_p = ::soap_new_ns1__GetTlkpDocumentTypesRecordByClientTypeResponse(soap);
	if (_p)
	{	::soap_default_ns1__GetTlkpDocumentTypesRecordByClientTypeResponse(soap, _p);
		_p->_GetTlkpDocumentTypesRecordByClientTypeReturn = _GetTlkpDocumentTypesRecordByClientTypeReturn;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__GetTlkpDocumentTypesRecordByClientTypeResponse(struct soap*, const struct ns1__GetTlkpDocumentTypesRecordByClientTypeResponse *, const char*, const char*);

inline int soap_write_ns1__GetTlkpDocumentTypesRecordByClientTypeResponse(struct soap *soap, struct ns1__GetTlkpDocumentTypesRecordByClientTypeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__GetTlkpDocumentTypesRecordByClientTypeResponse(soap, p), 0) || ::soap_put_ns1__GetTlkpDocumentTypesRecordByClientTypeResponse(soap, p, "ns1:GetTlkpDocumentTypesRecordByClientTypeResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetTlkpDocumentTypesRecordByClientTypeResponse(struct soap *soap, const char *URL, struct ns1__GetTlkpDocumentTypesRecordByClientTypeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetTlkpDocumentTypesRecordByClientTypeResponse(soap, p), 0) || ::soap_put_ns1__GetTlkpDocumentTypesRecordByClientTypeResponse(soap, p, "ns1:GetTlkpDocumentTypesRecordByClientTypeResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__GetTlkpDocumentTypesRecordByClientTypeResponse(struct soap *soap, const char *URL, struct ns1__GetTlkpDocumentTypesRecordByClientTypeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetTlkpDocumentTypesRecordByClientTypeResponse(soap, p), 0) || ::soap_put_ns1__GetTlkpDocumentTypesRecordByClientTypeResponse(soap, p, "ns1:GetTlkpDocumentTypesRecordByClientTypeResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetTlkpDocumentTypesRecordByClientTypeResponse(struct soap *soap, const char *URL, struct ns1__GetTlkpDocumentTypesRecordByClientTypeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetTlkpDocumentTypesRecordByClientTypeResponse(soap, p), 0) || ::soap_put_ns1__GetTlkpDocumentTypesRecordByClientTypeResponse(soap, p, "ns1:GetTlkpDocumentTypesRecordByClientTypeResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__GetTlkpDocumentTypesRecordByClientTypeResponse * SOAP_FMAC4 soap_get_ns1__GetTlkpDocumentTypesRecordByClientTypeResponse(struct soap*, struct ns1__GetTlkpDocumentTypesRecordByClientTypeResponse *, const char*, const char*);

inline int soap_read_ns1__GetTlkpDocumentTypesRecordByClientTypeResponse(struct soap *soap, struct ns1__GetTlkpDocumentTypesRecordByClientTypeResponse *p)
{
	if (p)
	{	::soap_default_ns1__GetTlkpDocumentTypesRecordByClientTypeResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__GetTlkpDocumentTypesRecordByClientTypeResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetTlkpDocumentTypesRecordByClientTypeResponse(struct soap *soap, const char *URL, struct ns1__GetTlkpDocumentTypesRecordByClientTypeResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__GetTlkpDocumentTypesRecordByClientTypeResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GetTlkpDocumentTypesRecordByClientTypeResponse(struct soap *soap, struct ns1__GetTlkpDocumentTypesRecordByClientTypeResponse *p)
{
	if (::soap_read_ns1__GetTlkpDocumentTypesRecordByClientTypeResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GetTlkpDocumentFieldsRecord_DEFINED
#define SOAP_TYPE_ns1__GetTlkpDocumentFieldsRecord_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__GetTlkpDocumentFieldsRecord(struct soap*, struct ns1__GetTlkpDocumentFieldsRecord *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__GetTlkpDocumentFieldsRecord(struct soap*, const struct ns1__GetTlkpDocumentFieldsRecord *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetTlkpDocumentFieldsRecord(struct soap*, const char*, int, const struct ns1__GetTlkpDocumentFieldsRecord *, const char*);
SOAP_FMAC3 struct ns1__GetTlkpDocumentFieldsRecord * SOAP_FMAC4 soap_in_ns1__GetTlkpDocumentFieldsRecord(struct soap*, const char*, struct ns1__GetTlkpDocumentFieldsRecord *, const char*);
SOAP_FMAC1 struct ns1__GetTlkpDocumentFieldsRecord * SOAP_FMAC2 soap_instantiate_ns1__GetTlkpDocumentFieldsRecord(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__GetTlkpDocumentFieldsRecord * soap_new_ns1__GetTlkpDocumentFieldsRecord(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetTlkpDocumentFieldsRecord(soap, n, NULL, NULL, NULL);
}

inline struct ns1__GetTlkpDocumentFieldsRecord * soap_new_req_ns1__GetTlkpDocumentFieldsRecord(
	struct soap *soap,
	int _in0)
{
	struct ns1__GetTlkpDocumentFieldsRecord *_p = ::soap_new_ns1__GetTlkpDocumentFieldsRecord(soap);
	if (_p)
	{	::soap_default_ns1__GetTlkpDocumentFieldsRecord(soap, _p);
		_p->_in0 = _in0;
	}
	return _p;
}

inline struct ns1__GetTlkpDocumentFieldsRecord * soap_new_set_ns1__GetTlkpDocumentFieldsRecord(
	struct soap *soap,
	int _in0)
{
	struct ns1__GetTlkpDocumentFieldsRecord *_p = ::soap_new_ns1__GetTlkpDocumentFieldsRecord(soap);
	if (_p)
	{	::soap_default_ns1__GetTlkpDocumentFieldsRecord(soap, _p);
		_p->_in0 = _in0;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__GetTlkpDocumentFieldsRecord(struct soap*, const struct ns1__GetTlkpDocumentFieldsRecord *, const char*, const char*);

inline int soap_write_ns1__GetTlkpDocumentFieldsRecord(struct soap *soap, struct ns1__GetTlkpDocumentFieldsRecord const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__GetTlkpDocumentFieldsRecord(soap, p), 0) || ::soap_put_ns1__GetTlkpDocumentFieldsRecord(soap, p, "ns1:GetTlkpDocumentFieldsRecord", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetTlkpDocumentFieldsRecord(struct soap *soap, const char *URL, struct ns1__GetTlkpDocumentFieldsRecord const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetTlkpDocumentFieldsRecord(soap, p), 0) || ::soap_put_ns1__GetTlkpDocumentFieldsRecord(soap, p, "ns1:GetTlkpDocumentFieldsRecord", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__GetTlkpDocumentFieldsRecord(struct soap *soap, const char *URL, struct ns1__GetTlkpDocumentFieldsRecord const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetTlkpDocumentFieldsRecord(soap, p), 0) || ::soap_put_ns1__GetTlkpDocumentFieldsRecord(soap, p, "ns1:GetTlkpDocumentFieldsRecord", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetTlkpDocumentFieldsRecord(struct soap *soap, const char *URL, struct ns1__GetTlkpDocumentFieldsRecord const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetTlkpDocumentFieldsRecord(soap, p), 0) || ::soap_put_ns1__GetTlkpDocumentFieldsRecord(soap, p, "ns1:GetTlkpDocumentFieldsRecord", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__GetTlkpDocumentFieldsRecord * SOAP_FMAC4 soap_get_ns1__GetTlkpDocumentFieldsRecord(struct soap*, struct ns1__GetTlkpDocumentFieldsRecord *, const char*, const char*);

inline int soap_read_ns1__GetTlkpDocumentFieldsRecord(struct soap *soap, struct ns1__GetTlkpDocumentFieldsRecord *p)
{
	if (p)
	{	::soap_default_ns1__GetTlkpDocumentFieldsRecord(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__GetTlkpDocumentFieldsRecord(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetTlkpDocumentFieldsRecord(struct soap *soap, const char *URL, struct ns1__GetTlkpDocumentFieldsRecord *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__GetTlkpDocumentFieldsRecord(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GetTlkpDocumentFieldsRecord(struct soap *soap, struct ns1__GetTlkpDocumentFieldsRecord *p)
{
	if (::soap_read_ns1__GetTlkpDocumentFieldsRecord(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GetTlkpDocumentFieldsRecordResponse_DEFINED
#define SOAP_TYPE_ns1__GetTlkpDocumentFieldsRecordResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__GetTlkpDocumentFieldsRecordResponse(struct soap*, struct ns1__GetTlkpDocumentFieldsRecordResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__GetTlkpDocumentFieldsRecordResponse(struct soap*, const struct ns1__GetTlkpDocumentFieldsRecordResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetTlkpDocumentFieldsRecordResponse(struct soap*, const char*, int, const struct ns1__GetTlkpDocumentFieldsRecordResponse *, const char*);
SOAP_FMAC3 struct ns1__GetTlkpDocumentFieldsRecordResponse * SOAP_FMAC4 soap_in_ns1__GetTlkpDocumentFieldsRecordResponse(struct soap*, const char*, struct ns1__GetTlkpDocumentFieldsRecordResponse *, const char*);
SOAP_FMAC1 struct ns1__GetTlkpDocumentFieldsRecordResponse * SOAP_FMAC2 soap_instantiate_ns1__GetTlkpDocumentFieldsRecordResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__GetTlkpDocumentFieldsRecordResponse * soap_new_ns1__GetTlkpDocumentFieldsRecordResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetTlkpDocumentFieldsRecordResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__GetTlkpDocumentFieldsRecordResponse * soap_new_req_ns1__GetTlkpDocumentFieldsRecordResponse(
	struct soap *soap,
	const std::string& _GetTlkpDocumentFieldsRecordReturn)
{
	struct ns1__GetTlkpDocumentFieldsRecordResponse *_p = ::soap_new_ns1__GetTlkpDocumentFieldsRecordResponse(soap);
	if (_p)
	{	::soap_default_ns1__GetTlkpDocumentFieldsRecordResponse(soap, _p);
		_p->_GetTlkpDocumentFieldsRecordReturn = _GetTlkpDocumentFieldsRecordReturn;
	}
	return _p;
}

inline struct ns1__GetTlkpDocumentFieldsRecordResponse * soap_new_set_ns1__GetTlkpDocumentFieldsRecordResponse(
	struct soap *soap,
	const std::string& _GetTlkpDocumentFieldsRecordReturn)
{
	struct ns1__GetTlkpDocumentFieldsRecordResponse *_p = ::soap_new_ns1__GetTlkpDocumentFieldsRecordResponse(soap);
	if (_p)
	{	::soap_default_ns1__GetTlkpDocumentFieldsRecordResponse(soap, _p);
		_p->_GetTlkpDocumentFieldsRecordReturn = _GetTlkpDocumentFieldsRecordReturn;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__GetTlkpDocumentFieldsRecordResponse(struct soap*, const struct ns1__GetTlkpDocumentFieldsRecordResponse *, const char*, const char*);

inline int soap_write_ns1__GetTlkpDocumentFieldsRecordResponse(struct soap *soap, struct ns1__GetTlkpDocumentFieldsRecordResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__GetTlkpDocumentFieldsRecordResponse(soap, p), 0) || ::soap_put_ns1__GetTlkpDocumentFieldsRecordResponse(soap, p, "ns1:GetTlkpDocumentFieldsRecordResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetTlkpDocumentFieldsRecordResponse(struct soap *soap, const char *URL, struct ns1__GetTlkpDocumentFieldsRecordResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetTlkpDocumentFieldsRecordResponse(soap, p), 0) || ::soap_put_ns1__GetTlkpDocumentFieldsRecordResponse(soap, p, "ns1:GetTlkpDocumentFieldsRecordResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__GetTlkpDocumentFieldsRecordResponse(struct soap *soap, const char *URL, struct ns1__GetTlkpDocumentFieldsRecordResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetTlkpDocumentFieldsRecordResponse(soap, p), 0) || ::soap_put_ns1__GetTlkpDocumentFieldsRecordResponse(soap, p, "ns1:GetTlkpDocumentFieldsRecordResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetTlkpDocumentFieldsRecordResponse(struct soap *soap, const char *URL, struct ns1__GetTlkpDocumentFieldsRecordResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetTlkpDocumentFieldsRecordResponse(soap, p), 0) || ::soap_put_ns1__GetTlkpDocumentFieldsRecordResponse(soap, p, "ns1:GetTlkpDocumentFieldsRecordResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__GetTlkpDocumentFieldsRecordResponse * SOAP_FMAC4 soap_get_ns1__GetTlkpDocumentFieldsRecordResponse(struct soap*, struct ns1__GetTlkpDocumentFieldsRecordResponse *, const char*, const char*);

inline int soap_read_ns1__GetTlkpDocumentFieldsRecordResponse(struct soap *soap, struct ns1__GetTlkpDocumentFieldsRecordResponse *p)
{
	if (p)
	{	::soap_default_ns1__GetTlkpDocumentFieldsRecordResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__GetTlkpDocumentFieldsRecordResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetTlkpDocumentFieldsRecordResponse(struct soap *soap, const char *URL, struct ns1__GetTlkpDocumentFieldsRecordResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__GetTlkpDocumentFieldsRecordResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GetTlkpDocumentFieldsRecordResponse(struct soap *soap, struct ns1__GetTlkpDocumentFieldsRecordResponse *p)
{
	if (::soap_read_ns1__GetTlkpDocumentFieldsRecordResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GetTlkpDocumentFieldTypesRecord_DEFINED
#define SOAP_TYPE_ns1__GetTlkpDocumentFieldTypesRecord_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__GetTlkpDocumentFieldTypesRecord(struct soap*, struct ns1__GetTlkpDocumentFieldTypesRecord *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__GetTlkpDocumentFieldTypesRecord(struct soap*, const struct ns1__GetTlkpDocumentFieldTypesRecord *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetTlkpDocumentFieldTypesRecord(struct soap*, const char*, int, const struct ns1__GetTlkpDocumentFieldTypesRecord *, const char*);
SOAP_FMAC3 struct ns1__GetTlkpDocumentFieldTypesRecord * SOAP_FMAC4 soap_in_ns1__GetTlkpDocumentFieldTypesRecord(struct soap*, const char*, struct ns1__GetTlkpDocumentFieldTypesRecord *, const char*);
SOAP_FMAC1 struct ns1__GetTlkpDocumentFieldTypesRecord * SOAP_FMAC2 soap_instantiate_ns1__GetTlkpDocumentFieldTypesRecord(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__GetTlkpDocumentFieldTypesRecord * soap_new_ns1__GetTlkpDocumentFieldTypesRecord(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetTlkpDocumentFieldTypesRecord(soap, n, NULL, NULL, NULL);
}

inline struct ns1__GetTlkpDocumentFieldTypesRecord * soap_new_req_ns1__GetTlkpDocumentFieldTypesRecord(
	struct soap *soap,
	int _in0)
{
	struct ns1__GetTlkpDocumentFieldTypesRecord *_p = ::soap_new_ns1__GetTlkpDocumentFieldTypesRecord(soap);
	if (_p)
	{	::soap_default_ns1__GetTlkpDocumentFieldTypesRecord(soap, _p);
		_p->_in0 = _in0;
	}
	return _p;
}

inline struct ns1__GetTlkpDocumentFieldTypesRecord * soap_new_set_ns1__GetTlkpDocumentFieldTypesRecord(
	struct soap *soap,
	int _in0)
{
	struct ns1__GetTlkpDocumentFieldTypesRecord *_p = ::soap_new_ns1__GetTlkpDocumentFieldTypesRecord(soap);
	if (_p)
	{	::soap_default_ns1__GetTlkpDocumentFieldTypesRecord(soap, _p);
		_p->_in0 = _in0;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__GetTlkpDocumentFieldTypesRecord(struct soap*, const struct ns1__GetTlkpDocumentFieldTypesRecord *, const char*, const char*);

inline int soap_write_ns1__GetTlkpDocumentFieldTypesRecord(struct soap *soap, struct ns1__GetTlkpDocumentFieldTypesRecord const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__GetTlkpDocumentFieldTypesRecord(soap, p), 0) || ::soap_put_ns1__GetTlkpDocumentFieldTypesRecord(soap, p, "ns1:GetTlkpDocumentFieldTypesRecord", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetTlkpDocumentFieldTypesRecord(struct soap *soap, const char *URL, struct ns1__GetTlkpDocumentFieldTypesRecord const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetTlkpDocumentFieldTypesRecord(soap, p), 0) || ::soap_put_ns1__GetTlkpDocumentFieldTypesRecord(soap, p, "ns1:GetTlkpDocumentFieldTypesRecord", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__GetTlkpDocumentFieldTypesRecord(struct soap *soap, const char *URL, struct ns1__GetTlkpDocumentFieldTypesRecord const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetTlkpDocumentFieldTypesRecord(soap, p), 0) || ::soap_put_ns1__GetTlkpDocumentFieldTypesRecord(soap, p, "ns1:GetTlkpDocumentFieldTypesRecord", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetTlkpDocumentFieldTypesRecord(struct soap *soap, const char *URL, struct ns1__GetTlkpDocumentFieldTypesRecord const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetTlkpDocumentFieldTypesRecord(soap, p), 0) || ::soap_put_ns1__GetTlkpDocumentFieldTypesRecord(soap, p, "ns1:GetTlkpDocumentFieldTypesRecord", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__GetTlkpDocumentFieldTypesRecord * SOAP_FMAC4 soap_get_ns1__GetTlkpDocumentFieldTypesRecord(struct soap*, struct ns1__GetTlkpDocumentFieldTypesRecord *, const char*, const char*);

inline int soap_read_ns1__GetTlkpDocumentFieldTypesRecord(struct soap *soap, struct ns1__GetTlkpDocumentFieldTypesRecord *p)
{
	if (p)
	{	::soap_default_ns1__GetTlkpDocumentFieldTypesRecord(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__GetTlkpDocumentFieldTypesRecord(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetTlkpDocumentFieldTypesRecord(struct soap *soap, const char *URL, struct ns1__GetTlkpDocumentFieldTypesRecord *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__GetTlkpDocumentFieldTypesRecord(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GetTlkpDocumentFieldTypesRecord(struct soap *soap, struct ns1__GetTlkpDocumentFieldTypesRecord *p)
{
	if (::soap_read_ns1__GetTlkpDocumentFieldTypesRecord(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GetTlkpDocumentFieldTypesRecordResponse_DEFINED
#define SOAP_TYPE_ns1__GetTlkpDocumentFieldTypesRecordResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__GetTlkpDocumentFieldTypesRecordResponse(struct soap*, struct ns1__GetTlkpDocumentFieldTypesRecordResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__GetTlkpDocumentFieldTypesRecordResponse(struct soap*, const struct ns1__GetTlkpDocumentFieldTypesRecordResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetTlkpDocumentFieldTypesRecordResponse(struct soap*, const char*, int, const struct ns1__GetTlkpDocumentFieldTypesRecordResponse *, const char*);
SOAP_FMAC3 struct ns1__GetTlkpDocumentFieldTypesRecordResponse * SOAP_FMAC4 soap_in_ns1__GetTlkpDocumentFieldTypesRecordResponse(struct soap*, const char*, struct ns1__GetTlkpDocumentFieldTypesRecordResponse *, const char*);
SOAP_FMAC1 struct ns1__GetTlkpDocumentFieldTypesRecordResponse * SOAP_FMAC2 soap_instantiate_ns1__GetTlkpDocumentFieldTypesRecordResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__GetTlkpDocumentFieldTypesRecordResponse * soap_new_ns1__GetTlkpDocumentFieldTypesRecordResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetTlkpDocumentFieldTypesRecordResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__GetTlkpDocumentFieldTypesRecordResponse * soap_new_req_ns1__GetTlkpDocumentFieldTypesRecordResponse(
	struct soap *soap,
	const std::string& _GetTlkpDocumentFieldTypesRecordReturn)
{
	struct ns1__GetTlkpDocumentFieldTypesRecordResponse *_p = ::soap_new_ns1__GetTlkpDocumentFieldTypesRecordResponse(soap);
	if (_p)
	{	::soap_default_ns1__GetTlkpDocumentFieldTypesRecordResponse(soap, _p);
		_p->_GetTlkpDocumentFieldTypesRecordReturn = _GetTlkpDocumentFieldTypesRecordReturn;
	}
	return _p;
}

inline struct ns1__GetTlkpDocumentFieldTypesRecordResponse * soap_new_set_ns1__GetTlkpDocumentFieldTypesRecordResponse(
	struct soap *soap,
	const std::string& _GetTlkpDocumentFieldTypesRecordReturn)
{
	struct ns1__GetTlkpDocumentFieldTypesRecordResponse *_p = ::soap_new_ns1__GetTlkpDocumentFieldTypesRecordResponse(soap);
	if (_p)
	{	::soap_default_ns1__GetTlkpDocumentFieldTypesRecordResponse(soap, _p);
		_p->_GetTlkpDocumentFieldTypesRecordReturn = _GetTlkpDocumentFieldTypesRecordReturn;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__GetTlkpDocumentFieldTypesRecordResponse(struct soap*, const struct ns1__GetTlkpDocumentFieldTypesRecordResponse *, const char*, const char*);

inline int soap_write_ns1__GetTlkpDocumentFieldTypesRecordResponse(struct soap *soap, struct ns1__GetTlkpDocumentFieldTypesRecordResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__GetTlkpDocumentFieldTypesRecordResponse(soap, p), 0) || ::soap_put_ns1__GetTlkpDocumentFieldTypesRecordResponse(soap, p, "ns1:GetTlkpDocumentFieldTypesRecordResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetTlkpDocumentFieldTypesRecordResponse(struct soap *soap, const char *URL, struct ns1__GetTlkpDocumentFieldTypesRecordResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetTlkpDocumentFieldTypesRecordResponse(soap, p), 0) || ::soap_put_ns1__GetTlkpDocumentFieldTypesRecordResponse(soap, p, "ns1:GetTlkpDocumentFieldTypesRecordResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__GetTlkpDocumentFieldTypesRecordResponse(struct soap *soap, const char *URL, struct ns1__GetTlkpDocumentFieldTypesRecordResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetTlkpDocumentFieldTypesRecordResponse(soap, p), 0) || ::soap_put_ns1__GetTlkpDocumentFieldTypesRecordResponse(soap, p, "ns1:GetTlkpDocumentFieldTypesRecordResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetTlkpDocumentFieldTypesRecordResponse(struct soap *soap, const char *URL, struct ns1__GetTlkpDocumentFieldTypesRecordResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetTlkpDocumentFieldTypesRecordResponse(soap, p), 0) || ::soap_put_ns1__GetTlkpDocumentFieldTypesRecordResponse(soap, p, "ns1:GetTlkpDocumentFieldTypesRecordResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__GetTlkpDocumentFieldTypesRecordResponse * SOAP_FMAC4 soap_get_ns1__GetTlkpDocumentFieldTypesRecordResponse(struct soap*, struct ns1__GetTlkpDocumentFieldTypesRecordResponse *, const char*, const char*);

inline int soap_read_ns1__GetTlkpDocumentFieldTypesRecordResponse(struct soap *soap, struct ns1__GetTlkpDocumentFieldTypesRecordResponse *p)
{
	if (p)
	{	::soap_default_ns1__GetTlkpDocumentFieldTypesRecordResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__GetTlkpDocumentFieldTypesRecordResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetTlkpDocumentFieldTypesRecordResponse(struct soap *soap, const char *URL, struct ns1__GetTlkpDocumentFieldTypesRecordResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__GetTlkpDocumentFieldTypesRecordResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GetTlkpDocumentFieldTypesRecordResponse(struct soap *soap, struct ns1__GetTlkpDocumentFieldTypesRecordResponse *p)
{
	if (::soap_read_ns1__GetTlkpDocumentFieldTypesRecordResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GetTlkpActionsRecord_DEFINED
#define SOAP_TYPE_ns1__GetTlkpActionsRecord_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__GetTlkpActionsRecord(struct soap*, struct ns1__GetTlkpActionsRecord *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__GetTlkpActionsRecord(struct soap*, const struct ns1__GetTlkpActionsRecord *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetTlkpActionsRecord(struct soap*, const char*, int, const struct ns1__GetTlkpActionsRecord *, const char*);
SOAP_FMAC3 struct ns1__GetTlkpActionsRecord * SOAP_FMAC4 soap_in_ns1__GetTlkpActionsRecord(struct soap*, const char*, struct ns1__GetTlkpActionsRecord *, const char*);
SOAP_FMAC1 struct ns1__GetTlkpActionsRecord * SOAP_FMAC2 soap_instantiate_ns1__GetTlkpActionsRecord(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__GetTlkpActionsRecord * soap_new_ns1__GetTlkpActionsRecord(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetTlkpActionsRecord(soap, n, NULL, NULL, NULL);
}

inline struct ns1__GetTlkpActionsRecord * soap_new_req_ns1__GetTlkpActionsRecord(
	struct soap *soap)
{
	struct ns1__GetTlkpActionsRecord *_p = ::soap_new_ns1__GetTlkpActionsRecord(soap);
	if (_p)
	{	::soap_default_ns1__GetTlkpActionsRecord(soap, _p);
	}
	return _p;
}

inline struct ns1__GetTlkpActionsRecord * soap_new_set_ns1__GetTlkpActionsRecord(
	struct soap *soap)
{
	struct ns1__GetTlkpActionsRecord *_p = ::soap_new_ns1__GetTlkpActionsRecord(soap);
	if (_p)
	{	::soap_default_ns1__GetTlkpActionsRecord(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__GetTlkpActionsRecord(struct soap*, const struct ns1__GetTlkpActionsRecord *, const char*, const char*);

inline int soap_write_ns1__GetTlkpActionsRecord(struct soap *soap, struct ns1__GetTlkpActionsRecord const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__GetTlkpActionsRecord(soap, p), 0) || ::soap_put_ns1__GetTlkpActionsRecord(soap, p, "ns1:GetTlkpActionsRecord", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetTlkpActionsRecord(struct soap *soap, const char *URL, struct ns1__GetTlkpActionsRecord const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetTlkpActionsRecord(soap, p), 0) || ::soap_put_ns1__GetTlkpActionsRecord(soap, p, "ns1:GetTlkpActionsRecord", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__GetTlkpActionsRecord(struct soap *soap, const char *URL, struct ns1__GetTlkpActionsRecord const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetTlkpActionsRecord(soap, p), 0) || ::soap_put_ns1__GetTlkpActionsRecord(soap, p, "ns1:GetTlkpActionsRecord", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetTlkpActionsRecord(struct soap *soap, const char *URL, struct ns1__GetTlkpActionsRecord const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetTlkpActionsRecord(soap, p), 0) || ::soap_put_ns1__GetTlkpActionsRecord(soap, p, "ns1:GetTlkpActionsRecord", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__GetTlkpActionsRecord * SOAP_FMAC4 soap_get_ns1__GetTlkpActionsRecord(struct soap*, struct ns1__GetTlkpActionsRecord *, const char*, const char*);

inline int soap_read_ns1__GetTlkpActionsRecord(struct soap *soap, struct ns1__GetTlkpActionsRecord *p)
{
	if (p)
	{	::soap_default_ns1__GetTlkpActionsRecord(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__GetTlkpActionsRecord(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetTlkpActionsRecord(struct soap *soap, const char *URL, struct ns1__GetTlkpActionsRecord *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__GetTlkpActionsRecord(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GetTlkpActionsRecord(struct soap *soap, struct ns1__GetTlkpActionsRecord *p)
{
	if (::soap_read_ns1__GetTlkpActionsRecord(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GetTlkpActionsRecordResponse_DEFINED
#define SOAP_TYPE_ns1__GetTlkpActionsRecordResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__GetTlkpActionsRecordResponse(struct soap*, struct ns1__GetTlkpActionsRecordResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__GetTlkpActionsRecordResponse(struct soap*, const struct ns1__GetTlkpActionsRecordResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetTlkpActionsRecordResponse(struct soap*, const char*, int, const struct ns1__GetTlkpActionsRecordResponse *, const char*);
SOAP_FMAC3 struct ns1__GetTlkpActionsRecordResponse * SOAP_FMAC4 soap_in_ns1__GetTlkpActionsRecordResponse(struct soap*, const char*, struct ns1__GetTlkpActionsRecordResponse *, const char*);
SOAP_FMAC1 struct ns1__GetTlkpActionsRecordResponse * SOAP_FMAC2 soap_instantiate_ns1__GetTlkpActionsRecordResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__GetTlkpActionsRecordResponse * soap_new_ns1__GetTlkpActionsRecordResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetTlkpActionsRecordResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__GetTlkpActionsRecordResponse * soap_new_req_ns1__GetTlkpActionsRecordResponse(
	struct soap *soap,
	const std::string& GetTlkpActionsRecordReturn)
{
	struct ns1__GetTlkpActionsRecordResponse *_p = ::soap_new_ns1__GetTlkpActionsRecordResponse(soap);
	if (_p)
	{	::soap_default_ns1__GetTlkpActionsRecordResponse(soap, _p);
		_p->GetTlkpActionsRecordReturn = GetTlkpActionsRecordReturn;
	}
	return _p;
}

inline struct ns1__GetTlkpActionsRecordResponse * soap_new_set_ns1__GetTlkpActionsRecordResponse(
	struct soap *soap,
	const std::string& GetTlkpActionsRecordReturn)
{
	struct ns1__GetTlkpActionsRecordResponse *_p = ::soap_new_ns1__GetTlkpActionsRecordResponse(soap);
	if (_p)
	{	::soap_default_ns1__GetTlkpActionsRecordResponse(soap, _p);
		_p->GetTlkpActionsRecordReturn = GetTlkpActionsRecordReturn;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__GetTlkpActionsRecordResponse(struct soap*, const struct ns1__GetTlkpActionsRecordResponse *, const char*, const char*);

inline int soap_write_ns1__GetTlkpActionsRecordResponse(struct soap *soap, struct ns1__GetTlkpActionsRecordResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__GetTlkpActionsRecordResponse(soap, p), 0) || ::soap_put_ns1__GetTlkpActionsRecordResponse(soap, p, "ns1:GetTlkpActionsRecordResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetTlkpActionsRecordResponse(struct soap *soap, const char *URL, struct ns1__GetTlkpActionsRecordResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetTlkpActionsRecordResponse(soap, p), 0) || ::soap_put_ns1__GetTlkpActionsRecordResponse(soap, p, "ns1:GetTlkpActionsRecordResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__GetTlkpActionsRecordResponse(struct soap *soap, const char *URL, struct ns1__GetTlkpActionsRecordResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetTlkpActionsRecordResponse(soap, p), 0) || ::soap_put_ns1__GetTlkpActionsRecordResponse(soap, p, "ns1:GetTlkpActionsRecordResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetTlkpActionsRecordResponse(struct soap *soap, const char *URL, struct ns1__GetTlkpActionsRecordResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetTlkpActionsRecordResponse(soap, p), 0) || ::soap_put_ns1__GetTlkpActionsRecordResponse(soap, p, "ns1:GetTlkpActionsRecordResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__GetTlkpActionsRecordResponse * SOAP_FMAC4 soap_get_ns1__GetTlkpActionsRecordResponse(struct soap*, struct ns1__GetTlkpActionsRecordResponse *, const char*, const char*);

inline int soap_read_ns1__GetTlkpActionsRecordResponse(struct soap *soap, struct ns1__GetTlkpActionsRecordResponse *p)
{
	if (p)
	{	::soap_default_ns1__GetTlkpActionsRecordResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__GetTlkpActionsRecordResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetTlkpActionsRecordResponse(struct soap *soap, const char *URL, struct ns1__GetTlkpActionsRecordResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__GetTlkpActionsRecordResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GetTlkpActionsRecordResponse(struct soap *soap, struct ns1__GetTlkpActionsRecordResponse *p)
{
	if (::soap_read_ns1__GetTlkpActionsRecordResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GetTlkpActionsRecordByAction_DEFINED
#define SOAP_TYPE_ns1__GetTlkpActionsRecordByAction_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__GetTlkpActionsRecordByAction(struct soap*, struct ns1__GetTlkpActionsRecordByAction *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__GetTlkpActionsRecordByAction(struct soap*, const struct ns1__GetTlkpActionsRecordByAction *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetTlkpActionsRecordByAction(struct soap*, const char*, int, const struct ns1__GetTlkpActionsRecordByAction *, const char*);
SOAP_FMAC3 struct ns1__GetTlkpActionsRecordByAction * SOAP_FMAC4 soap_in_ns1__GetTlkpActionsRecordByAction(struct soap*, const char*, struct ns1__GetTlkpActionsRecordByAction *, const char*);
SOAP_FMAC1 struct ns1__GetTlkpActionsRecordByAction * SOAP_FMAC2 soap_instantiate_ns1__GetTlkpActionsRecordByAction(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__GetTlkpActionsRecordByAction * soap_new_ns1__GetTlkpActionsRecordByAction(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetTlkpActionsRecordByAction(soap, n, NULL, NULL, NULL);
}

inline struct ns1__GetTlkpActionsRecordByAction * soap_new_req_ns1__GetTlkpActionsRecordByAction(
	struct soap *soap,
	int _in0)
{
	struct ns1__GetTlkpActionsRecordByAction *_p = ::soap_new_ns1__GetTlkpActionsRecordByAction(soap);
	if (_p)
	{	::soap_default_ns1__GetTlkpActionsRecordByAction(soap, _p);
		_p->_in0 = _in0;
	}
	return _p;
}

inline struct ns1__GetTlkpActionsRecordByAction * soap_new_set_ns1__GetTlkpActionsRecordByAction(
	struct soap *soap,
	int _in0)
{
	struct ns1__GetTlkpActionsRecordByAction *_p = ::soap_new_ns1__GetTlkpActionsRecordByAction(soap);
	if (_p)
	{	::soap_default_ns1__GetTlkpActionsRecordByAction(soap, _p);
		_p->_in0 = _in0;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__GetTlkpActionsRecordByAction(struct soap*, const struct ns1__GetTlkpActionsRecordByAction *, const char*, const char*);

inline int soap_write_ns1__GetTlkpActionsRecordByAction(struct soap *soap, struct ns1__GetTlkpActionsRecordByAction const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__GetTlkpActionsRecordByAction(soap, p), 0) || ::soap_put_ns1__GetTlkpActionsRecordByAction(soap, p, "ns1:GetTlkpActionsRecordByAction", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetTlkpActionsRecordByAction(struct soap *soap, const char *URL, struct ns1__GetTlkpActionsRecordByAction const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetTlkpActionsRecordByAction(soap, p), 0) || ::soap_put_ns1__GetTlkpActionsRecordByAction(soap, p, "ns1:GetTlkpActionsRecordByAction", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__GetTlkpActionsRecordByAction(struct soap *soap, const char *URL, struct ns1__GetTlkpActionsRecordByAction const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetTlkpActionsRecordByAction(soap, p), 0) || ::soap_put_ns1__GetTlkpActionsRecordByAction(soap, p, "ns1:GetTlkpActionsRecordByAction", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetTlkpActionsRecordByAction(struct soap *soap, const char *URL, struct ns1__GetTlkpActionsRecordByAction const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetTlkpActionsRecordByAction(soap, p), 0) || ::soap_put_ns1__GetTlkpActionsRecordByAction(soap, p, "ns1:GetTlkpActionsRecordByAction", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__GetTlkpActionsRecordByAction * SOAP_FMAC4 soap_get_ns1__GetTlkpActionsRecordByAction(struct soap*, struct ns1__GetTlkpActionsRecordByAction *, const char*, const char*);

inline int soap_read_ns1__GetTlkpActionsRecordByAction(struct soap *soap, struct ns1__GetTlkpActionsRecordByAction *p)
{
	if (p)
	{	::soap_default_ns1__GetTlkpActionsRecordByAction(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__GetTlkpActionsRecordByAction(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetTlkpActionsRecordByAction(struct soap *soap, const char *URL, struct ns1__GetTlkpActionsRecordByAction *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__GetTlkpActionsRecordByAction(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GetTlkpActionsRecordByAction(struct soap *soap, struct ns1__GetTlkpActionsRecordByAction *p)
{
	if (::soap_read_ns1__GetTlkpActionsRecordByAction(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GetTlkpActionsRecordByActionResponse_DEFINED
#define SOAP_TYPE_ns1__GetTlkpActionsRecordByActionResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__GetTlkpActionsRecordByActionResponse(struct soap*, struct ns1__GetTlkpActionsRecordByActionResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__GetTlkpActionsRecordByActionResponse(struct soap*, const struct ns1__GetTlkpActionsRecordByActionResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetTlkpActionsRecordByActionResponse(struct soap*, const char*, int, const struct ns1__GetTlkpActionsRecordByActionResponse *, const char*);
SOAP_FMAC3 struct ns1__GetTlkpActionsRecordByActionResponse * SOAP_FMAC4 soap_in_ns1__GetTlkpActionsRecordByActionResponse(struct soap*, const char*, struct ns1__GetTlkpActionsRecordByActionResponse *, const char*);
SOAP_FMAC1 struct ns1__GetTlkpActionsRecordByActionResponse * SOAP_FMAC2 soap_instantiate_ns1__GetTlkpActionsRecordByActionResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__GetTlkpActionsRecordByActionResponse * soap_new_ns1__GetTlkpActionsRecordByActionResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetTlkpActionsRecordByActionResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__GetTlkpActionsRecordByActionResponse * soap_new_req_ns1__GetTlkpActionsRecordByActionResponse(
	struct soap *soap,
	const std::string& _GetTlkpActionsRecordByActionReturn)
{
	struct ns1__GetTlkpActionsRecordByActionResponse *_p = ::soap_new_ns1__GetTlkpActionsRecordByActionResponse(soap);
	if (_p)
	{	::soap_default_ns1__GetTlkpActionsRecordByActionResponse(soap, _p);
		_p->_GetTlkpActionsRecordByActionReturn = _GetTlkpActionsRecordByActionReturn;
	}
	return _p;
}

inline struct ns1__GetTlkpActionsRecordByActionResponse * soap_new_set_ns1__GetTlkpActionsRecordByActionResponse(
	struct soap *soap,
	const std::string& _GetTlkpActionsRecordByActionReturn)
{
	struct ns1__GetTlkpActionsRecordByActionResponse *_p = ::soap_new_ns1__GetTlkpActionsRecordByActionResponse(soap);
	if (_p)
	{	::soap_default_ns1__GetTlkpActionsRecordByActionResponse(soap, _p);
		_p->_GetTlkpActionsRecordByActionReturn = _GetTlkpActionsRecordByActionReturn;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__GetTlkpActionsRecordByActionResponse(struct soap*, const struct ns1__GetTlkpActionsRecordByActionResponse *, const char*, const char*);

inline int soap_write_ns1__GetTlkpActionsRecordByActionResponse(struct soap *soap, struct ns1__GetTlkpActionsRecordByActionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__GetTlkpActionsRecordByActionResponse(soap, p), 0) || ::soap_put_ns1__GetTlkpActionsRecordByActionResponse(soap, p, "ns1:GetTlkpActionsRecordByActionResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetTlkpActionsRecordByActionResponse(struct soap *soap, const char *URL, struct ns1__GetTlkpActionsRecordByActionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetTlkpActionsRecordByActionResponse(soap, p), 0) || ::soap_put_ns1__GetTlkpActionsRecordByActionResponse(soap, p, "ns1:GetTlkpActionsRecordByActionResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__GetTlkpActionsRecordByActionResponse(struct soap *soap, const char *URL, struct ns1__GetTlkpActionsRecordByActionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetTlkpActionsRecordByActionResponse(soap, p), 0) || ::soap_put_ns1__GetTlkpActionsRecordByActionResponse(soap, p, "ns1:GetTlkpActionsRecordByActionResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetTlkpActionsRecordByActionResponse(struct soap *soap, const char *URL, struct ns1__GetTlkpActionsRecordByActionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetTlkpActionsRecordByActionResponse(soap, p), 0) || ::soap_put_ns1__GetTlkpActionsRecordByActionResponse(soap, p, "ns1:GetTlkpActionsRecordByActionResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__GetTlkpActionsRecordByActionResponse * SOAP_FMAC4 soap_get_ns1__GetTlkpActionsRecordByActionResponse(struct soap*, struct ns1__GetTlkpActionsRecordByActionResponse *, const char*, const char*);

inline int soap_read_ns1__GetTlkpActionsRecordByActionResponse(struct soap *soap, struct ns1__GetTlkpActionsRecordByActionResponse *p)
{
	if (p)
	{	::soap_default_ns1__GetTlkpActionsRecordByActionResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__GetTlkpActionsRecordByActionResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetTlkpActionsRecordByActionResponse(struct soap *soap, const char *URL, struct ns1__GetTlkpActionsRecordByActionResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__GetTlkpActionsRecordByActionResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GetTlkpActionsRecordByActionResponse(struct soap *soap, struct ns1__GetTlkpActionsRecordByActionResponse *p)
{
	if (::soap_read_ns1__GetTlkpActionsRecordByActionResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GetTlkpPriorityLevelRecord_DEFINED
#define SOAP_TYPE_ns1__GetTlkpPriorityLevelRecord_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__GetTlkpPriorityLevelRecord(struct soap*, struct ns1__GetTlkpPriorityLevelRecord *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__GetTlkpPriorityLevelRecord(struct soap*, const struct ns1__GetTlkpPriorityLevelRecord *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetTlkpPriorityLevelRecord(struct soap*, const char*, int, const struct ns1__GetTlkpPriorityLevelRecord *, const char*);
SOAP_FMAC3 struct ns1__GetTlkpPriorityLevelRecord * SOAP_FMAC4 soap_in_ns1__GetTlkpPriorityLevelRecord(struct soap*, const char*, struct ns1__GetTlkpPriorityLevelRecord *, const char*);
SOAP_FMAC1 struct ns1__GetTlkpPriorityLevelRecord * SOAP_FMAC2 soap_instantiate_ns1__GetTlkpPriorityLevelRecord(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__GetTlkpPriorityLevelRecord * soap_new_ns1__GetTlkpPriorityLevelRecord(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetTlkpPriorityLevelRecord(soap, n, NULL, NULL, NULL);
}

inline struct ns1__GetTlkpPriorityLevelRecord * soap_new_req_ns1__GetTlkpPriorityLevelRecord(
	struct soap *soap)
{
	struct ns1__GetTlkpPriorityLevelRecord *_p = ::soap_new_ns1__GetTlkpPriorityLevelRecord(soap);
	if (_p)
	{	::soap_default_ns1__GetTlkpPriorityLevelRecord(soap, _p);
	}
	return _p;
}

inline struct ns1__GetTlkpPriorityLevelRecord * soap_new_set_ns1__GetTlkpPriorityLevelRecord(
	struct soap *soap)
{
	struct ns1__GetTlkpPriorityLevelRecord *_p = ::soap_new_ns1__GetTlkpPriorityLevelRecord(soap);
	if (_p)
	{	::soap_default_ns1__GetTlkpPriorityLevelRecord(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__GetTlkpPriorityLevelRecord(struct soap*, const struct ns1__GetTlkpPriorityLevelRecord *, const char*, const char*);

inline int soap_write_ns1__GetTlkpPriorityLevelRecord(struct soap *soap, struct ns1__GetTlkpPriorityLevelRecord const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__GetTlkpPriorityLevelRecord(soap, p), 0) || ::soap_put_ns1__GetTlkpPriorityLevelRecord(soap, p, "ns1:GetTlkpPriorityLevelRecord", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetTlkpPriorityLevelRecord(struct soap *soap, const char *URL, struct ns1__GetTlkpPriorityLevelRecord const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetTlkpPriorityLevelRecord(soap, p), 0) || ::soap_put_ns1__GetTlkpPriorityLevelRecord(soap, p, "ns1:GetTlkpPriorityLevelRecord", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__GetTlkpPriorityLevelRecord(struct soap *soap, const char *URL, struct ns1__GetTlkpPriorityLevelRecord const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetTlkpPriorityLevelRecord(soap, p), 0) || ::soap_put_ns1__GetTlkpPriorityLevelRecord(soap, p, "ns1:GetTlkpPriorityLevelRecord", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetTlkpPriorityLevelRecord(struct soap *soap, const char *URL, struct ns1__GetTlkpPriorityLevelRecord const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetTlkpPriorityLevelRecord(soap, p), 0) || ::soap_put_ns1__GetTlkpPriorityLevelRecord(soap, p, "ns1:GetTlkpPriorityLevelRecord", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__GetTlkpPriorityLevelRecord * SOAP_FMAC4 soap_get_ns1__GetTlkpPriorityLevelRecord(struct soap*, struct ns1__GetTlkpPriorityLevelRecord *, const char*, const char*);

inline int soap_read_ns1__GetTlkpPriorityLevelRecord(struct soap *soap, struct ns1__GetTlkpPriorityLevelRecord *p)
{
	if (p)
	{	::soap_default_ns1__GetTlkpPriorityLevelRecord(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__GetTlkpPriorityLevelRecord(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetTlkpPriorityLevelRecord(struct soap *soap, const char *URL, struct ns1__GetTlkpPriorityLevelRecord *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__GetTlkpPriorityLevelRecord(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GetTlkpPriorityLevelRecord(struct soap *soap, struct ns1__GetTlkpPriorityLevelRecord *p)
{
	if (::soap_read_ns1__GetTlkpPriorityLevelRecord(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GetTlkpPriorityLevelRecordResponse_DEFINED
#define SOAP_TYPE_ns1__GetTlkpPriorityLevelRecordResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__GetTlkpPriorityLevelRecordResponse(struct soap*, struct ns1__GetTlkpPriorityLevelRecordResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__GetTlkpPriorityLevelRecordResponse(struct soap*, const struct ns1__GetTlkpPriorityLevelRecordResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetTlkpPriorityLevelRecordResponse(struct soap*, const char*, int, const struct ns1__GetTlkpPriorityLevelRecordResponse *, const char*);
SOAP_FMAC3 struct ns1__GetTlkpPriorityLevelRecordResponse * SOAP_FMAC4 soap_in_ns1__GetTlkpPriorityLevelRecordResponse(struct soap*, const char*, struct ns1__GetTlkpPriorityLevelRecordResponse *, const char*);
SOAP_FMAC1 struct ns1__GetTlkpPriorityLevelRecordResponse * SOAP_FMAC2 soap_instantiate_ns1__GetTlkpPriorityLevelRecordResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__GetTlkpPriorityLevelRecordResponse * soap_new_ns1__GetTlkpPriorityLevelRecordResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetTlkpPriorityLevelRecordResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__GetTlkpPriorityLevelRecordResponse * soap_new_req_ns1__GetTlkpPriorityLevelRecordResponse(
	struct soap *soap,
	const std::string& GetTlkpPriorityLevelRecordReturn)
{
	struct ns1__GetTlkpPriorityLevelRecordResponse *_p = ::soap_new_ns1__GetTlkpPriorityLevelRecordResponse(soap);
	if (_p)
	{	::soap_default_ns1__GetTlkpPriorityLevelRecordResponse(soap, _p);
		_p->GetTlkpPriorityLevelRecordReturn = GetTlkpPriorityLevelRecordReturn;
	}
	return _p;
}

inline struct ns1__GetTlkpPriorityLevelRecordResponse * soap_new_set_ns1__GetTlkpPriorityLevelRecordResponse(
	struct soap *soap,
	const std::string& GetTlkpPriorityLevelRecordReturn)
{
	struct ns1__GetTlkpPriorityLevelRecordResponse *_p = ::soap_new_ns1__GetTlkpPriorityLevelRecordResponse(soap);
	if (_p)
	{	::soap_default_ns1__GetTlkpPriorityLevelRecordResponse(soap, _p);
		_p->GetTlkpPriorityLevelRecordReturn = GetTlkpPriorityLevelRecordReturn;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__GetTlkpPriorityLevelRecordResponse(struct soap*, const struct ns1__GetTlkpPriorityLevelRecordResponse *, const char*, const char*);

inline int soap_write_ns1__GetTlkpPriorityLevelRecordResponse(struct soap *soap, struct ns1__GetTlkpPriorityLevelRecordResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__GetTlkpPriorityLevelRecordResponse(soap, p), 0) || ::soap_put_ns1__GetTlkpPriorityLevelRecordResponse(soap, p, "ns1:GetTlkpPriorityLevelRecordResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetTlkpPriorityLevelRecordResponse(struct soap *soap, const char *URL, struct ns1__GetTlkpPriorityLevelRecordResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetTlkpPriorityLevelRecordResponse(soap, p), 0) || ::soap_put_ns1__GetTlkpPriorityLevelRecordResponse(soap, p, "ns1:GetTlkpPriorityLevelRecordResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__GetTlkpPriorityLevelRecordResponse(struct soap *soap, const char *URL, struct ns1__GetTlkpPriorityLevelRecordResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetTlkpPriorityLevelRecordResponse(soap, p), 0) || ::soap_put_ns1__GetTlkpPriorityLevelRecordResponse(soap, p, "ns1:GetTlkpPriorityLevelRecordResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetTlkpPriorityLevelRecordResponse(struct soap *soap, const char *URL, struct ns1__GetTlkpPriorityLevelRecordResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetTlkpPriorityLevelRecordResponse(soap, p), 0) || ::soap_put_ns1__GetTlkpPriorityLevelRecordResponse(soap, p, "ns1:GetTlkpPriorityLevelRecordResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__GetTlkpPriorityLevelRecordResponse * SOAP_FMAC4 soap_get_ns1__GetTlkpPriorityLevelRecordResponse(struct soap*, struct ns1__GetTlkpPriorityLevelRecordResponse *, const char*, const char*);

inline int soap_read_ns1__GetTlkpPriorityLevelRecordResponse(struct soap *soap, struct ns1__GetTlkpPriorityLevelRecordResponse *p)
{
	if (p)
	{	::soap_default_ns1__GetTlkpPriorityLevelRecordResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__GetTlkpPriorityLevelRecordResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetTlkpPriorityLevelRecordResponse(struct soap *soap, const char *URL, struct ns1__GetTlkpPriorityLevelRecordResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__GetTlkpPriorityLevelRecordResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GetTlkpPriorityLevelRecordResponse(struct soap *soap, struct ns1__GetTlkpPriorityLevelRecordResponse *p)
{
	if (::soap_read_ns1__GetTlkpPriorityLevelRecordResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GetTlkpPriorityLevelRecordByPriorityLevel_DEFINED
#define SOAP_TYPE_ns1__GetTlkpPriorityLevelRecordByPriorityLevel_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__GetTlkpPriorityLevelRecordByPriorityLevel(struct soap*, struct ns1__GetTlkpPriorityLevelRecordByPriorityLevel *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__GetTlkpPriorityLevelRecordByPriorityLevel(struct soap*, const struct ns1__GetTlkpPriorityLevelRecordByPriorityLevel *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetTlkpPriorityLevelRecordByPriorityLevel(struct soap*, const char*, int, const struct ns1__GetTlkpPriorityLevelRecordByPriorityLevel *, const char*);
SOAP_FMAC3 struct ns1__GetTlkpPriorityLevelRecordByPriorityLevel * SOAP_FMAC4 soap_in_ns1__GetTlkpPriorityLevelRecordByPriorityLevel(struct soap*, const char*, struct ns1__GetTlkpPriorityLevelRecordByPriorityLevel *, const char*);
SOAP_FMAC1 struct ns1__GetTlkpPriorityLevelRecordByPriorityLevel * SOAP_FMAC2 soap_instantiate_ns1__GetTlkpPriorityLevelRecordByPriorityLevel(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__GetTlkpPriorityLevelRecordByPriorityLevel * soap_new_ns1__GetTlkpPriorityLevelRecordByPriorityLevel(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetTlkpPriorityLevelRecordByPriorityLevel(soap, n, NULL, NULL, NULL);
}

inline struct ns1__GetTlkpPriorityLevelRecordByPriorityLevel * soap_new_req_ns1__GetTlkpPriorityLevelRecordByPriorityLevel(
	struct soap *soap,
	int _in0)
{
	struct ns1__GetTlkpPriorityLevelRecordByPriorityLevel *_p = ::soap_new_ns1__GetTlkpPriorityLevelRecordByPriorityLevel(soap);
	if (_p)
	{	::soap_default_ns1__GetTlkpPriorityLevelRecordByPriorityLevel(soap, _p);
		_p->_in0 = _in0;
	}
	return _p;
}

inline struct ns1__GetTlkpPriorityLevelRecordByPriorityLevel * soap_new_set_ns1__GetTlkpPriorityLevelRecordByPriorityLevel(
	struct soap *soap,
	int _in0)
{
	struct ns1__GetTlkpPriorityLevelRecordByPriorityLevel *_p = ::soap_new_ns1__GetTlkpPriorityLevelRecordByPriorityLevel(soap);
	if (_p)
	{	::soap_default_ns1__GetTlkpPriorityLevelRecordByPriorityLevel(soap, _p);
		_p->_in0 = _in0;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__GetTlkpPriorityLevelRecordByPriorityLevel(struct soap*, const struct ns1__GetTlkpPriorityLevelRecordByPriorityLevel *, const char*, const char*);

inline int soap_write_ns1__GetTlkpPriorityLevelRecordByPriorityLevel(struct soap *soap, struct ns1__GetTlkpPriorityLevelRecordByPriorityLevel const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__GetTlkpPriorityLevelRecordByPriorityLevel(soap, p), 0) || ::soap_put_ns1__GetTlkpPriorityLevelRecordByPriorityLevel(soap, p, "ns1:GetTlkpPriorityLevelRecordByPriorityLevel", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetTlkpPriorityLevelRecordByPriorityLevel(struct soap *soap, const char *URL, struct ns1__GetTlkpPriorityLevelRecordByPriorityLevel const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetTlkpPriorityLevelRecordByPriorityLevel(soap, p), 0) || ::soap_put_ns1__GetTlkpPriorityLevelRecordByPriorityLevel(soap, p, "ns1:GetTlkpPriorityLevelRecordByPriorityLevel", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__GetTlkpPriorityLevelRecordByPriorityLevel(struct soap *soap, const char *URL, struct ns1__GetTlkpPriorityLevelRecordByPriorityLevel const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetTlkpPriorityLevelRecordByPriorityLevel(soap, p), 0) || ::soap_put_ns1__GetTlkpPriorityLevelRecordByPriorityLevel(soap, p, "ns1:GetTlkpPriorityLevelRecordByPriorityLevel", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetTlkpPriorityLevelRecordByPriorityLevel(struct soap *soap, const char *URL, struct ns1__GetTlkpPriorityLevelRecordByPriorityLevel const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetTlkpPriorityLevelRecordByPriorityLevel(soap, p), 0) || ::soap_put_ns1__GetTlkpPriorityLevelRecordByPriorityLevel(soap, p, "ns1:GetTlkpPriorityLevelRecordByPriorityLevel", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__GetTlkpPriorityLevelRecordByPriorityLevel * SOAP_FMAC4 soap_get_ns1__GetTlkpPriorityLevelRecordByPriorityLevel(struct soap*, struct ns1__GetTlkpPriorityLevelRecordByPriorityLevel *, const char*, const char*);

inline int soap_read_ns1__GetTlkpPriorityLevelRecordByPriorityLevel(struct soap *soap, struct ns1__GetTlkpPriorityLevelRecordByPriorityLevel *p)
{
	if (p)
	{	::soap_default_ns1__GetTlkpPriorityLevelRecordByPriorityLevel(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__GetTlkpPriorityLevelRecordByPriorityLevel(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetTlkpPriorityLevelRecordByPriorityLevel(struct soap *soap, const char *URL, struct ns1__GetTlkpPriorityLevelRecordByPriorityLevel *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__GetTlkpPriorityLevelRecordByPriorityLevel(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GetTlkpPriorityLevelRecordByPriorityLevel(struct soap *soap, struct ns1__GetTlkpPriorityLevelRecordByPriorityLevel *p)
{
	if (::soap_read_ns1__GetTlkpPriorityLevelRecordByPriorityLevel(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GetTlkpPriorityLevelRecordByPriorityLevelResponse_DEFINED
#define SOAP_TYPE_ns1__GetTlkpPriorityLevelRecordByPriorityLevelResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__GetTlkpPriorityLevelRecordByPriorityLevelResponse(struct soap*, struct ns1__GetTlkpPriorityLevelRecordByPriorityLevelResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__GetTlkpPriorityLevelRecordByPriorityLevelResponse(struct soap*, const struct ns1__GetTlkpPriorityLevelRecordByPriorityLevelResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetTlkpPriorityLevelRecordByPriorityLevelResponse(struct soap*, const char*, int, const struct ns1__GetTlkpPriorityLevelRecordByPriorityLevelResponse *, const char*);
SOAP_FMAC3 struct ns1__GetTlkpPriorityLevelRecordByPriorityLevelResponse * SOAP_FMAC4 soap_in_ns1__GetTlkpPriorityLevelRecordByPriorityLevelResponse(struct soap*, const char*, struct ns1__GetTlkpPriorityLevelRecordByPriorityLevelResponse *, const char*);
SOAP_FMAC1 struct ns1__GetTlkpPriorityLevelRecordByPriorityLevelResponse * SOAP_FMAC2 soap_instantiate_ns1__GetTlkpPriorityLevelRecordByPriorityLevelResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__GetTlkpPriorityLevelRecordByPriorityLevelResponse * soap_new_ns1__GetTlkpPriorityLevelRecordByPriorityLevelResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetTlkpPriorityLevelRecordByPriorityLevelResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__GetTlkpPriorityLevelRecordByPriorityLevelResponse * soap_new_req_ns1__GetTlkpPriorityLevelRecordByPriorityLevelResponse(
	struct soap *soap,
	const std::string& _GetTlkpPriorityLevelRecordByPriorityLevelReturn)
{
	struct ns1__GetTlkpPriorityLevelRecordByPriorityLevelResponse *_p = ::soap_new_ns1__GetTlkpPriorityLevelRecordByPriorityLevelResponse(soap);
	if (_p)
	{	::soap_default_ns1__GetTlkpPriorityLevelRecordByPriorityLevelResponse(soap, _p);
		_p->_GetTlkpPriorityLevelRecordByPriorityLevelReturn = _GetTlkpPriorityLevelRecordByPriorityLevelReturn;
	}
	return _p;
}

inline struct ns1__GetTlkpPriorityLevelRecordByPriorityLevelResponse * soap_new_set_ns1__GetTlkpPriorityLevelRecordByPriorityLevelResponse(
	struct soap *soap,
	const std::string& _GetTlkpPriorityLevelRecordByPriorityLevelReturn)
{
	struct ns1__GetTlkpPriorityLevelRecordByPriorityLevelResponse *_p = ::soap_new_ns1__GetTlkpPriorityLevelRecordByPriorityLevelResponse(soap);
	if (_p)
	{	::soap_default_ns1__GetTlkpPriorityLevelRecordByPriorityLevelResponse(soap, _p);
		_p->_GetTlkpPriorityLevelRecordByPriorityLevelReturn = _GetTlkpPriorityLevelRecordByPriorityLevelReturn;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__GetTlkpPriorityLevelRecordByPriorityLevelResponse(struct soap*, const struct ns1__GetTlkpPriorityLevelRecordByPriorityLevelResponse *, const char*, const char*);

inline int soap_write_ns1__GetTlkpPriorityLevelRecordByPriorityLevelResponse(struct soap *soap, struct ns1__GetTlkpPriorityLevelRecordByPriorityLevelResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__GetTlkpPriorityLevelRecordByPriorityLevelResponse(soap, p), 0) || ::soap_put_ns1__GetTlkpPriorityLevelRecordByPriorityLevelResponse(soap, p, "ns1:GetTlkpPriorityLevelRecordByPriorityLevelResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetTlkpPriorityLevelRecordByPriorityLevelResponse(struct soap *soap, const char *URL, struct ns1__GetTlkpPriorityLevelRecordByPriorityLevelResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetTlkpPriorityLevelRecordByPriorityLevelResponse(soap, p), 0) || ::soap_put_ns1__GetTlkpPriorityLevelRecordByPriorityLevelResponse(soap, p, "ns1:GetTlkpPriorityLevelRecordByPriorityLevelResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__GetTlkpPriorityLevelRecordByPriorityLevelResponse(struct soap *soap, const char *URL, struct ns1__GetTlkpPriorityLevelRecordByPriorityLevelResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetTlkpPriorityLevelRecordByPriorityLevelResponse(soap, p), 0) || ::soap_put_ns1__GetTlkpPriorityLevelRecordByPriorityLevelResponse(soap, p, "ns1:GetTlkpPriorityLevelRecordByPriorityLevelResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetTlkpPriorityLevelRecordByPriorityLevelResponse(struct soap *soap, const char *URL, struct ns1__GetTlkpPriorityLevelRecordByPriorityLevelResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetTlkpPriorityLevelRecordByPriorityLevelResponse(soap, p), 0) || ::soap_put_ns1__GetTlkpPriorityLevelRecordByPriorityLevelResponse(soap, p, "ns1:GetTlkpPriorityLevelRecordByPriorityLevelResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__GetTlkpPriorityLevelRecordByPriorityLevelResponse * SOAP_FMAC4 soap_get_ns1__GetTlkpPriorityLevelRecordByPriorityLevelResponse(struct soap*, struct ns1__GetTlkpPriorityLevelRecordByPriorityLevelResponse *, const char*, const char*);

inline int soap_read_ns1__GetTlkpPriorityLevelRecordByPriorityLevelResponse(struct soap *soap, struct ns1__GetTlkpPriorityLevelRecordByPriorityLevelResponse *p)
{
	if (p)
	{	::soap_default_ns1__GetTlkpPriorityLevelRecordByPriorityLevelResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__GetTlkpPriorityLevelRecordByPriorityLevelResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetTlkpPriorityLevelRecordByPriorityLevelResponse(struct soap *soap, const char *URL, struct ns1__GetTlkpPriorityLevelRecordByPriorityLevelResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__GetTlkpPriorityLevelRecordByPriorityLevelResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GetTlkpPriorityLevelRecordByPriorityLevelResponse(struct soap *soap, struct ns1__GetTlkpPriorityLevelRecordByPriorityLevelResponse *p)
{
	if (::soap_read_ns1__GetTlkpPriorityLevelRecordByPriorityLevelResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GetTlkpActionParametersRecord_DEFINED
#define SOAP_TYPE_ns1__GetTlkpActionParametersRecord_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__GetTlkpActionParametersRecord(struct soap*, struct ns1__GetTlkpActionParametersRecord *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__GetTlkpActionParametersRecord(struct soap*, const struct ns1__GetTlkpActionParametersRecord *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetTlkpActionParametersRecord(struct soap*, const char*, int, const struct ns1__GetTlkpActionParametersRecord *, const char*);
SOAP_FMAC3 struct ns1__GetTlkpActionParametersRecord * SOAP_FMAC4 soap_in_ns1__GetTlkpActionParametersRecord(struct soap*, const char*, struct ns1__GetTlkpActionParametersRecord *, const char*);
SOAP_FMAC1 struct ns1__GetTlkpActionParametersRecord * SOAP_FMAC2 soap_instantiate_ns1__GetTlkpActionParametersRecord(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__GetTlkpActionParametersRecord * soap_new_ns1__GetTlkpActionParametersRecord(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetTlkpActionParametersRecord(soap, n, NULL, NULL, NULL);
}

inline struct ns1__GetTlkpActionParametersRecord * soap_new_req_ns1__GetTlkpActionParametersRecord(
	struct soap *soap,
	int _in0)
{
	struct ns1__GetTlkpActionParametersRecord *_p = ::soap_new_ns1__GetTlkpActionParametersRecord(soap);
	if (_p)
	{	::soap_default_ns1__GetTlkpActionParametersRecord(soap, _p);
		_p->_in0 = _in0;
	}
	return _p;
}

inline struct ns1__GetTlkpActionParametersRecord * soap_new_set_ns1__GetTlkpActionParametersRecord(
	struct soap *soap,
	int _in0)
{
	struct ns1__GetTlkpActionParametersRecord *_p = ::soap_new_ns1__GetTlkpActionParametersRecord(soap);
	if (_p)
	{	::soap_default_ns1__GetTlkpActionParametersRecord(soap, _p);
		_p->_in0 = _in0;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__GetTlkpActionParametersRecord(struct soap*, const struct ns1__GetTlkpActionParametersRecord *, const char*, const char*);

inline int soap_write_ns1__GetTlkpActionParametersRecord(struct soap *soap, struct ns1__GetTlkpActionParametersRecord const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__GetTlkpActionParametersRecord(soap, p), 0) || ::soap_put_ns1__GetTlkpActionParametersRecord(soap, p, "ns1:GetTlkpActionParametersRecord", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetTlkpActionParametersRecord(struct soap *soap, const char *URL, struct ns1__GetTlkpActionParametersRecord const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetTlkpActionParametersRecord(soap, p), 0) || ::soap_put_ns1__GetTlkpActionParametersRecord(soap, p, "ns1:GetTlkpActionParametersRecord", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__GetTlkpActionParametersRecord(struct soap *soap, const char *URL, struct ns1__GetTlkpActionParametersRecord const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetTlkpActionParametersRecord(soap, p), 0) || ::soap_put_ns1__GetTlkpActionParametersRecord(soap, p, "ns1:GetTlkpActionParametersRecord", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetTlkpActionParametersRecord(struct soap *soap, const char *URL, struct ns1__GetTlkpActionParametersRecord const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetTlkpActionParametersRecord(soap, p), 0) || ::soap_put_ns1__GetTlkpActionParametersRecord(soap, p, "ns1:GetTlkpActionParametersRecord", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__GetTlkpActionParametersRecord * SOAP_FMAC4 soap_get_ns1__GetTlkpActionParametersRecord(struct soap*, struct ns1__GetTlkpActionParametersRecord *, const char*, const char*);

inline int soap_read_ns1__GetTlkpActionParametersRecord(struct soap *soap, struct ns1__GetTlkpActionParametersRecord *p)
{
	if (p)
	{	::soap_default_ns1__GetTlkpActionParametersRecord(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__GetTlkpActionParametersRecord(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetTlkpActionParametersRecord(struct soap *soap, const char *URL, struct ns1__GetTlkpActionParametersRecord *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__GetTlkpActionParametersRecord(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GetTlkpActionParametersRecord(struct soap *soap, struct ns1__GetTlkpActionParametersRecord *p)
{
	if (::soap_read_ns1__GetTlkpActionParametersRecord(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GetTlkpActionParametersRecordResponse_DEFINED
#define SOAP_TYPE_ns1__GetTlkpActionParametersRecordResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__GetTlkpActionParametersRecordResponse(struct soap*, struct ns1__GetTlkpActionParametersRecordResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__GetTlkpActionParametersRecordResponse(struct soap*, const struct ns1__GetTlkpActionParametersRecordResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetTlkpActionParametersRecordResponse(struct soap*, const char*, int, const struct ns1__GetTlkpActionParametersRecordResponse *, const char*);
SOAP_FMAC3 struct ns1__GetTlkpActionParametersRecordResponse * SOAP_FMAC4 soap_in_ns1__GetTlkpActionParametersRecordResponse(struct soap*, const char*, struct ns1__GetTlkpActionParametersRecordResponse *, const char*);
SOAP_FMAC1 struct ns1__GetTlkpActionParametersRecordResponse * SOAP_FMAC2 soap_instantiate_ns1__GetTlkpActionParametersRecordResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__GetTlkpActionParametersRecordResponse * soap_new_ns1__GetTlkpActionParametersRecordResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetTlkpActionParametersRecordResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__GetTlkpActionParametersRecordResponse * soap_new_req_ns1__GetTlkpActionParametersRecordResponse(
	struct soap *soap,
	const std::string& _GetTlkpActionParametersRecordReturn)
{
	struct ns1__GetTlkpActionParametersRecordResponse *_p = ::soap_new_ns1__GetTlkpActionParametersRecordResponse(soap);
	if (_p)
	{	::soap_default_ns1__GetTlkpActionParametersRecordResponse(soap, _p);
		_p->_GetTlkpActionParametersRecordReturn = _GetTlkpActionParametersRecordReturn;
	}
	return _p;
}

inline struct ns1__GetTlkpActionParametersRecordResponse * soap_new_set_ns1__GetTlkpActionParametersRecordResponse(
	struct soap *soap,
	const std::string& _GetTlkpActionParametersRecordReturn)
{
	struct ns1__GetTlkpActionParametersRecordResponse *_p = ::soap_new_ns1__GetTlkpActionParametersRecordResponse(soap);
	if (_p)
	{	::soap_default_ns1__GetTlkpActionParametersRecordResponse(soap, _p);
		_p->_GetTlkpActionParametersRecordReturn = _GetTlkpActionParametersRecordReturn;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__GetTlkpActionParametersRecordResponse(struct soap*, const struct ns1__GetTlkpActionParametersRecordResponse *, const char*, const char*);

inline int soap_write_ns1__GetTlkpActionParametersRecordResponse(struct soap *soap, struct ns1__GetTlkpActionParametersRecordResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__GetTlkpActionParametersRecordResponse(soap, p), 0) || ::soap_put_ns1__GetTlkpActionParametersRecordResponse(soap, p, "ns1:GetTlkpActionParametersRecordResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetTlkpActionParametersRecordResponse(struct soap *soap, const char *URL, struct ns1__GetTlkpActionParametersRecordResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetTlkpActionParametersRecordResponse(soap, p), 0) || ::soap_put_ns1__GetTlkpActionParametersRecordResponse(soap, p, "ns1:GetTlkpActionParametersRecordResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__GetTlkpActionParametersRecordResponse(struct soap *soap, const char *URL, struct ns1__GetTlkpActionParametersRecordResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetTlkpActionParametersRecordResponse(soap, p), 0) || ::soap_put_ns1__GetTlkpActionParametersRecordResponse(soap, p, "ns1:GetTlkpActionParametersRecordResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetTlkpActionParametersRecordResponse(struct soap *soap, const char *URL, struct ns1__GetTlkpActionParametersRecordResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetTlkpActionParametersRecordResponse(soap, p), 0) || ::soap_put_ns1__GetTlkpActionParametersRecordResponse(soap, p, "ns1:GetTlkpActionParametersRecordResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__GetTlkpActionParametersRecordResponse * SOAP_FMAC4 soap_get_ns1__GetTlkpActionParametersRecordResponse(struct soap*, struct ns1__GetTlkpActionParametersRecordResponse *, const char*, const char*);

inline int soap_read_ns1__GetTlkpActionParametersRecordResponse(struct soap *soap, struct ns1__GetTlkpActionParametersRecordResponse *p)
{
	if (p)
	{	::soap_default_ns1__GetTlkpActionParametersRecordResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__GetTlkpActionParametersRecordResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetTlkpActionParametersRecordResponse(struct soap *soap, const char *URL, struct ns1__GetTlkpActionParametersRecordResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__GetTlkpActionParametersRecordResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GetTlkpActionParametersRecordResponse(struct soap *soap, struct ns1__GetTlkpActionParametersRecordResponse *p)
{
	if (::soap_read_ns1__GetTlkpActionParametersRecordResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GetTlkpActionParametersRecordByParameterId_DEFINED
#define SOAP_TYPE_ns1__GetTlkpActionParametersRecordByParameterId_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__GetTlkpActionParametersRecordByParameterId(struct soap*, struct ns1__GetTlkpActionParametersRecordByParameterId *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__GetTlkpActionParametersRecordByParameterId(struct soap*, const struct ns1__GetTlkpActionParametersRecordByParameterId *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetTlkpActionParametersRecordByParameterId(struct soap*, const char*, int, const struct ns1__GetTlkpActionParametersRecordByParameterId *, const char*);
SOAP_FMAC3 struct ns1__GetTlkpActionParametersRecordByParameterId * SOAP_FMAC4 soap_in_ns1__GetTlkpActionParametersRecordByParameterId(struct soap*, const char*, struct ns1__GetTlkpActionParametersRecordByParameterId *, const char*);
SOAP_FMAC1 struct ns1__GetTlkpActionParametersRecordByParameterId * SOAP_FMAC2 soap_instantiate_ns1__GetTlkpActionParametersRecordByParameterId(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__GetTlkpActionParametersRecordByParameterId * soap_new_ns1__GetTlkpActionParametersRecordByParameterId(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetTlkpActionParametersRecordByParameterId(soap, n, NULL, NULL, NULL);
}

inline struct ns1__GetTlkpActionParametersRecordByParameterId * soap_new_req_ns1__GetTlkpActionParametersRecordByParameterId(
	struct soap *soap,
	int _in0,
	int _in1)
{
	struct ns1__GetTlkpActionParametersRecordByParameterId *_p = ::soap_new_ns1__GetTlkpActionParametersRecordByParameterId(soap);
	if (_p)
	{	::soap_default_ns1__GetTlkpActionParametersRecordByParameterId(soap, _p);
		_p->_in0 = _in0;
		_p->_in1 = _in1;
	}
	return _p;
}

inline struct ns1__GetTlkpActionParametersRecordByParameterId * soap_new_set_ns1__GetTlkpActionParametersRecordByParameterId(
	struct soap *soap,
	int _in0,
	int _in1)
{
	struct ns1__GetTlkpActionParametersRecordByParameterId *_p = ::soap_new_ns1__GetTlkpActionParametersRecordByParameterId(soap);
	if (_p)
	{	::soap_default_ns1__GetTlkpActionParametersRecordByParameterId(soap, _p);
		_p->_in0 = _in0;
		_p->_in1 = _in1;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__GetTlkpActionParametersRecordByParameterId(struct soap*, const struct ns1__GetTlkpActionParametersRecordByParameterId *, const char*, const char*);

inline int soap_write_ns1__GetTlkpActionParametersRecordByParameterId(struct soap *soap, struct ns1__GetTlkpActionParametersRecordByParameterId const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__GetTlkpActionParametersRecordByParameterId(soap, p), 0) || ::soap_put_ns1__GetTlkpActionParametersRecordByParameterId(soap, p, "ns1:GetTlkpActionParametersRecordByParameterId", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetTlkpActionParametersRecordByParameterId(struct soap *soap, const char *URL, struct ns1__GetTlkpActionParametersRecordByParameterId const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetTlkpActionParametersRecordByParameterId(soap, p), 0) || ::soap_put_ns1__GetTlkpActionParametersRecordByParameterId(soap, p, "ns1:GetTlkpActionParametersRecordByParameterId", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__GetTlkpActionParametersRecordByParameterId(struct soap *soap, const char *URL, struct ns1__GetTlkpActionParametersRecordByParameterId const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetTlkpActionParametersRecordByParameterId(soap, p), 0) || ::soap_put_ns1__GetTlkpActionParametersRecordByParameterId(soap, p, "ns1:GetTlkpActionParametersRecordByParameterId", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetTlkpActionParametersRecordByParameterId(struct soap *soap, const char *URL, struct ns1__GetTlkpActionParametersRecordByParameterId const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetTlkpActionParametersRecordByParameterId(soap, p), 0) || ::soap_put_ns1__GetTlkpActionParametersRecordByParameterId(soap, p, "ns1:GetTlkpActionParametersRecordByParameterId", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__GetTlkpActionParametersRecordByParameterId * SOAP_FMAC4 soap_get_ns1__GetTlkpActionParametersRecordByParameterId(struct soap*, struct ns1__GetTlkpActionParametersRecordByParameterId *, const char*, const char*);

inline int soap_read_ns1__GetTlkpActionParametersRecordByParameterId(struct soap *soap, struct ns1__GetTlkpActionParametersRecordByParameterId *p)
{
	if (p)
	{	::soap_default_ns1__GetTlkpActionParametersRecordByParameterId(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__GetTlkpActionParametersRecordByParameterId(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetTlkpActionParametersRecordByParameterId(struct soap *soap, const char *URL, struct ns1__GetTlkpActionParametersRecordByParameterId *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__GetTlkpActionParametersRecordByParameterId(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GetTlkpActionParametersRecordByParameterId(struct soap *soap, struct ns1__GetTlkpActionParametersRecordByParameterId *p)
{
	if (::soap_read_ns1__GetTlkpActionParametersRecordByParameterId(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GetTlkpActionParametersRecordByParameterIdResponse_DEFINED
#define SOAP_TYPE_ns1__GetTlkpActionParametersRecordByParameterIdResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__GetTlkpActionParametersRecordByParameterIdResponse(struct soap*, struct ns1__GetTlkpActionParametersRecordByParameterIdResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__GetTlkpActionParametersRecordByParameterIdResponse(struct soap*, const struct ns1__GetTlkpActionParametersRecordByParameterIdResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetTlkpActionParametersRecordByParameterIdResponse(struct soap*, const char*, int, const struct ns1__GetTlkpActionParametersRecordByParameterIdResponse *, const char*);
SOAP_FMAC3 struct ns1__GetTlkpActionParametersRecordByParameterIdResponse * SOAP_FMAC4 soap_in_ns1__GetTlkpActionParametersRecordByParameterIdResponse(struct soap*, const char*, struct ns1__GetTlkpActionParametersRecordByParameterIdResponse *, const char*);
SOAP_FMAC1 struct ns1__GetTlkpActionParametersRecordByParameterIdResponse * SOAP_FMAC2 soap_instantiate_ns1__GetTlkpActionParametersRecordByParameterIdResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__GetTlkpActionParametersRecordByParameterIdResponse * soap_new_ns1__GetTlkpActionParametersRecordByParameterIdResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetTlkpActionParametersRecordByParameterIdResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__GetTlkpActionParametersRecordByParameterIdResponse * soap_new_req_ns1__GetTlkpActionParametersRecordByParameterIdResponse(
	struct soap *soap,
	const std::string& _GetTlkpActionParametersRecordByParameterIdReturn)
{
	struct ns1__GetTlkpActionParametersRecordByParameterIdResponse *_p = ::soap_new_ns1__GetTlkpActionParametersRecordByParameterIdResponse(soap);
	if (_p)
	{	::soap_default_ns1__GetTlkpActionParametersRecordByParameterIdResponse(soap, _p);
		_p->_GetTlkpActionParametersRecordByParameterIdReturn = _GetTlkpActionParametersRecordByParameterIdReturn;
	}
	return _p;
}

inline struct ns1__GetTlkpActionParametersRecordByParameterIdResponse * soap_new_set_ns1__GetTlkpActionParametersRecordByParameterIdResponse(
	struct soap *soap,
	const std::string& _GetTlkpActionParametersRecordByParameterIdReturn)
{
	struct ns1__GetTlkpActionParametersRecordByParameterIdResponse *_p = ::soap_new_ns1__GetTlkpActionParametersRecordByParameterIdResponse(soap);
	if (_p)
	{	::soap_default_ns1__GetTlkpActionParametersRecordByParameterIdResponse(soap, _p);
		_p->_GetTlkpActionParametersRecordByParameterIdReturn = _GetTlkpActionParametersRecordByParameterIdReturn;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__GetTlkpActionParametersRecordByParameterIdResponse(struct soap*, const struct ns1__GetTlkpActionParametersRecordByParameterIdResponse *, const char*, const char*);

inline int soap_write_ns1__GetTlkpActionParametersRecordByParameterIdResponse(struct soap *soap, struct ns1__GetTlkpActionParametersRecordByParameterIdResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__GetTlkpActionParametersRecordByParameterIdResponse(soap, p), 0) || ::soap_put_ns1__GetTlkpActionParametersRecordByParameterIdResponse(soap, p, "ns1:GetTlkpActionParametersRecordByParameterIdResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetTlkpActionParametersRecordByParameterIdResponse(struct soap *soap, const char *URL, struct ns1__GetTlkpActionParametersRecordByParameterIdResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetTlkpActionParametersRecordByParameterIdResponse(soap, p), 0) || ::soap_put_ns1__GetTlkpActionParametersRecordByParameterIdResponse(soap, p, "ns1:GetTlkpActionParametersRecordByParameterIdResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__GetTlkpActionParametersRecordByParameterIdResponse(struct soap *soap, const char *URL, struct ns1__GetTlkpActionParametersRecordByParameterIdResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetTlkpActionParametersRecordByParameterIdResponse(soap, p), 0) || ::soap_put_ns1__GetTlkpActionParametersRecordByParameterIdResponse(soap, p, "ns1:GetTlkpActionParametersRecordByParameterIdResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetTlkpActionParametersRecordByParameterIdResponse(struct soap *soap, const char *URL, struct ns1__GetTlkpActionParametersRecordByParameterIdResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetTlkpActionParametersRecordByParameterIdResponse(soap, p), 0) || ::soap_put_ns1__GetTlkpActionParametersRecordByParameterIdResponse(soap, p, "ns1:GetTlkpActionParametersRecordByParameterIdResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__GetTlkpActionParametersRecordByParameterIdResponse * SOAP_FMAC4 soap_get_ns1__GetTlkpActionParametersRecordByParameterIdResponse(struct soap*, struct ns1__GetTlkpActionParametersRecordByParameterIdResponse *, const char*, const char*);

inline int soap_read_ns1__GetTlkpActionParametersRecordByParameterIdResponse(struct soap *soap, struct ns1__GetTlkpActionParametersRecordByParameterIdResponse *p)
{
	if (p)
	{	::soap_default_ns1__GetTlkpActionParametersRecordByParameterIdResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__GetTlkpActionParametersRecordByParameterIdResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetTlkpActionParametersRecordByParameterIdResponse(struct soap *soap, const char *URL, struct ns1__GetTlkpActionParametersRecordByParameterIdResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__GetTlkpActionParametersRecordByParameterIdResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GetTlkpActionParametersRecordByParameterIdResponse(struct soap *soap, struct ns1__GetTlkpActionParametersRecordByParameterIdResponse *p)
{
	if (::soap_read_ns1__GetTlkpActionParametersRecordByParameterIdResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SendAlert_DEFINED
#define SOAP_TYPE_ns1__SendAlert_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__SendAlert(struct soap*, struct ns1__SendAlert *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__SendAlert(struct soap*, const struct ns1__SendAlert *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SendAlert(struct soap*, const char*, int, const struct ns1__SendAlert *, const char*);
SOAP_FMAC3 struct ns1__SendAlert * SOAP_FMAC4 soap_in_ns1__SendAlert(struct soap*, const char*, struct ns1__SendAlert *, const char*);
SOAP_FMAC1 struct ns1__SendAlert * SOAP_FMAC2 soap_instantiate_ns1__SendAlert(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__SendAlert * soap_new_ns1__SendAlert(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SendAlert(soap, n, NULL, NULL, NULL);
}

inline struct ns1__SendAlert * soap_new_req_ns1__SendAlert(
	struct soap *soap,
	int _in0,
	int _in1,
	int _in2,
	int _in3,
	int _in4,
	int _in5,
	const std::string& _in6)
{
	struct ns1__SendAlert *_p = ::soap_new_ns1__SendAlert(soap);
	if (_p)
	{	::soap_default_ns1__SendAlert(soap, _p);
		_p->_in0 = _in0;
		_p->_in1 = _in1;
		_p->_in2 = _in2;
		_p->_in3 = _in3;
		_p->_in4 = _in4;
		_p->_in5 = _in5;
		_p->_in6 = _in6;
	}
	return _p;
}

inline struct ns1__SendAlert * soap_new_set_ns1__SendAlert(
	struct soap *soap,
	int _in0,
	int _in1,
	int _in2,
	int _in3,
	int _in4,
	int _in5,
	const std::string& _in6)
{
	struct ns1__SendAlert *_p = ::soap_new_ns1__SendAlert(soap);
	if (_p)
	{	::soap_default_ns1__SendAlert(soap, _p);
		_p->_in0 = _in0;
		_p->_in1 = _in1;
		_p->_in2 = _in2;
		_p->_in3 = _in3;
		_p->_in4 = _in4;
		_p->_in5 = _in5;
		_p->_in6 = _in6;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__SendAlert(struct soap*, const struct ns1__SendAlert *, const char*, const char*);

inline int soap_write_ns1__SendAlert(struct soap *soap, struct ns1__SendAlert const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__SendAlert(soap, p), 0) || ::soap_put_ns1__SendAlert(soap, p, "ns1:SendAlert", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SendAlert(struct soap *soap, const char *URL, struct ns1__SendAlert const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__SendAlert(soap, p), 0) || ::soap_put_ns1__SendAlert(soap, p, "ns1:SendAlert", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__SendAlert(struct soap *soap, const char *URL, struct ns1__SendAlert const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__SendAlert(soap, p), 0) || ::soap_put_ns1__SendAlert(soap, p, "ns1:SendAlert", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SendAlert(struct soap *soap, const char *URL, struct ns1__SendAlert const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__SendAlert(soap, p), 0) || ::soap_put_ns1__SendAlert(soap, p, "ns1:SendAlert", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__SendAlert * SOAP_FMAC4 soap_get_ns1__SendAlert(struct soap*, struct ns1__SendAlert *, const char*, const char*);

inline int soap_read_ns1__SendAlert(struct soap *soap, struct ns1__SendAlert *p)
{
	if (p)
	{	::soap_default_ns1__SendAlert(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__SendAlert(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SendAlert(struct soap *soap, const char *URL, struct ns1__SendAlert *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__SendAlert(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SendAlert(struct soap *soap, struct ns1__SendAlert *p)
{
	if (::soap_read_ns1__SendAlert(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SendAlertResponse_DEFINED
#define SOAP_TYPE_ns1__SendAlertResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__SendAlertResponse(struct soap*, struct ns1__SendAlertResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__SendAlertResponse(struct soap*, const struct ns1__SendAlertResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SendAlertResponse(struct soap*, const char*, int, const struct ns1__SendAlertResponse *, const char*);
SOAP_FMAC3 struct ns1__SendAlertResponse * SOAP_FMAC4 soap_in_ns1__SendAlertResponse(struct soap*, const char*, struct ns1__SendAlertResponse *, const char*);
SOAP_FMAC1 struct ns1__SendAlertResponse * SOAP_FMAC2 soap_instantiate_ns1__SendAlertResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__SendAlertResponse * soap_new_ns1__SendAlertResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SendAlertResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__SendAlertResponse * soap_new_req_ns1__SendAlertResponse(
	struct soap *soap)
{
	struct ns1__SendAlertResponse *_p = ::soap_new_ns1__SendAlertResponse(soap);
	if (_p)
	{	::soap_default_ns1__SendAlertResponse(soap, _p);
	}
	return _p;
}

inline struct ns1__SendAlertResponse * soap_new_set_ns1__SendAlertResponse(
	struct soap *soap)
{
	struct ns1__SendAlertResponse *_p = ::soap_new_ns1__SendAlertResponse(soap);
	if (_p)
	{	::soap_default_ns1__SendAlertResponse(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__SendAlertResponse(struct soap*, const struct ns1__SendAlertResponse *, const char*, const char*);

inline int soap_write_ns1__SendAlertResponse(struct soap *soap, struct ns1__SendAlertResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__SendAlertResponse(soap, p), 0) || ::soap_put_ns1__SendAlertResponse(soap, p, "ns1:SendAlertResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SendAlertResponse(struct soap *soap, const char *URL, struct ns1__SendAlertResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__SendAlertResponse(soap, p), 0) || ::soap_put_ns1__SendAlertResponse(soap, p, "ns1:SendAlertResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__SendAlertResponse(struct soap *soap, const char *URL, struct ns1__SendAlertResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__SendAlertResponse(soap, p), 0) || ::soap_put_ns1__SendAlertResponse(soap, p, "ns1:SendAlertResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SendAlertResponse(struct soap *soap, const char *URL, struct ns1__SendAlertResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__SendAlertResponse(soap, p), 0) || ::soap_put_ns1__SendAlertResponse(soap, p, "ns1:SendAlertResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__SendAlertResponse * SOAP_FMAC4 soap_get_ns1__SendAlertResponse(struct soap*, struct ns1__SendAlertResponse *, const char*, const char*);

inline int soap_read_ns1__SendAlertResponse(struct soap *soap, struct ns1__SendAlertResponse *p)
{
	if (p)
	{	::soap_default_ns1__SendAlertResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__SendAlertResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SendAlertResponse(struct soap *soap, const char *URL, struct ns1__SendAlertResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__SendAlertResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SendAlertResponse(struct soap *soap, struct ns1__SendAlertResponse *p)
{
	if (::soap_read_ns1__SendAlertResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SendNetworkDocument_DEFINED
#define SOAP_TYPE_ns1__SendNetworkDocument_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__SendNetworkDocument(struct soap*, struct ns1__SendNetworkDocument *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__SendNetworkDocument(struct soap*, const struct ns1__SendNetworkDocument *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SendNetworkDocument(struct soap*, const char*, int, const struct ns1__SendNetworkDocument *, const char*);
SOAP_FMAC3 struct ns1__SendNetworkDocument * SOAP_FMAC4 soap_in_ns1__SendNetworkDocument(struct soap*, const char*, struct ns1__SendNetworkDocument *, const char*);
SOAP_FMAC1 struct ns1__SendNetworkDocument * SOAP_FMAC2 soap_instantiate_ns1__SendNetworkDocument(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__SendNetworkDocument * soap_new_ns1__SendNetworkDocument(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SendNetworkDocument(soap, n, NULL, NULL, NULL);
}

inline struct ns1__SendNetworkDocument * soap_new_req_ns1__SendNetworkDocument(
	struct soap *soap,
	const std::string& _in0)
{
	struct ns1__SendNetworkDocument *_p = ::soap_new_ns1__SendNetworkDocument(soap);
	if (_p)
	{	::soap_default_ns1__SendNetworkDocument(soap, _p);
		_p->_in0 = _in0;
	}
	return _p;
}

inline struct ns1__SendNetworkDocument * soap_new_set_ns1__SendNetworkDocument(
	struct soap *soap,
	const std::string& _in0)
{
	struct ns1__SendNetworkDocument *_p = ::soap_new_ns1__SendNetworkDocument(soap);
	if (_p)
	{	::soap_default_ns1__SendNetworkDocument(soap, _p);
		_p->_in0 = _in0;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__SendNetworkDocument(struct soap*, const struct ns1__SendNetworkDocument *, const char*, const char*);

inline int soap_write_ns1__SendNetworkDocument(struct soap *soap, struct ns1__SendNetworkDocument const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__SendNetworkDocument(soap, p), 0) || ::soap_put_ns1__SendNetworkDocument(soap, p, "ns1:SendNetworkDocument", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SendNetworkDocument(struct soap *soap, const char *URL, struct ns1__SendNetworkDocument const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__SendNetworkDocument(soap, p), 0) || ::soap_put_ns1__SendNetworkDocument(soap, p, "ns1:SendNetworkDocument", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__SendNetworkDocument(struct soap *soap, const char *URL, struct ns1__SendNetworkDocument const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__SendNetworkDocument(soap, p), 0) || ::soap_put_ns1__SendNetworkDocument(soap, p, "ns1:SendNetworkDocument", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SendNetworkDocument(struct soap *soap, const char *URL, struct ns1__SendNetworkDocument const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__SendNetworkDocument(soap, p), 0) || ::soap_put_ns1__SendNetworkDocument(soap, p, "ns1:SendNetworkDocument", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__SendNetworkDocument * SOAP_FMAC4 soap_get_ns1__SendNetworkDocument(struct soap*, struct ns1__SendNetworkDocument *, const char*, const char*);

inline int soap_read_ns1__SendNetworkDocument(struct soap *soap, struct ns1__SendNetworkDocument *p)
{
	if (p)
	{	::soap_default_ns1__SendNetworkDocument(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__SendNetworkDocument(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SendNetworkDocument(struct soap *soap, const char *URL, struct ns1__SendNetworkDocument *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__SendNetworkDocument(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SendNetworkDocument(struct soap *soap, struct ns1__SendNetworkDocument *p)
{
	if (::soap_read_ns1__SendNetworkDocument(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SendNetworkDocumentResponse_DEFINED
#define SOAP_TYPE_ns1__SendNetworkDocumentResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__SendNetworkDocumentResponse(struct soap*, struct ns1__SendNetworkDocumentResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__SendNetworkDocumentResponse(struct soap*, const struct ns1__SendNetworkDocumentResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SendNetworkDocumentResponse(struct soap*, const char*, int, const struct ns1__SendNetworkDocumentResponse *, const char*);
SOAP_FMAC3 struct ns1__SendNetworkDocumentResponse * SOAP_FMAC4 soap_in_ns1__SendNetworkDocumentResponse(struct soap*, const char*, struct ns1__SendNetworkDocumentResponse *, const char*);
SOAP_FMAC1 struct ns1__SendNetworkDocumentResponse * SOAP_FMAC2 soap_instantiate_ns1__SendNetworkDocumentResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__SendNetworkDocumentResponse * soap_new_ns1__SendNetworkDocumentResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SendNetworkDocumentResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__SendNetworkDocumentResponse * soap_new_req_ns1__SendNetworkDocumentResponse(
	struct soap *soap)
{
	struct ns1__SendNetworkDocumentResponse *_p = ::soap_new_ns1__SendNetworkDocumentResponse(soap);
	if (_p)
	{	::soap_default_ns1__SendNetworkDocumentResponse(soap, _p);
	}
	return _p;
}

inline struct ns1__SendNetworkDocumentResponse * soap_new_set_ns1__SendNetworkDocumentResponse(
	struct soap *soap)
{
	struct ns1__SendNetworkDocumentResponse *_p = ::soap_new_ns1__SendNetworkDocumentResponse(soap);
	if (_p)
	{	::soap_default_ns1__SendNetworkDocumentResponse(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__SendNetworkDocumentResponse(struct soap*, const struct ns1__SendNetworkDocumentResponse *, const char*, const char*);

inline int soap_write_ns1__SendNetworkDocumentResponse(struct soap *soap, struct ns1__SendNetworkDocumentResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__SendNetworkDocumentResponse(soap, p), 0) || ::soap_put_ns1__SendNetworkDocumentResponse(soap, p, "ns1:SendNetworkDocumentResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SendNetworkDocumentResponse(struct soap *soap, const char *URL, struct ns1__SendNetworkDocumentResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__SendNetworkDocumentResponse(soap, p), 0) || ::soap_put_ns1__SendNetworkDocumentResponse(soap, p, "ns1:SendNetworkDocumentResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__SendNetworkDocumentResponse(struct soap *soap, const char *URL, struct ns1__SendNetworkDocumentResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__SendNetworkDocumentResponse(soap, p), 0) || ::soap_put_ns1__SendNetworkDocumentResponse(soap, p, "ns1:SendNetworkDocumentResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SendNetworkDocumentResponse(struct soap *soap, const char *URL, struct ns1__SendNetworkDocumentResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__SendNetworkDocumentResponse(soap, p), 0) || ::soap_put_ns1__SendNetworkDocumentResponse(soap, p, "ns1:SendNetworkDocumentResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__SendNetworkDocumentResponse * SOAP_FMAC4 soap_get_ns1__SendNetworkDocumentResponse(struct soap*, struct ns1__SendNetworkDocumentResponse *, const char*, const char*);

inline int soap_read_ns1__SendNetworkDocumentResponse(struct soap *soap, struct ns1__SendNetworkDocumentResponse *p)
{
	if (p)
	{	::soap_default_ns1__SendNetworkDocumentResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__SendNetworkDocumentResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SendNetworkDocumentResponse(struct soap *soap, const char *URL, struct ns1__SendNetworkDocumentResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__SendNetworkDocumentResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SendNetworkDocumentResponse(struct soap *soap, struct ns1__SendNetworkDocumentResponse *p)
{
	if (::soap_read_ns1__SendNetworkDocumentResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SubscribeToDocumentType_DEFINED
#define SOAP_TYPE_ns1__SubscribeToDocumentType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__SubscribeToDocumentType(struct soap*, struct ns1__SubscribeToDocumentType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__SubscribeToDocumentType(struct soap*, const struct ns1__SubscribeToDocumentType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SubscribeToDocumentType(struct soap*, const char*, int, const struct ns1__SubscribeToDocumentType *, const char*);
SOAP_FMAC3 struct ns1__SubscribeToDocumentType * SOAP_FMAC4 soap_in_ns1__SubscribeToDocumentType(struct soap*, const char*, struct ns1__SubscribeToDocumentType *, const char*);
SOAP_FMAC1 struct ns1__SubscribeToDocumentType * SOAP_FMAC2 soap_instantiate_ns1__SubscribeToDocumentType(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__SubscribeToDocumentType * soap_new_ns1__SubscribeToDocumentType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SubscribeToDocumentType(soap, n, NULL, NULL, NULL);
}

inline struct ns1__SubscribeToDocumentType * soap_new_req_ns1__SubscribeToDocumentType(
	struct soap *soap,
	int _in0)
{
	struct ns1__SubscribeToDocumentType *_p = ::soap_new_ns1__SubscribeToDocumentType(soap);
	if (_p)
	{	::soap_default_ns1__SubscribeToDocumentType(soap, _p);
		_p->_in0 = _in0;
	}
	return _p;
}

inline struct ns1__SubscribeToDocumentType * soap_new_set_ns1__SubscribeToDocumentType(
	struct soap *soap,
	int _in0)
{
	struct ns1__SubscribeToDocumentType *_p = ::soap_new_ns1__SubscribeToDocumentType(soap);
	if (_p)
	{	::soap_default_ns1__SubscribeToDocumentType(soap, _p);
		_p->_in0 = _in0;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__SubscribeToDocumentType(struct soap*, const struct ns1__SubscribeToDocumentType *, const char*, const char*);

inline int soap_write_ns1__SubscribeToDocumentType(struct soap *soap, struct ns1__SubscribeToDocumentType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__SubscribeToDocumentType(soap, p), 0) || ::soap_put_ns1__SubscribeToDocumentType(soap, p, "ns1:SubscribeToDocumentType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SubscribeToDocumentType(struct soap *soap, const char *URL, struct ns1__SubscribeToDocumentType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__SubscribeToDocumentType(soap, p), 0) || ::soap_put_ns1__SubscribeToDocumentType(soap, p, "ns1:SubscribeToDocumentType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__SubscribeToDocumentType(struct soap *soap, const char *URL, struct ns1__SubscribeToDocumentType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__SubscribeToDocumentType(soap, p), 0) || ::soap_put_ns1__SubscribeToDocumentType(soap, p, "ns1:SubscribeToDocumentType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SubscribeToDocumentType(struct soap *soap, const char *URL, struct ns1__SubscribeToDocumentType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__SubscribeToDocumentType(soap, p), 0) || ::soap_put_ns1__SubscribeToDocumentType(soap, p, "ns1:SubscribeToDocumentType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__SubscribeToDocumentType * SOAP_FMAC4 soap_get_ns1__SubscribeToDocumentType(struct soap*, struct ns1__SubscribeToDocumentType *, const char*, const char*);

inline int soap_read_ns1__SubscribeToDocumentType(struct soap *soap, struct ns1__SubscribeToDocumentType *p)
{
	if (p)
	{	::soap_default_ns1__SubscribeToDocumentType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__SubscribeToDocumentType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SubscribeToDocumentType(struct soap *soap, const char *URL, struct ns1__SubscribeToDocumentType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__SubscribeToDocumentType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SubscribeToDocumentType(struct soap *soap, struct ns1__SubscribeToDocumentType *p)
{
	if (::soap_read_ns1__SubscribeToDocumentType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SubscribeToDocumentTypeResponse_DEFINED
#define SOAP_TYPE_ns1__SubscribeToDocumentTypeResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__SubscribeToDocumentTypeResponse(struct soap*, struct ns1__SubscribeToDocumentTypeResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__SubscribeToDocumentTypeResponse(struct soap*, const struct ns1__SubscribeToDocumentTypeResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SubscribeToDocumentTypeResponse(struct soap*, const char*, int, const struct ns1__SubscribeToDocumentTypeResponse *, const char*);
SOAP_FMAC3 struct ns1__SubscribeToDocumentTypeResponse * SOAP_FMAC4 soap_in_ns1__SubscribeToDocumentTypeResponse(struct soap*, const char*, struct ns1__SubscribeToDocumentTypeResponse *, const char*);
SOAP_FMAC1 struct ns1__SubscribeToDocumentTypeResponse * SOAP_FMAC2 soap_instantiate_ns1__SubscribeToDocumentTypeResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__SubscribeToDocumentTypeResponse * soap_new_ns1__SubscribeToDocumentTypeResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SubscribeToDocumentTypeResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__SubscribeToDocumentTypeResponse * soap_new_req_ns1__SubscribeToDocumentTypeResponse(
	struct soap *soap)
{
	struct ns1__SubscribeToDocumentTypeResponse *_p = ::soap_new_ns1__SubscribeToDocumentTypeResponse(soap);
	if (_p)
	{	::soap_default_ns1__SubscribeToDocumentTypeResponse(soap, _p);
	}
	return _p;
}

inline struct ns1__SubscribeToDocumentTypeResponse * soap_new_set_ns1__SubscribeToDocumentTypeResponse(
	struct soap *soap)
{
	struct ns1__SubscribeToDocumentTypeResponse *_p = ::soap_new_ns1__SubscribeToDocumentTypeResponse(soap);
	if (_p)
	{	::soap_default_ns1__SubscribeToDocumentTypeResponse(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__SubscribeToDocumentTypeResponse(struct soap*, const struct ns1__SubscribeToDocumentTypeResponse *, const char*, const char*);

inline int soap_write_ns1__SubscribeToDocumentTypeResponse(struct soap *soap, struct ns1__SubscribeToDocumentTypeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__SubscribeToDocumentTypeResponse(soap, p), 0) || ::soap_put_ns1__SubscribeToDocumentTypeResponse(soap, p, "ns1:SubscribeToDocumentTypeResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SubscribeToDocumentTypeResponse(struct soap *soap, const char *URL, struct ns1__SubscribeToDocumentTypeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__SubscribeToDocumentTypeResponse(soap, p), 0) || ::soap_put_ns1__SubscribeToDocumentTypeResponse(soap, p, "ns1:SubscribeToDocumentTypeResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__SubscribeToDocumentTypeResponse(struct soap *soap, const char *URL, struct ns1__SubscribeToDocumentTypeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__SubscribeToDocumentTypeResponse(soap, p), 0) || ::soap_put_ns1__SubscribeToDocumentTypeResponse(soap, p, "ns1:SubscribeToDocumentTypeResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SubscribeToDocumentTypeResponse(struct soap *soap, const char *URL, struct ns1__SubscribeToDocumentTypeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__SubscribeToDocumentTypeResponse(soap, p), 0) || ::soap_put_ns1__SubscribeToDocumentTypeResponse(soap, p, "ns1:SubscribeToDocumentTypeResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__SubscribeToDocumentTypeResponse * SOAP_FMAC4 soap_get_ns1__SubscribeToDocumentTypeResponse(struct soap*, struct ns1__SubscribeToDocumentTypeResponse *, const char*, const char*);

inline int soap_read_ns1__SubscribeToDocumentTypeResponse(struct soap *soap, struct ns1__SubscribeToDocumentTypeResponse *p)
{
	if (p)
	{	::soap_default_ns1__SubscribeToDocumentTypeResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__SubscribeToDocumentTypeResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SubscribeToDocumentTypeResponse(struct soap *soap, const char *URL, struct ns1__SubscribeToDocumentTypeResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__SubscribeToDocumentTypeResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SubscribeToDocumentTypeResponse(struct soap *soap, struct ns1__SubscribeToDocumentTypeResponse *p)
{
	if (::soap_read_ns1__SubscribeToDocumentTypeResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__UnSubscribeToDocumentType_DEFINED
#define SOAP_TYPE_ns1__UnSubscribeToDocumentType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__UnSubscribeToDocumentType(struct soap*, struct ns1__UnSubscribeToDocumentType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__UnSubscribeToDocumentType(struct soap*, const struct ns1__UnSubscribeToDocumentType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__UnSubscribeToDocumentType(struct soap*, const char*, int, const struct ns1__UnSubscribeToDocumentType *, const char*);
SOAP_FMAC3 struct ns1__UnSubscribeToDocumentType * SOAP_FMAC4 soap_in_ns1__UnSubscribeToDocumentType(struct soap*, const char*, struct ns1__UnSubscribeToDocumentType *, const char*);
SOAP_FMAC1 struct ns1__UnSubscribeToDocumentType * SOAP_FMAC2 soap_instantiate_ns1__UnSubscribeToDocumentType(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__UnSubscribeToDocumentType * soap_new_ns1__UnSubscribeToDocumentType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__UnSubscribeToDocumentType(soap, n, NULL, NULL, NULL);
}

inline struct ns1__UnSubscribeToDocumentType * soap_new_req_ns1__UnSubscribeToDocumentType(
	struct soap *soap,
	int _in0)
{
	struct ns1__UnSubscribeToDocumentType *_p = ::soap_new_ns1__UnSubscribeToDocumentType(soap);
	if (_p)
	{	::soap_default_ns1__UnSubscribeToDocumentType(soap, _p);
		_p->_in0 = _in0;
	}
	return _p;
}

inline struct ns1__UnSubscribeToDocumentType * soap_new_set_ns1__UnSubscribeToDocumentType(
	struct soap *soap,
	int _in0)
{
	struct ns1__UnSubscribeToDocumentType *_p = ::soap_new_ns1__UnSubscribeToDocumentType(soap);
	if (_p)
	{	::soap_default_ns1__UnSubscribeToDocumentType(soap, _p);
		_p->_in0 = _in0;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__UnSubscribeToDocumentType(struct soap*, const struct ns1__UnSubscribeToDocumentType *, const char*, const char*);

inline int soap_write_ns1__UnSubscribeToDocumentType(struct soap *soap, struct ns1__UnSubscribeToDocumentType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__UnSubscribeToDocumentType(soap, p), 0) || ::soap_put_ns1__UnSubscribeToDocumentType(soap, p, "ns1:UnSubscribeToDocumentType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__UnSubscribeToDocumentType(struct soap *soap, const char *URL, struct ns1__UnSubscribeToDocumentType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__UnSubscribeToDocumentType(soap, p), 0) || ::soap_put_ns1__UnSubscribeToDocumentType(soap, p, "ns1:UnSubscribeToDocumentType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__UnSubscribeToDocumentType(struct soap *soap, const char *URL, struct ns1__UnSubscribeToDocumentType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__UnSubscribeToDocumentType(soap, p), 0) || ::soap_put_ns1__UnSubscribeToDocumentType(soap, p, "ns1:UnSubscribeToDocumentType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__UnSubscribeToDocumentType(struct soap *soap, const char *URL, struct ns1__UnSubscribeToDocumentType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__UnSubscribeToDocumentType(soap, p), 0) || ::soap_put_ns1__UnSubscribeToDocumentType(soap, p, "ns1:UnSubscribeToDocumentType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__UnSubscribeToDocumentType * SOAP_FMAC4 soap_get_ns1__UnSubscribeToDocumentType(struct soap*, struct ns1__UnSubscribeToDocumentType *, const char*, const char*);

inline int soap_read_ns1__UnSubscribeToDocumentType(struct soap *soap, struct ns1__UnSubscribeToDocumentType *p)
{
	if (p)
	{	::soap_default_ns1__UnSubscribeToDocumentType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__UnSubscribeToDocumentType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__UnSubscribeToDocumentType(struct soap *soap, const char *URL, struct ns1__UnSubscribeToDocumentType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__UnSubscribeToDocumentType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__UnSubscribeToDocumentType(struct soap *soap, struct ns1__UnSubscribeToDocumentType *p)
{
	if (::soap_read_ns1__UnSubscribeToDocumentType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__UnSubscribeToDocumentTypeResponse_DEFINED
#define SOAP_TYPE_ns1__UnSubscribeToDocumentTypeResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__UnSubscribeToDocumentTypeResponse(struct soap*, struct ns1__UnSubscribeToDocumentTypeResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__UnSubscribeToDocumentTypeResponse(struct soap*, const struct ns1__UnSubscribeToDocumentTypeResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__UnSubscribeToDocumentTypeResponse(struct soap*, const char*, int, const struct ns1__UnSubscribeToDocumentTypeResponse *, const char*);
SOAP_FMAC3 struct ns1__UnSubscribeToDocumentTypeResponse * SOAP_FMAC4 soap_in_ns1__UnSubscribeToDocumentTypeResponse(struct soap*, const char*, struct ns1__UnSubscribeToDocumentTypeResponse *, const char*);
SOAP_FMAC1 struct ns1__UnSubscribeToDocumentTypeResponse * SOAP_FMAC2 soap_instantiate_ns1__UnSubscribeToDocumentTypeResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__UnSubscribeToDocumentTypeResponse * soap_new_ns1__UnSubscribeToDocumentTypeResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__UnSubscribeToDocumentTypeResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__UnSubscribeToDocumentTypeResponse * soap_new_req_ns1__UnSubscribeToDocumentTypeResponse(
	struct soap *soap)
{
	struct ns1__UnSubscribeToDocumentTypeResponse *_p = ::soap_new_ns1__UnSubscribeToDocumentTypeResponse(soap);
	if (_p)
	{	::soap_default_ns1__UnSubscribeToDocumentTypeResponse(soap, _p);
	}
	return _p;
}

inline struct ns1__UnSubscribeToDocumentTypeResponse * soap_new_set_ns1__UnSubscribeToDocumentTypeResponse(
	struct soap *soap)
{
	struct ns1__UnSubscribeToDocumentTypeResponse *_p = ::soap_new_ns1__UnSubscribeToDocumentTypeResponse(soap);
	if (_p)
	{	::soap_default_ns1__UnSubscribeToDocumentTypeResponse(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__UnSubscribeToDocumentTypeResponse(struct soap*, const struct ns1__UnSubscribeToDocumentTypeResponse *, const char*, const char*);

inline int soap_write_ns1__UnSubscribeToDocumentTypeResponse(struct soap *soap, struct ns1__UnSubscribeToDocumentTypeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__UnSubscribeToDocumentTypeResponse(soap, p), 0) || ::soap_put_ns1__UnSubscribeToDocumentTypeResponse(soap, p, "ns1:UnSubscribeToDocumentTypeResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__UnSubscribeToDocumentTypeResponse(struct soap *soap, const char *URL, struct ns1__UnSubscribeToDocumentTypeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__UnSubscribeToDocumentTypeResponse(soap, p), 0) || ::soap_put_ns1__UnSubscribeToDocumentTypeResponse(soap, p, "ns1:UnSubscribeToDocumentTypeResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__UnSubscribeToDocumentTypeResponse(struct soap *soap, const char *URL, struct ns1__UnSubscribeToDocumentTypeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__UnSubscribeToDocumentTypeResponse(soap, p), 0) || ::soap_put_ns1__UnSubscribeToDocumentTypeResponse(soap, p, "ns1:UnSubscribeToDocumentTypeResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__UnSubscribeToDocumentTypeResponse(struct soap *soap, const char *URL, struct ns1__UnSubscribeToDocumentTypeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__UnSubscribeToDocumentTypeResponse(soap, p), 0) || ::soap_put_ns1__UnSubscribeToDocumentTypeResponse(soap, p, "ns1:UnSubscribeToDocumentTypeResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__UnSubscribeToDocumentTypeResponse * SOAP_FMAC4 soap_get_ns1__UnSubscribeToDocumentTypeResponse(struct soap*, struct ns1__UnSubscribeToDocumentTypeResponse *, const char*, const char*);

inline int soap_read_ns1__UnSubscribeToDocumentTypeResponse(struct soap *soap, struct ns1__UnSubscribeToDocumentTypeResponse *p)
{
	if (p)
	{	::soap_default_ns1__UnSubscribeToDocumentTypeResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__UnSubscribeToDocumentTypeResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__UnSubscribeToDocumentTypeResponse(struct soap *soap, const char *URL, struct ns1__UnSubscribeToDocumentTypeResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__UnSubscribeToDocumentTypeResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__UnSubscribeToDocumentTypeResponse(struct soap *soap, struct ns1__UnSubscribeToDocumentTypeResponse *p)
{
	if (::soap_read_ns1__UnSubscribeToDocumentTypeResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SendServerUpdateNotification_DEFINED
#define SOAP_TYPE_ns1__SendServerUpdateNotification_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__SendServerUpdateNotification(struct soap*, struct ns1__SendServerUpdateNotification *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__SendServerUpdateNotification(struct soap*, const struct ns1__SendServerUpdateNotification *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SendServerUpdateNotification(struct soap*, const char*, int, const struct ns1__SendServerUpdateNotification *, const char*);
SOAP_FMAC3 struct ns1__SendServerUpdateNotification * SOAP_FMAC4 soap_in_ns1__SendServerUpdateNotification(struct soap*, const char*, struct ns1__SendServerUpdateNotification *, const char*);
SOAP_FMAC1 struct ns1__SendServerUpdateNotification * SOAP_FMAC2 soap_instantiate_ns1__SendServerUpdateNotification(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__SendServerUpdateNotification * soap_new_ns1__SendServerUpdateNotification(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SendServerUpdateNotification(soap, n, NULL, NULL, NULL);
}

inline struct ns1__SendServerUpdateNotification * soap_new_req_ns1__SendServerUpdateNotification(
	struct soap *soap,
	const std::string& _in0)
{
	struct ns1__SendServerUpdateNotification *_p = ::soap_new_ns1__SendServerUpdateNotification(soap);
	if (_p)
	{	::soap_default_ns1__SendServerUpdateNotification(soap, _p);
		_p->_in0 = _in0;
	}
	return _p;
}

inline struct ns1__SendServerUpdateNotification * soap_new_set_ns1__SendServerUpdateNotification(
	struct soap *soap,
	const std::string& _in0)
{
	struct ns1__SendServerUpdateNotification *_p = ::soap_new_ns1__SendServerUpdateNotification(soap);
	if (_p)
	{	::soap_default_ns1__SendServerUpdateNotification(soap, _p);
		_p->_in0 = _in0;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__SendServerUpdateNotification(struct soap*, const struct ns1__SendServerUpdateNotification *, const char*, const char*);

inline int soap_write_ns1__SendServerUpdateNotification(struct soap *soap, struct ns1__SendServerUpdateNotification const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__SendServerUpdateNotification(soap, p), 0) || ::soap_put_ns1__SendServerUpdateNotification(soap, p, "ns1:SendServerUpdateNotification", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SendServerUpdateNotification(struct soap *soap, const char *URL, struct ns1__SendServerUpdateNotification const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__SendServerUpdateNotification(soap, p), 0) || ::soap_put_ns1__SendServerUpdateNotification(soap, p, "ns1:SendServerUpdateNotification", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__SendServerUpdateNotification(struct soap *soap, const char *URL, struct ns1__SendServerUpdateNotification const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__SendServerUpdateNotification(soap, p), 0) || ::soap_put_ns1__SendServerUpdateNotification(soap, p, "ns1:SendServerUpdateNotification", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SendServerUpdateNotification(struct soap *soap, const char *URL, struct ns1__SendServerUpdateNotification const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__SendServerUpdateNotification(soap, p), 0) || ::soap_put_ns1__SendServerUpdateNotification(soap, p, "ns1:SendServerUpdateNotification", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__SendServerUpdateNotification * SOAP_FMAC4 soap_get_ns1__SendServerUpdateNotification(struct soap*, struct ns1__SendServerUpdateNotification *, const char*, const char*);

inline int soap_read_ns1__SendServerUpdateNotification(struct soap *soap, struct ns1__SendServerUpdateNotification *p)
{
	if (p)
	{	::soap_default_ns1__SendServerUpdateNotification(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__SendServerUpdateNotification(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SendServerUpdateNotification(struct soap *soap, const char *URL, struct ns1__SendServerUpdateNotification *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__SendServerUpdateNotification(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SendServerUpdateNotification(struct soap *soap, struct ns1__SendServerUpdateNotification *p)
{
	if (::soap_read_ns1__SendServerUpdateNotification(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SendServerUpdateNotificationResponse_DEFINED
#define SOAP_TYPE_ns1__SendServerUpdateNotificationResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__SendServerUpdateNotificationResponse(struct soap*, struct ns1__SendServerUpdateNotificationResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__SendServerUpdateNotificationResponse(struct soap*, const struct ns1__SendServerUpdateNotificationResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SendServerUpdateNotificationResponse(struct soap*, const char*, int, const struct ns1__SendServerUpdateNotificationResponse *, const char*);
SOAP_FMAC3 struct ns1__SendServerUpdateNotificationResponse * SOAP_FMAC4 soap_in_ns1__SendServerUpdateNotificationResponse(struct soap*, const char*, struct ns1__SendServerUpdateNotificationResponse *, const char*);
SOAP_FMAC1 struct ns1__SendServerUpdateNotificationResponse * SOAP_FMAC2 soap_instantiate_ns1__SendServerUpdateNotificationResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__SendServerUpdateNotificationResponse * soap_new_ns1__SendServerUpdateNotificationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SendServerUpdateNotificationResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__SendServerUpdateNotificationResponse * soap_new_req_ns1__SendServerUpdateNotificationResponse(
	struct soap *soap)
{
	struct ns1__SendServerUpdateNotificationResponse *_p = ::soap_new_ns1__SendServerUpdateNotificationResponse(soap);
	if (_p)
	{	::soap_default_ns1__SendServerUpdateNotificationResponse(soap, _p);
	}
	return _p;
}

inline struct ns1__SendServerUpdateNotificationResponse * soap_new_set_ns1__SendServerUpdateNotificationResponse(
	struct soap *soap)
{
	struct ns1__SendServerUpdateNotificationResponse *_p = ::soap_new_ns1__SendServerUpdateNotificationResponse(soap);
	if (_p)
	{	::soap_default_ns1__SendServerUpdateNotificationResponse(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__SendServerUpdateNotificationResponse(struct soap*, const struct ns1__SendServerUpdateNotificationResponse *, const char*, const char*);

inline int soap_write_ns1__SendServerUpdateNotificationResponse(struct soap *soap, struct ns1__SendServerUpdateNotificationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__SendServerUpdateNotificationResponse(soap, p), 0) || ::soap_put_ns1__SendServerUpdateNotificationResponse(soap, p, "ns1:SendServerUpdateNotificationResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SendServerUpdateNotificationResponse(struct soap *soap, const char *URL, struct ns1__SendServerUpdateNotificationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__SendServerUpdateNotificationResponse(soap, p), 0) || ::soap_put_ns1__SendServerUpdateNotificationResponse(soap, p, "ns1:SendServerUpdateNotificationResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__SendServerUpdateNotificationResponse(struct soap *soap, const char *URL, struct ns1__SendServerUpdateNotificationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__SendServerUpdateNotificationResponse(soap, p), 0) || ::soap_put_ns1__SendServerUpdateNotificationResponse(soap, p, "ns1:SendServerUpdateNotificationResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SendServerUpdateNotificationResponse(struct soap *soap, const char *URL, struct ns1__SendServerUpdateNotificationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__SendServerUpdateNotificationResponse(soap, p), 0) || ::soap_put_ns1__SendServerUpdateNotificationResponse(soap, p, "ns1:SendServerUpdateNotificationResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__SendServerUpdateNotificationResponse * SOAP_FMAC4 soap_get_ns1__SendServerUpdateNotificationResponse(struct soap*, struct ns1__SendServerUpdateNotificationResponse *, const char*, const char*);

inline int soap_read_ns1__SendServerUpdateNotificationResponse(struct soap *soap, struct ns1__SendServerUpdateNotificationResponse *p)
{
	if (p)
	{	::soap_default_ns1__SendServerUpdateNotificationResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__SendServerUpdateNotificationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SendServerUpdateNotificationResponse(struct soap *soap, const char *URL, struct ns1__SendServerUpdateNotificationResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__SendServerUpdateNotificationResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SendServerUpdateNotificationResponse(struct soap *soap, struct ns1__SendServerUpdateNotificationResponse *p)
{
	if (::soap_read_ns1__SendServerUpdateNotificationResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SetClientType_DEFINED
#define SOAP_TYPE_ns1__SetClientType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__SetClientType(struct soap*, struct ns1__SetClientType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__SetClientType(struct soap*, const struct ns1__SetClientType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SetClientType(struct soap*, const char*, int, const struct ns1__SetClientType *, const char*);
SOAP_FMAC3 struct ns1__SetClientType * SOAP_FMAC4 soap_in_ns1__SetClientType(struct soap*, const char*, struct ns1__SetClientType *, const char*);
SOAP_FMAC1 struct ns1__SetClientType * SOAP_FMAC2 soap_instantiate_ns1__SetClientType(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__SetClientType * soap_new_ns1__SetClientType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SetClientType(soap, n, NULL, NULL, NULL);
}

inline struct ns1__SetClientType * soap_new_req_ns1__SetClientType(
	struct soap *soap,
	int _in0)
{
	struct ns1__SetClientType *_p = ::soap_new_ns1__SetClientType(soap);
	if (_p)
	{	::soap_default_ns1__SetClientType(soap, _p);
		_p->_in0 = _in0;
	}
	return _p;
}

inline struct ns1__SetClientType * soap_new_set_ns1__SetClientType(
	struct soap *soap,
	int _in0)
{
	struct ns1__SetClientType *_p = ::soap_new_ns1__SetClientType(soap);
	if (_p)
	{	::soap_default_ns1__SetClientType(soap, _p);
		_p->_in0 = _in0;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__SetClientType(struct soap*, const struct ns1__SetClientType *, const char*, const char*);

inline int soap_write_ns1__SetClientType(struct soap *soap, struct ns1__SetClientType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__SetClientType(soap, p), 0) || ::soap_put_ns1__SetClientType(soap, p, "ns1:SetClientType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SetClientType(struct soap *soap, const char *URL, struct ns1__SetClientType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__SetClientType(soap, p), 0) || ::soap_put_ns1__SetClientType(soap, p, "ns1:SetClientType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__SetClientType(struct soap *soap, const char *URL, struct ns1__SetClientType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__SetClientType(soap, p), 0) || ::soap_put_ns1__SetClientType(soap, p, "ns1:SetClientType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SetClientType(struct soap *soap, const char *URL, struct ns1__SetClientType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__SetClientType(soap, p), 0) || ::soap_put_ns1__SetClientType(soap, p, "ns1:SetClientType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__SetClientType * SOAP_FMAC4 soap_get_ns1__SetClientType(struct soap*, struct ns1__SetClientType *, const char*, const char*);

inline int soap_read_ns1__SetClientType(struct soap *soap, struct ns1__SetClientType *p)
{
	if (p)
	{	::soap_default_ns1__SetClientType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__SetClientType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SetClientType(struct soap *soap, const char *URL, struct ns1__SetClientType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__SetClientType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SetClientType(struct soap *soap, struct ns1__SetClientType *p)
{
	if (::soap_read_ns1__SetClientType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SetClientTypeResponse_DEFINED
#define SOAP_TYPE_ns1__SetClientTypeResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__SetClientTypeResponse(struct soap*, struct ns1__SetClientTypeResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__SetClientTypeResponse(struct soap*, const struct ns1__SetClientTypeResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SetClientTypeResponse(struct soap*, const char*, int, const struct ns1__SetClientTypeResponse *, const char*);
SOAP_FMAC3 struct ns1__SetClientTypeResponse * SOAP_FMAC4 soap_in_ns1__SetClientTypeResponse(struct soap*, const char*, struct ns1__SetClientTypeResponse *, const char*);
SOAP_FMAC1 struct ns1__SetClientTypeResponse * SOAP_FMAC2 soap_instantiate_ns1__SetClientTypeResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__SetClientTypeResponse * soap_new_ns1__SetClientTypeResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SetClientTypeResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__SetClientTypeResponse * soap_new_req_ns1__SetClientTypeResponse(
	struct soap *soap)
{
	struct ns1__SetClientTypeResponse *_p = ::soap_new_ns1__SetClientTypeResponse(soap);
	if (_p)
	{	::soap_default_ns1__SetClientTypeResponse(soap, _p);
	}
	return _p;
}

inline struct ns1__SetClientTypeResponse * soap_new_set_ns1__SetClientTypeResponse(
	struct soap *soap)
{
	struct ns1__SetClientTypeResponse *_p = ::soap_new_ns1__SetClientTypeResponse(soap);
	if (_p)
	{	::soap_default_ns1__SetClientTypeResponse(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__SetClientTypeResponse(struct soap*, const struct ns1__SetClientTypeResponse *, const char*, const char*);

inline int soap_write_ns1__SetClientTypeResponse(struct soap *soap, struct ns1__SetClientTypeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__SetClientTypeResponse(soap, p), 0) || ::soap_put_ns1__SetClientTypeResponse(soap, p, "ns1:SetClientTypeResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SetClientTypeResponse(struct soap *soap, const char *URL, struct ns1__SetClientTypeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__SetClientTypeResponse(soap, p), 0) || ::soap_put_ns1__SetClientTypeResponse(soap, p, "ns1:SetClientTypeResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__SetClientTypeResponse(struct soap *soap, const char *URL, struct ns1__SetClientTypeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__SetClientTypeResponse(soap, p), 0) || ::soap_put_ns1__SetClientTypeResponse(soap, p, "ns1:SetClientTypeResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SetClientTypeResponse(struct soap *soap, const char *URL, struct ns1__SetClientTypeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__SetClientTypeResponse(soap, p), 0) || ::soap_put_ns1__SetClientTypeResponse(soap, p, "ns1:SetClientTypeResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__SetClientTypeResponse * SOAP_FMAC4 soap_get_ns1__SetClientTypeResponse(struct soap*, struct ns1__SetClientTypeResponse *, const char*, const char*);

inline int soap_read_ns1__SetClientTypeResponse(struct soap *soap, struct ns1__SetClientTypeResponse *p)
{
	if (p)
	{	::soap_default_ns1__SetClientTypeResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__SetClientTypeResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SetClientTypeResponse(struct soap *soap, const char *URL, struct ns1__SetClientTypeResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__SetClientTypeResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SetClientTypeResponse(struct soap *soap, struct ns1__SetClientTypeResponse *p)
{
	if (::soap_read_ns1__SetClientTypeResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GetRunningCenterCord_DEFINED
#define SOAP_TYPE_ns1__GetRunningCenterCord_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__GetRunningCenterCord(struct soap*, struct ns1__GetRunningCenterCord *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__GetRunningCenterCord(struct soap*, const struct ns1__GetRunningCenterCord *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetRunningCenterCord(struct soap*, const char*, int, const struct ns1__GetRunningCenterCord *, const char*);
SOAP_FMAC3 struct ns1__GetRunningCenterCord * SOAP_FMAC4 soap_in_ns1__GetRunningCenterCord(struct soap*, const char*, struct ns1__GetRunningCenterCord *, const char*);
SOAP_FMAC1 struct ns1__GetRunningCenterCord * SOAP_FMAC2 soap_instantiate_ns1__GetRunningCenterCord(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__GetRunningCenterCord * soap_new_ns1__GetRunningCenterCord(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetRunningCenterCord(soap, n, NULL, NULL, NULL);
}

inline struct ns1__GetRunningCenterCord * soap_new_req_ns1__GetRunningCenterCord(
	struct soap *soap)
{
	struct ns1__GetRunningCenterCord *_p = ::soap_new_ns1__GetRunningCenterCord(soap);
	if (_p)
	{	::soap_default_ns1__GetRunningCenterCord(soap, _p);
	}
	return _p;
}

inline struct ns1__GetRunningCenterCord * soap_new_set_ns1__GetRunningCenterCord(
	struct soap *soap)
{
	struct ns1__GetRunningCenterCord *_p = ::soap_new_ns1__GetRunningCenterCord(soap);
	if (_p)
	{	::soap_default_ns1__GetRunningCenterCord(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__GetRunningCenterCord(struct soap*, const struct ns1__GetRunningCenterCord *, const char*, const char*);

inline int soap_write_ns1__GetRunningCenterCord(struct soap *soap, struct ns1__GetRunningCenterCord const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__GetRunningCenterCord(soap, p), 0) || ::soap_put_ns1__GetRunningCenterCord(soap, p, "ns1:GetRunningCenterCord", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetRunningCenterCord(struct soap *soap, const char *URL, struct ns1__GetRunningCenterCord const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetRunningCenterCord(soap, p), 0) || ::soap_put_ns1__GetRunningCenterCord(soap, p, "ns1:GetRunningCenterCord", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__GetRunningCenterCord(struct soap *soap, const char *URL, struct ns1__GetRunningCenterCord const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetRunningCenterCord(soap, p), 0) || ::soap_put_ns1__GetRunningCenterCord(soap, p, "ns1:GetRunningCenterCord", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetRunningCenterCord(struct soap *soap, const char *URL, struct ns1__GetRunningCenterCord const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetRunningCenterCord(soap, p), 0) || ::soap_put_ns1__GetRunningCenterCord(soap, p, "ns1:GetRunningCenterCord", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__GetRunningCenterCord * SOAP_FMAC4 soap_get_ns1__GetRunningCenterCord(struct soap*, struct ns1__GetRunningCenterCord *, const char*, const char*);

inline int soap_read_ns1__GetRunningCenterCord(struct soap *soap, struct ns1__GetRunningCenterCord *p)
{
	if (p)
	{	::soap_default_ns1__GetRunningCenterCord(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__GetRunningCenterCord(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetRunningCenterCord(struct soap *soap, const char *URL, struct ns1__GetRunningCenterCord *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__GetRunningCenterCord(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GetRunningCenterCord(struct soap *soap, struct ns1__GetRunningCenterCord *p)
{
	if (::soap_read_ns1__GetRunningCenterCord(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GetRunningCenterCordResponse_DEFINED
#define SOAP_TYPE_ns1__GetRunningCenterCordResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__GetRunningCenterCordResponse(struct soap*, struct ns1__GetRunningCenterCordResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__GetRunningCenterCordResponse(struct soap*, const struct ns1__GetRunningCenterCordResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetRunningCenterCordResponse(struct soap*, const char*, int, const struct ns1__GetRunningCenterCordResponse *, const char*);
SOAP_FMAC3 struct ns1__GetRunningCenterCordResponse * SOAP_FMAC4 soap_in_ns1__GetRunningCenterCordResponse(struct soap*, const char*, struct ns1__GetRunningCenterCordResponse *, const char*);
SOAP_FMAC1 struct ns1__GetRunningCenterCordResponse * SOAP_FMAC2 soap_instantiate_ns1__GetRunningCenterCordResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__GetRunningCenterCordResponse * soap_new_ns1__GetRunningCenterCordResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetRunningCenterCordResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__GetRunningCenterCordResponse * soap_new_req_ns1__GetRunningCenterCordResponse(
	struct soap *soap)
{
	struct ns1__GetRunningCenterCordResponse *_p = ::soap_new_ns1__GetRunningCenterCordResponse(soap);
	if (_p)
	{	::soap_default_ns1__GetRunningCenterCordResponse(soap, _p);
	}
	return _p;
}

inline struct ns1__GetRunningCenterCordResponse * soap_new_set_ns1__GetRunningCenterCordResponse(
	struct soap *soap,
	ns1__DCenterCordInfo *GetRunningCenterCordReturn)
{
	struct ns1__GetRunningCenterCordResponse *_p = ::soap_new_ns1__GetRunningCenterCordResponse(soap);
	if (_p)
	{	::soap_default_ns1__GetRunningCenterCordResponse(soap, _p);
		_p->GetRunningCenterCordReturn = GetRunningCenterCordReturn;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__GetRunningCenterCordResponse(struct soap*, const struct ns1__GetRunningCenterCordResponse *, const char*, const char*);

inline int soap_write_ns1__GetRunningCenterCordResponse(struct soap *soap, struct ns1__GetRunningCenterCordResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__GetRunningCenterCordResponse(soap, p), 0) || ::soap_put_ns1__GetRunningCenterCordResponse(soap, p, "ns1:GetRunningCenterCordResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetRunningCenterCordResponse(struct soap *soap, const char *URL, struct ns1__GetRunningCenterCordResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetRunningCenterCordResponse(soap, p), 0) || ::soap_put_ns1__GetRunningCenterCordResponse(soap, p, "ns1:GetRunningCenterCordResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__GetRunningCenterCordResponse(struct soap *soap, const char *URL, struct ns1__GetRunningCenterCordResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetRunningCenterCordResponse(soap, p), 0) || ::soap_put_ns1__GetRunningCenterCordResponse(soap, p, "ns1:GetRunningCenterCordResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetRunningCenterCordResponse(struct soap *soap, const char *URL, struct ns1__GetRunningCenterCordResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetRunningCenterCordResponse(soap, p), 0) || ::soap_put_ns1__GetRunningCenterCordResponse(soap, p, "ns1:GetRunningCenterCordResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__GetRunningCenterCordResponse * SOAP_FMAC4 soap_get_ns1__GetRunningCenterCordResponse(struct soap*, struct ns1__GetRunningCenterCordResponse *, const char*, const char*);

inline int soap_read_ns1__GetRunningCenterCordResponse(struct soap *soap, struct ns1__GetRunningCenterCordResponse *p)
{
	if (p)
	{	::soap_default_ns1__GetRunningCenterCordResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__GetRunningCenterCordResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetRunningCenterCordResponse(struct soap *soap, const char *URL, struct ns1__GetRunningCenterCordResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__GetRunningCenterCordResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GetRunningCenterCordResponse(struct soap *soap, struct ns1__GetRunningCenterCordResponse *p)
{
	if (::soap_read_ns1__GetRunningCenterCordResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__DeleteAlert_DEFINED
#define SOAP_TYPE_ns1__DeleteAlert_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__DeleteAlert(struct soap*, struct ns1__DeleteAlert *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__DeleteAlert(struct soap*, const struct ns1__DeleteAlert *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DeleteAlert(struct soap*, const char*, int, const struct ns1__DeleteAlert *, const char*);
SOAP_FMAC3 struct ns1__DeleteAlert * SOAP_FMAC4 soap_in_ns1__DeleteAlert(struct soap*, const char*, struct ns1__DeleteAlert *, const char*);
SOAP_FMAC1 struct ns1__DeleteAlert * SOAP_FMAC2 soap_instantiate_ns1__DeleteAlert(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__DeleteAlert * soap_new_ns1__DeleteAlert(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__DeleteAlert(soap, n, NULL, NULL, NULL);
}

inline struct ns1__DeleteAlert * soap_new_req_ns1__DeleteAlert(
	struct soap *soap,
	int _in0)
{
	struct ns1__DeleteAlert *_p = ::soap_new_ns1__DeleteAlert(soap);
	if (_p)
	{	::soap_default_ns1__DeleteAlert(soap, _p);
		_p->_in0 = _in0;
	}
	return _p;
}

inline struct ns1__DeleteAlert * soap_new_set_ns1__DeleteAlert(
	struct soap *soap,
	int _in0)
{
	struct ns1__DeleteAlert *_p = ::soap_new_ns1__DeleteAlert(soap);
	if (_p)
	{	::soap_default_ns1__DeleteAlert(soap, _p);
		_p->_in0 = _in0;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__DeleteAlert(struct soap*, const struct ns1__DeleteAlert *, const char*, const char*);

inline int soap_write_ns1__DeleteAlert(struct soap *soap, struct ns1__DeleteAlert const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__DeleteAlert(soap, p), 0) || ::soap_put_ns1__DeleteAlert(soap, p, "ns1:DeleteAlert", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__DeleteAlert(struct soap *soap, const char *URL, struct ns1__DeleteAlert const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__DeleteAlert(soap, p), 0) || ::soap_put_ns1__DeleteAlert(soap, p, "ns1:DeleteAlert", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__DeleteAlert(struct soap *soap, const char *URL, struct ns1__DeleteAlert const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__DeleteAlert(soap, p), 0) || ::soap_put_ns1__DeleteAlert(soap, p, "ns1:DeleteAlert", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__DeleteAlert(struct soap *soap, const char *URL, struct ns1__DeleteAlert const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__DeleteAlert(soap, p), 0) || ::soap_put_ns1__DeleteAlert(soap, p, "ns1:DeleteAlert", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__DeleteAlert * SOAP_FMAC4 soap_get_ns1__DeleteAlert(struct soap*, struct ns1__DeleteAlert *, const char*, const char*);

inline int soap_read_ns1__DeleteAlert(struct soap *soap, struct ns1__DeleteAlert *p)
{
	if (p)
	{	::soap_default_ns1__DeleteAlert(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__DeleteAlert(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__DeleteAlert(struct soap *soap, const char *URL, struct ns1__DeleteAlert *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__DeleteAlert(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__DeleteAlert(struct soap *soap, struct ns1__DeleteAlert *p)
{
	if (::soap_read_ns1__DeleteAlert(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__DeleteAlertResponse_DEFINED
#define SOAP_TYPE_ns1__DeleteAlertResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__DeleteAlertResponse(struct soap*, struct ns1__DeleteAlertResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__DeleteAlertResponse(struct soap*, const struct ns1__DeleteAlertResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DeleteAlertResponse(struct soap*, const char*, int, const struct ns1__DeleteAlertResponse *, const char*);
SOAP_FMAC3 struct ns1__DeleteAlertResponse * SOAP_FMAC4 soap_in_ns1__DeleteAlertResponse(struct soap*, const char*, struct ns1__DeleteAlertResponse *, const char*);
SOAP_FMAC1 struct ns1__DeleteAlertResponse * SOAP_FMAC2 soap_instantiate_ns1__DeleteAlertResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__DeleteAlertResponse * soap_new_ns1__DeleteAlertResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__DeleteAlertResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__DeleteAlertResponse * soap_new_req_ns1__DeleteAlertResponse(
	struct soap *soap)
{
	struct ns1__DeleteAlertResponse *_p = ::soap_new_ns1__DeleteAlertResponse(soap);
	if (_p)
	{	::soap_default_ns1__DeleteAlertResponse(soap, _p);
	}
	return _p;
}

inline struct ns1__DeleteAlertResponse * soap_new_set_ns1__DeleteAlertResponse(
	struct soap *soap)
{
	struct ns1__DeleteAlertResponse *_p = ::soap_new_ns1__DeleteAlertResponse(soap);
	if (_p)
	{	::soap_default_ns1__DeleteAlertResponse(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__DeleteAlertResponse(struct soap*, const struct ns1__DeleteAlertResponse *, const char*, const char*);

inline int soap_write_ns1__DeleteAlertResponse(struct soap *soap, struct ns1__DeleteAlertResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__DeleteAlertResponse(soap, p), 0) || ::soap_put_ns1__DeleteAlertResponse(soap, p, "ns1:DeleteAlertResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__DeleteAlertResponse(struct soap *soap, const char *URL, struct ns1__DeleteAlertResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__DeleteAlertResponse(soap, p), 0) || ::soap_put_ns1__DeleteAlertResponse(soap, p, "ns1:DeleteAlertResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__DeleteAlertResponse(struct soap *soap, const char *URL, struct ns1__DeleteAlertResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__DeleteAlertResponse(soap, p), 0) || ::soap_put_ns1__DeleteAlertResponse(soap, p, "ns1:DeleteAlertResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__DeleteAlertResponse(struct soap *soap, const char *URL, struct ns1__DeleteAlertResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__DeleteAlertResponse(soap, p), 0) || ::soap_put_ns1__DeleteAlertResponse(soap, p, "ns1:DeleteAlertResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__DeleteAlertResponse * SOAP_FMAC4 soap_get_ns1__DeleteAlertResponse(struct soap*, struct ns1__DeleteAlertResponse *, const char*, const char*);

inline int soap_read_ns1__DeleteAlertResponse(struct soap *soap, struct ns1__DeleteAlertResponse *p)
{
	if (p)
	{	::soap_default_ns1__DeleteAlertResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__DeleteAlertResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__DeleteAlertResponse(struct soap *soap, const char *URL, struct ns1__DeleteAlertResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__DeleteAlertResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__DeleteAlertResponse(struct soap *soap, struct ns1__DeleteAlertResponse *p)
{
	if (::soap_read_ns1__DeleteAlertResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__DeleteAlertEvaluation_DEFINED
#define SOAP_TYPE_ns1__DeleteAlertEvaluation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__DeleteAlertEvaluation(struct soap*, struct ns1__DeleteAlertEvaluation *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__DeleteAlertEvaluation(struct soap*, const struct ns1__DeleteAlertEvaluation *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DeleteAlertEvaluation(struct soap*, const char*, int, const struct ns1__DeleteAlertEvaluation *, const char*);
SOAP_FMAC3 struct ns1__DeleteAlertEvaluation * SOAP_FMAC4 soap_in_ns1__DeleteAlertEvaluation(struct soap*, const char*, struct ns1__DeleteAlertEvaluation *, const char*);
SOAP_FMAC1 struct ns1__DeleteAlertEvaluation * SOAP_FMAC2 soap_instantiate_ns1__DeleteAlertEvaluation(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__DeleteAlertEvaluation * soap_new_ns1__DeleteAlertEvaluation(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__DeleteAlertEvaluation(soap, n, NULL, NULL, NULL);
}

inline struct ns1__DeleteAlertEvaluation * soap_new_req_ns1__DeleteAlertEvaluation(
	struct soap *soap,
	int _in0)
{
	struct ns1__DeleteAlertEvaluation *_p = ::soap_new_ns1__DeleteAlertEvaluation(soap);
	if (_p)
	{	::soap_default_ns1__DeleteAlertEvaluation(soap, _p);
		_p->_in0 = _in0;
	}
	return _p;
}

inline struct ns1__DeleteAlertEvaluation * soap_new_set_ns1__DeleteAlertEvaluation(
	struct soap *soap,
	int _in0)
{
	struct ns1__DeleteAlertEvaluation *_p = ::soap_new_ns1__DeleteAlertEvaluation(soap);
	if (_p)
	{	::soap_default_ns1__DeleteAlertEvaluation(soap, _p);
		_p->_in0 = _in0;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__DeleteAlertEvaluation(struct soap*, const struct ns1__DeleteAlertEvaluation *, const char*, const char*);

inline int soap_write_ns1__DeleteAlertEvaluation(struct soap *soap, struct ns1__DeleteAlertEvaluation const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__DeleteAlertEvaluation(soap, p), 0) || ::soap_put_ns1__DeleteAlertEvaluation(soap, p, "ns1:DeleteAlertEvaluation", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__DeleteAlertEvaluation(struct soap *soap, const char *URL, struct ns1__DeleteAlertEvaluation const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__DeleteAlertEvaluation(soap, p), 0) || ::soap_put_ns1__DeleteAlertEvaluation(soap, p, "ns1:DeleteAlertEvaluation", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__DeleteAlertEvaluation(struct soap *soap, const char *URL, struct ns1__DeleteAlertEvaluation const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__DeleteAlertEvaluation(soap, p), 0) || ::soap_put_ns1__DeleteAlertEvaluation(soap, p, "ns1:DeleteAlertEvaluation", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__DeleteAlertEvaluation(struct soap *soap, const char *URL, struct ns1__DeleteAlertEvaluation const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__DeleteAlertEvaluation(soap, p), 0) || ::soap_put_ns1__DeleteAlertEvaluation(soap, p, "ns1:DeleteAlertEvaluation", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__DeleteAlertEvaluation * SOAP_FMAC4 soap_get_ns1__DeleteAlertEvaluation(struct soap*, struct ns1__DeleteAlertEvaluation *, const char*, const char*);

inline int soap_read_ns1__DeleteAlertEvaluation(struct soap *soap, struct ns1__DeleteAlertEvaluation *p)
{
	if (p)
	{	::soap_default_ns1__DeleteAlertEvaluation(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__DeleteAlertEvaluation(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__DeleteAlertEvaluation(struct soap *soap, const char *URL, struct ns1__DeleteAlertEvaluation *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__DeleteAlertEvaluation(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__DeleteAlertEvaluation(struct soap *soap, struct ns1__DeleteAlertEvaluation *p)
{
	if (::soap_read_ns1__DeleteAlertEvaluation(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__DeleteAlertEvaluationResponse_DEFINED
#define SOAP_TYPE_ns1__DeleteAlertEvaluationResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__DeleteAlertEvaluationResponse(struct soap*, struct ns1__DeleteAlertEvaluationResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__DeleteAlertEvaluationResponse(struct soap*, const struct ns1__DeleteAlertEvaluationResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DeleteAlertEvaluationResponse(struct soap*, const char*, int, const struct ns1__DeleteAlertEvaluationResponse *, const char*);
SOAP_FMAC3 struct ns1__DeleteAlertEvaluationResponse * SOAP_FMAC4 soap_in_ns1__DeleteAlertEvaluationResponse(struct soap*, const char*, struct ns1__DeleteAlertEvaluationResponse *, const char*);
SOAP_FMAC1 struct ns1__DeleteAlertEvaluationResponse * SOAP_FMAC2 soap_instantiate_ns1__DeleteAlertEvaluationResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__DeleteAlertEvaluationResponse * soap_new_ns1__DeleteAlertEvaluationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__DeleteAlertEvaluationResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__DeleteAlertEvaluationResponse * soap_new_req_ns1__DeleteAlertEvaluationResponse(
	struct soap *soap)
{
	struct ns1__DeleteAlertEvaluationResponse *_p = ::soap_new_ns1__DeleteAlertEvaluationResponse(soap);
	if (_p)
	{	::soap_default_ns1__DeleteAlertEvaluationResponse(soap, _p);
	}
	return _p;
}

inline struct ns1__DeleteAlertEvaluationResponse * soap_new_set_ns1__DeleteAlertEvaluationResponse(
	struct soap *soap)
{
	struct ns1__DeleteAlertEvaluationResponse *_p = ::soap_new_ns1__DeleteAlertEvaluationResponse(soap);
	if (_p)
	{	::soap_default_ns1__DeleteAlertEvaluationResponse(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__DeleteAlertEvaluationResponse(struct soap*, const struct ns1__DeleteAlertEvaluationResponse *, const char*, const char*);

inline int soap_write_ns1__DeleteAlertEvaluationResponse(struct soap *soap, struct ns1__DeleteAlertEvaluationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__DeleteAlertEvaluationResponse(soap, p), 0) || ::soap_put_ns1__DeleteAlertEvaluationResponse(soap, p, "ns1:DeleteAlertEvaluationResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__DeleteAlertEvaluationResponse(struct soap *soap, const char *URL, struct ns1__DeleteAlertEvaluationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__DeleteAlertEvaluationResponse(soap, p), 0) || ::soap_put_ns1__DeleteAlertEvaluationResponse(soap, p, "ns1:DeleteAlertEvaluationResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__DeleteAlertEvaluationResponse(struct soap *soap, const char *URL, struct ns1__DeleteAlertEvaluationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__DeleteAlertEvaluationResponse(soap, p), 0) || ::soap_put_ns1__DeleteAlertEvaluationResponse(soap, p, "ns1:DeleteAlertEvaluationResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__DeleteAlertEvaluationResponse(struct soap *soap, const char *URL, struct ns1__DeleteAlertEvaluationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__DeleteAlertEvaluationResponse(soap, p), 0) || ::soap_put_ns1__DeleteAlertEvaluationResponse(soap, p, "ns1:DeleteAlertEvaluationResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__DeleteAlertEvaluationResponse * SOAP_FMAC4 soap_get_ns1__DeleteAlertEvaluationResponse(struct soap*, struct ns1__DeleteAlertEvaluationResponse *, const char*, const char*);

inline int soap_read_ns1__DeleteAlertEvaluationResponse(struct soap *soap, struct ns1__DeleteAlertEvaluationResponse *p)
{
	if (p)
	{	::soap_default_ns1__DeleteAlertEvaluationResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__DeleteAlertEvaluationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__DeleteAlertEvaluationResponse(struct soap *soap, const char *URL, struct ns1__DeleteAlertEvaluationResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__DeleteAlertEvaluationResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__DeleteAlertEvaluationResponse(struct soap *soap, struct ns1__DeleteAlertEvaluationResponse *p)
{
	if (::soap_read_ns1__DeleteAlertEvaluationResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__DeleteAlertEvaluation2_DEFINED
#define SOAP_TYPE_ns1__DeleteAlertEvaluation2_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__DeleteAlertEvaluation2(struct soap*, struct ns1__DeleteAlertEvaluation2 *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__DeleteAlertEvaluation2(struct soap*, const struct ns1__DeleteAlertEvaluation2 *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DeleteAlertEvaluation2(struct soap*, const char*, int, const struct ns1__DeleteAlertEvaluation2 *, const char*);
SOAP_FMAC3 struct ns1__DeleteAlertEvaluation2 * SOAP_FMAC4 soap_in_ns1__DeleteAlertEvaluation2(struct soap*, const char*, struct ns1__DeleteAlertEvaluation2 *, const char*);
SOAP_FMAC1 struct ns1__DeleteAlertEvaluation2 * SOAP_FMAC2 soap_instantiate_ns1__DeleteAlertEvaluation2(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__DeleteAlertEvaluation2 * soap_new_ns1__DeleteAlertEvaluation2(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__DeleteAlertEvaluation2(soap, n, NULL, NULL, NULL);
}

inline struct ns1__DeleteAlertEvaluation2 * soap_new_req_ns1__DeleteAlertEvaluation2(
	struct soap *soap,
	int _in0,
	int _in1)
{
	struct ns1__DeleteAlertEvaluation2 *_p = ::soap_new_ns1__DeleteAlertEvaluation2(soap);
	if (_p)
	{	::soap_default_ns1__DeleteAlertEvaluation2(soap, _p);
		_p->_in0 = _in0;
		_p->_in1 = _in1;
	}
	return _p;
}

inline struct ns1__DeleteAlertEvaluation2 * soap_new_set_ns1__DeleteAlertEvaluation2(
	struct soap *soap,
	int _in0,
	int _in1)
{
	struct ns1__DeleteAlertEvaluation2 *_p = ::soap_new_ns1__DeleteAlertEvaluation2(soap);
	if (_p)
	{	::soap_default_ns1__DeleteAlertEvaluation2(soap, _p);
		_p->_in0 = _in0;
		_p->_in1 = _in1;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__DeleteAlertEvaluation2(struct soap*, const struct ns1__DeleteAlertEvaluation2 *, const char*, const char*);

inline int soap_write_ns1__DeleteAlertEvaluation2(struct soap *soap, struct ns1__DeleteAlertEvaluation2 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__DeleteAlertEvaluation2(soap, p), 0) || ::soap_put_ns1__DeleteAlertEvaluation2(soap, p, "ns1:DeleteAlertEvaluation2", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__DeleteAlertEvaluation2(struct soap *soap, const char *URL, struct ns1__DeleteAlertEvaluation2 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__DeleteAlertEvaluation2(soap, p), 0) || ::soap_put_ns1__DeleteAlertEvaluation2(soap, p, "ns1:DeleteAlertEvaluation2", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__DeleteAlertEvaluation2(struct soap *soap, const char *URL, struct ns1__DeleteAlertEvaluation2 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__DeleteAlertEvaluation2(soap, p), 0) || ::soap_put_ns1__DeleteAlertEvaluation2(soap, p, "ns1:DeleteAlertEvaluation2", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__DeleteAlertEvaluation2(struct soap *soap, const char *URL, struct ns1__DeleteAlertEvaluation2 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__DeleteAlertEvaluation2(soap, p), 0) || ::soap_put_ns1__DeleteAlertEvaluation2(soap, p, "ns1:DeleteAlertEvaluation2", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__DeleteAlertEvaluation2 * SOAP_FMAC4 soap_get_ns1__DeleteAlertEvaluation2(struct soap*, struct ns1__DeleteAlertEvaluation2 *, const char*, const char*);

inline int soap_read_ns1__DeleteAlertEvaluation2(struct soap *soap, struct ns1__DeleteAlertEvaluation2 *p)
{
	if (p)
	{	::soap_default_ns1__DeleteAlertEvaluation2(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__DeleteAlertEvaluation2(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__DeleteAlertEvaluation2(struct soap *soap, const char *URL, struct ns1__DeleteAlertEvaluation2 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__DeleteAlertEvaluation2(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__DeleteAlertEvaluation2(struct soap *soap, struct ns1__DeleteAlertEvaluation2 *p)
{
	if (::soap_read_ns1__DeleteAlertEvaluation2(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__DeleteAlertEvaluation2Response_DEFINED
#define SOAP_TYPE_ns1__DeleteAlertEvaluation2Response_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__DeleteAlertEvaluation2Response(struct soap*, struct ns1__DeleteAlertEvaluation2Response *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__DeleteAlertEvaluation2Response(struct soap*, const struct ns1__DeleteAlertEvaluation2Response *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DeleteAlertEvaluation2Response(struct soap*, const char*, int, const struct ns1__DeleteAlertEvaluation2Response *, const char*);
SOAP_FMAC3 struct ns1__DeleteAlertEvaluation2Response * SOAP_FMAC4 soap_in_ns1__DeleteAlertEvaluation2Response(struct soap*, const char*, struct ns1__DeleteAlertEvaluation2Response *, const char*);
SOAP_FMAC1 struct ns1__DeleteAlertEvaluation2Response * SOAP_FMAC2 soap_instantiate_ns1__DeleteAlertEvaluation2Response(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__DeleteAlertEvaluation2Response * soap_new_ns1__DeleteAlertEvaluation2Response(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__DeleteAlertEvaluation2Response(soap, n, NULL, NULL, NULL);
}

inline struct ns1__DeleteAlertEvaluation2Response * soap_new_req_ns1__DeleteAlertEvaluation2Response(
	struct soap *soap)
{
	struct ns1__DeleteAlertEvaluation2Response *_p = ::soap_new_ns1__DeleteAlertEvaluation2Response(soap);
	if (_p)
	{	::soap_default_ns1__DeleteAlertEvaluation2Response(soap, _p);
	}
	return _p;
}

inline struct ns1__DeleteAlertEvaluation2Response * soap_new_set_ns1__DeleteAlertEvaluation2Response(
	struct soap *soap)
{
	struct ns1__DeleteAlertEvaluation2Response *_p = ::soap_new_ns1__DeleteAlertEvaluation2Response(soap);
	if (_p)
	{	::soap_default_ns1__DeleteAlertEvaluation2Response(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__DeleteAlertEvaluation2Response(struct soap*, const struct ns1__DeleteAlertEvaluation2Response *, const char*, const char*);

inline int soap_write_ns1__DeleteAlertEvaluation2Response(struct soap *soap, struct ns1__DeleteAlertEvaluation2Response const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__DeleteAlertEvaluation2Response(soap, p), 0) || ::soap_put_ns1__DeleteAlertEvaluation2Response(soap, p, "ns1:DeleteAlertEvaluation2Response", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__DeleteAlertEvaluation2Response(struct soap *soap, const char *URL, struct ns1__DeleteAlertEvaluation2Response const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__DeleteAlertEvaluation2Response(soap, p), 0) || ::soap_put_ns1__DeleteAlertEvaluation2Response(soap, p, "ns1:DeleteAlertEvaluation2Response", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__DeleteAlertEvaluation2Response(struct soap *soap, const char *URL, struct ns1__DeleteAlertEvaluation2Response const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__DeleteAlertEvaluation2Response(soap, p), 0) || ::soap_put_ns1__DeleteAlertEvaluation2Response(soap, p, "ns1:DeleteAlertEvaluation2Response", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__DeleteAlertEvaluation2Response(struct soap *soap, const char *URL, struct ns1__DeleteAlertEvaluation2Response const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__DeleteAlertEvaluation2Response(soap, p), 0) || ::soap_put_ns1__DeleteAlertEvaluation2Response(soap, p, "ns1:DeleteAlertEvaluation2Response", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__DeleteAlertEvaluation2Response * SOAP_FMAC4 soap_get_ns1__DeleteAlertEvaluation2Response(struct soap*, struct ns1__DeleteAlertEvaluation2Response *, const char*, const char*);

inline int soap_read_ns1__DeleteAlertEvaluation2Response(struct soap *soap, struct ns1__DeleteAlertEvaluation2Response *p)
{
	if (p)
	{	::soap_default_ns1__DeleteAlertEvaluation2Response(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__DeleteAlertEvaluation2Response(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__DeleteAlertEvaluation2Response(struct soap *soap, const char *URL, struct ns1__DeleteAlertEvaluation2Response *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__DeleteAlertEvaluation2Response(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__DeleteAlertEvaluation2Response(struct soap *soap, struct ns1__DeleteAlertEvaluation2Response *p)
{
	if (::soap_read_ns1__DeleteAlertEvaluation2Response(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__DeleteAlertAction_DEFINED
#define SOAP_TYPE_ns1__DeleteAlertAction_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__DeleteAlertAction(struct soap*, struct ns1__DeleteAlertAction *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__DeleteAlertAction(struct soap*, const struct ns1__DeleteAlertAction *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DeleteAlertAction(struct soap*, const char*, int, const struct ns1__DeleteAlertAction *, const char*);
SOAP_FMAC3 struct ns1__DeleteAlertAction * SOAP_FMAC4 soap_in_ns1__DeleteAlertAction(struct soap*, const char*, struct ns1__DeleteAlertAction *, const char*);
SOAP_FMAC1 struct ns1__DeleteAlertAction * SOAP_FMAC2 soap_instantiate_ns1__DeleteAlertAction(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__DeleteAlertAction * soap_new_ns1__DeleteAlertAction(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__DeleteAlertAction(soap, n, NULL, NULL, NULL);
}

inline struct ns1__DeleteAlertAction * soap_new_req_ns1__DeleteAlertAction(
	struct soap *soap,
	int _in0)
{
	struct ns1__DeleteAlertAction *_p = ::soap_new_ns1__DeleteAlertAction(soap);
	if (_p)
	{	::soap_default_ns1__DeleteAlertAction(soap, _p);
		_p->_in0 = _in0;
	}
	return _p;
}

inline struct ns1__DeleteAlertAction * soap_new_set_ns1__DeleteAlertAction(
	struct soap *soap,
	int _in0)
{
	struct ns1__DeleteAlertAction *_p = ::soap_new_ns1__DeleteAlertAction(soap);
	if (_p)
	{	::soap_default_ns1__DeleteAlertAction(soap, _p);
		_p->_in0 = _in0;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__DeleteAlertAction(struct soap*, const struct ns1__DeleteAlertAction *, const char*, const char*);

inline int soap_write_ns1__DeleteAlertAction(struct soap *soap, struct ns1__DeleteAlertAction const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__DeleteAlertAction(soap, p), 0) || ::soap_put_ns1__DeleteAlertAction(soap, p, "ns1:DeleteAlertAction", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__DeleteAlertAction(struct soap *soap, const char *URL, struct ns1__DeleteAlertAction const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__DeleteAlertAction(soap, p), 0) || ::soap_put_ns1__DeleteAlertAction(soap, p, "ns1:DeleteAlertAction", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__DeleteAlertAction(struct soap *soap, const char *URL, struct ns1__DeleteAlertAction const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__DeleteAlertAction(soap, p), 0) || ::soap_put_ns1__DeleteAlertAction(soap, p, "ns1:DeleteAlertAction", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__DeleteAlertAction(struct soap *soap, const char *URL, struct ns1__DeleteAlertAction const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__DeleteAlertAction(soap, p), 0) || ::soap_put_ns1__DeleteAlertAction(soap, p, "ns1:DeleteAlertAction", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__DeleteAlertAction * SOAP_FMAC4 soap_get_ns1__DeleteAlertAction(struct soap*, struct ns1__DeleteAlertAction *, const char*, const char*);

inline int soap_read_ns1__DeleteAlertAction(struct soap *soap, struct ns1__DeleteAlertAction *p)
{
	if (p)
	{	::soap_default_ns1__DeleteAlertAction(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__DeleteAlertAction(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__DeleteAlertAction(struct soap *soap, const char *URL, struct ns1__DeleteAlertAction *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__DeleteAlertAction(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__DeleteAlertAction(struct soap *soap, struct ns1__DeleteAlertAction *p)
{
	if (::soap_read_ns1__DeleteAlertAction(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__DeleteAlertActionResponse_DEFINED
#define SOAP_TYPE_ns1__DeleteAlertActionResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__DeleteAlertActionResponse(struct soap*, struct ns1__DeleteAlertActionResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__DeleteAlertActionResponse(struct soap*, const struct ns1__DeleteAlertActionResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DeleteAlertActionResponse(struct soap*, const char*, int, const struct ns1__DeleteAlertActionResponse *, const char*);
SOAP_FMAC3 struct ns1__DeleteAlertActionResponse * SOAP_FMAC4 soap_in_ns1__DeleteAlertActionResponse(struct soap*, const char*, struct ns1__DeleteAlertActionResponse *, const char*);
SOAP_FMAC1 struct ns1__DeleteAlertActionResponse * SOAP_FMAC2 soap_instantiate_ns1__DeleteAlertActionResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__DeleteAlertActionResponse * soap_new_ns1__DeleteAlertActionResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__DeleteAlertActionResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__DeleteAlertActionResponse * soap_new_req_ns1__DeleteAlertActionResponse(
	struct soap *soap)
{
	struct ns1__DeleteAlertActionResponse *_p = ::soap_new_ns1__DeleteAlertActionResponse(soap);
	if (_p)
	{	::soap_default_ns1__DeleteAlertActionResponse(soap, _p);
	}
	return _p;
}

inline struct ns1__DeleteAlertActionResponse * soap_new_set_ns1__DeleteAlertActionResponse(
	struct soap *soap)
{
	struct ns1__DeleteAlertActionResponse *_p = ::soap_new_ns1__DeleteAlertActionResponse(soap);
	if (_p)
	{	::soap_default_ns1__DeleteAlertActionResponse(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__DeleteAlertActionResponse(struct soap*, const struct ns1__DeleteAlertActionResponse *, const char*, const char*);

inline int soap_write_ns1__DeleteAlertActionResponse(struct soap *soap, struct ns1__DeleteAlertActionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__DeleteAlertActionResponse(soap, p), 0) || ::soap_put_ns1__DeleteAlertActionResponse(soap, p, "ns1:DeleteAlertActionResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__DeleteAlertActionResponse(struct soap *soap, const char *URL, struct ns1__DeleteAlertActionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__DeleteAlertActionResponse(soap, p), 0) || ::soap_put_ns1__DeleteAlertActionResponse(soap, p, "ns1:DeleteAlertActionResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__DeleteAlertActionResponse(struct soap *soap, const char *URL, struct ns1__DeleteAlertActionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__DeleteAlertActionResponse(soap, p), 0) || ::soap_put_ns1__DeleteAlertActionResponse(soap, p, "ns1:DeleteAlertActionResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__DeleteAlertActionResponse(struct soap *soap, const char *URL, struct ns1__DeleteAlertActionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__DeleteAlertActionResponse(soap, p), 0) || ::soap_put_ns1__DeleteAlertActionResponse(soap, p, "ns1:DeleteAlertActionResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__DeleteAlertActionResponse * SOAP_FMAC4 soap_get_ns1__DeleteAlertActionResponse(struct soap*, struct ns1__DeleteAlertActionResponse *, const char*, const char*);

inline int soap_read_ns1__DeleteAlertActionResponse(struct soap *soap, struct ns1__DeleteAlertActionResponse *p)
{
	if (p)
	{	::soap_default_ns1__DeleteAlertActionResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__DeleteAlertActionResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__DeleteAlertActionResponse(struct soap *soap, const char *URL, struct ns1__DeleteAlertActionResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__DeleteAlertActionResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__DeleteAlertActionResponse(struct soap *soap, struct ns1__DeleteAlertActionResponse *p)
{
	if (::soap_read_ns1__DeleteAlertActionResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__DeleteAlertAction2_DEFINED
#define SOAP_TYPE_ns1__DeleteAlertAction2_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__DeleteAlertAction2(struct soap*, struct ns1__DeleteAlertAction2 *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__DeleteAlertAction2(struct soap*, const struct ns1__DeleteAlertAction2 *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DeleteAlertAction2(struct soap*, const char*, int, const struct ns1__DeleteAlertAction2 *, const char*);
SOAP_FMAC3 struct ns1__DeleteAlertAction2 * SOAP_FMAC4 soap_in_ns1__DeleteAlertAction2(struct soap*, const char*, struct ns1__DeleteAlertAction2 *, const char*);
SOAP_FMAC1 struct ns1__DeleteAlertAction2 * SOAP_FMAC2 soap_instantiate_ns1__DeleteAlertAction2(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__DeleteAlertAction2 * soap_new_ns1__DeleteAlertAction2(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__DeleteAlertAction2(soap, n, NULL, NULL, NULL);
}

inline struct ns1__DeleteAlertAction2 * soap_new_req_ns1__DeleteAlertAction2(
	struct soap *soap,
	int _in0)
{
	struct ns1__DeleteAlertAction2 *_p = ::soap_new_ns1__DeleteAlertAction2(soap);
	if (_p)
	{	::soap_default_ns1__DeleteAlertAction2(soap, _p);
		_p->_in0 = _in0;
	}
	return _p;
}

inline struct ns1__DeleteAlertAction2 * soap_new_set_ns1__DeleteAlertAction2(
	struct soap *soap,
	int _in0)
{
	struct ns1__DeleteAlertAction2 *_p = ::soap_new_ns1__DeleteAlertAction2(soap);
	if (_p)
	{	::soap_default_ns1__DeleteAlertAction2(soap, _p);
		_p->_in0 = _in0;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__DeleteAlertAction2(struct soap*, const struct ns1__DeleteAlertAction2 *, const char*, const char*);

inline int soap_write_ns1__DeleteAlertAction2(struct soap *soap, struct ns1__DeleteAlertAction2 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__DeleteAlertAction2(soap, p), 0) || ::soap_put_ns1__DeleteAlertAction2(soap, p, "ns1:DeleteAlertAction2", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__DeleteAlertAction2(struct soap *soap, const char *URL, struct ns1__DeleteAlertAction2 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__DeleteAlertAction2(soap, p), 0) || ::soap_put_ns1__DeleteAlertAction2(soap, p, "ns1:DeleteAlertAction2", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__DeleteAlertAction2(struct soap *soap, const char *URL, struct ns1__DeleteAlertAction2 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__DeleteAlertAction2(soap, p), 0) || ::soap_put_ns1__DeleteAlertAction2(soap, p, "ns1:DeleteAlertAction2", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__DeleteAlertAction2(struct soap *soap, const char *URL, struct ns1__DeleteAlertAction2 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__DeleteAlertAction2(soap, p), 0) || ::soap_put_ns1__DeleteAlertAction2(soap, p, "ns1:DeleteAlertAction2", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__DeleteAlertAction2 * SOAP_FMAC4 soap_get_ns1__DeleteAlertAction2(struct soap*, struct ns1__DeleteAlertAction2 *, const char*, const char*);

inline int soap_read_ns1__DeleteAlertAction2(struct soap *soap, struct ns1__DeleteAlertAction2 *p)
{
	if (p)
	{	::soap_default_ns1__DeleteAlertAction2(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__DeleteAlertAction2(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__DeleteAlertAction2(struct soap *soap, const char *URL, struct ns1__DeleteAlertAction2 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__DeleteAlertAction2(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__DeleteAlertAction2(struct soap *soap, struct ns1__DeleteAlertAction2 *p)
{
	if (::soap_read_ns1__DeleteAlertAction2(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__DeleteAlertAction2Response_DEFINED
#define SOAP_TYPE_ns1__DeleteAlertAction2Response_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__DeleteAlertAction2Response(struct soap*, struct ns1__DeleteAlertAction2Response *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__DeleteAlertAction2Response(struct soap*, const struct ns1__DeleteAlertAction2Response *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DeleteAlertAction2Response(struct soap*, const char*, int, const struct ns1__DeleteAlertAction2Response *, const char*);
SOAP_FMAC3 struct ns1__DeleteAlertAction2Response * SOAP_FMAC4 soap_in_ns1__DeleteAlertAction2Response(struct soap*, const char*, struct ns1__DeleteAlertAction2Response *, const char*);
SOAP_FMAC1 struct ns1__DeleteAlertAction2Response * SOAP_FMAC2 soap_instantiate_ns1__DeleteAlertAction2Response(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__DeleteAlertAction2Response * soap_new_ns1__DeleteAlertAction2Response(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__DeleteAlertAction2Response(soap, n, NULL, NULL, NULL);
}

inline struct ns1__DeleteAlertAction2Response * soap_new_req_ns1__DeleteAlertAction2Response(
	struct soap *soap)
{
	struct ns1__DeleteAlertAction2Response *_p = ::soap_new_ns1__DeleteAlertAction2Response(soap);
	if (_p)
	{	::soap_default_ns1__DeleteAlertAction2Response(soap, _p);
	}
	return _p;
}

inline struct ns1__DeleteAlertAction2Response * soap_new_set_ns1__DeleteAlertAction2Response(
	struct soap *soap)
{
	struct ns1__DeleteAlertAction2Response *_p = ::soap_new_ns1__DeleteAlertAction2Response(soap);
	if (_p)
	{	::soap_default_ns1__DeleteAlertAction2Response(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__DeleteAlertAction2Response(struct soap*, const struct ns1__DeleteAlertAction2Response *, const char*, const char*);

inline int soap_write_ns1__DeleteAlertAction2Response(struct soap *soap, struct ns1__DeleteAlertAction2Response const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__DeleteAlertAction2Response(soap, p), 0) || ::soap_put_ns1__DeleteAlertAction2Response(soap, p, "ns1:DeleteAlertAction2Response", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__DeleteAlertAction2Response(struct soap *soap, const char *URL, struct ns1__DeleteAlertAction2Response const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__DeleteAlertAction2Response(soap, p), 0) || ::soap_put_ns1__DeleteAlertAction2Response(soap, p, "ns1:DeleteAlertAction2Response", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__DeleteAlertAction2Response(struct soap *soap, const char *URL, struct ns1__DeleteAlertAction2Response const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__DeleteAlertAction2Response(soap, p), 0) || ::soap_put_ns1__DeleteAlertAction2Response(soap, p, "ns1:DeleteAlertAction2Response", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__DeleteAlertAction2Response(struct soap *soap, const char *URL, struct ns1__DeleteAlertAction2Response const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__DeleteAlertAction2Response(soap, p), 0) || ::soap_put_ns1__DeleteAlertAction2Response(soap, p, "ns1:DeleteAlertAction2Response", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__DeleteAlertAction2Response * SOAP_FMAC4 soap_get_ns1__DeleteAlertAction2Response(struct soap*, struct ns1__DeleteAlertAction2Response *, const char*, const char*);

inline int soap_read_ns1__DeleteAlertAction2Response(struct soap *soap, struct ns1__DeleteAlertAction2Response *p)
{
	if (p)
	{	::soap_default_ns1__DeleteAlertAction2Response(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__DeleteAlertAction2Response(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__DeleteAlertAction2Response(struct soap *soap, const char *URL, struct ns1__DeleteAlertAction2Response *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__DeleteAlertAction2Response(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__DeleteAlertAction2Response(struct soap *soap, struct ns1__DeleteAlertAction2Response *p)
{
	if (::soap_read_ns1__DeleteAlertAction2Response(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__DeleteAlertSchedule_DEFINED
#define SOAP_TYPE_ns1__DeleteAlertSchedule_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__DeleteAlertSchedule(struct soap*, struct ns1__DeleteAlertSchedule *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__DeleteAlertSchedule(struct soap*, const struct ns1__DeleteAlertSchedule *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DeleteAlertSchedule(struct soap*, const char*, int, const struct ns1__DeleteAlertSchedule *, const char*);
SOAP_FMAC3 struct ns1__DeleteAlertSchedule * SOAP_FMAC4 soap_in_ns1__DeleteAlertSchedule(struct soap*, const char*, struct ns1__DeleteAlertSchedule *, const char*);
SOAP_FMAC1 struct ns1__DeleteAlertSchedule * SOAP_FMAC2 soap_instantiate_ns1__DeleteAlertSchedule(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__DeleteAlertSchedule * soap_new_ns1__DeleteAlertSchedule(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__DeleteAlertSchedule(soap, n, NULL, NULL, NULL);
}

inline struct ns1__DeleteAlertSchedule * soap_new_req_ns1__DeleteAlertSchedule(
	struct soap *soap,
	int _in0)
{
	struct ns1__DeleteAlertSchedule *_p = ::soap_new_ns1__DeleteAlertSchedule(soap);
	if (_p)
	{	::soap_default_ns1__DeleteAlertSchedule(soap, _p);
		_p->_in0 = _in0;
	}
	return _p;
}

inline struct ns1__DeleteAlertSchedule * soap_new_set_ns1__DeleteAlertSchedule(
	struct soap *soap,
	int _in0)
{
	struct ns1__DeleteAlertSchedule *_p = ::soap_new_ns1__DeleteAlertSchedule(soap);
	if (_p)
	{	::soap_default_ns1__DeleteAlertSchedule(soap, _p);
		_p->_in0 = _in0;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__DeleteAlertSchedule(struct soap*, const struct ns1__DeleteAlertSchedule *, const char*, const char*);

inline int soap_write_ns1__DeleteAlertSchedule(struct soap *soap, struct ns1__DeleteAlertSchedule const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__DeleteAlertSchedule(soap, p), 0) || ::soap_put_ns1__DeleteAlertSchedule(soap, p, "ns1:DeleteAlertSchedule", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__DeleteAlertSchedule(struct soap *soap, const char *URL, struct ns1__DeleteAlertSchedule const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__DeleteAlertSchedule(soap, p), 0) || ::soap_put_ns1__DeleteAlertSchedule(soap, p, "ns1:DeleteAlertSchedule", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__DeleteAlertSchedule(struct soap *soap, const char *URL, struct ns1__DeleteAlertSchedule const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__DeleteAlertSchedule(soap, p), 0) || ::soap_put_ns1__DeleteAlertSchedule(soap, p, "ns1:DeleteAlertSchedule", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__DeleteAlertSchedule(struct soap *soap, const char *URL, struct ns1__DeleteAlertSchedule const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__DeleteAlertSchedule(soap, p), 0) || ::soap_put_ns1__DeleteAlertSchedule(soap, p, "ns1:DeleteAlertSchedule", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__DeleteAlertSchedule * SOAP_FMAC4 soap_get_ns1__DeleteAlertSchedule(struct soap*, struct ns1__DeleteAlertSchedule *, const char*, const char*);

inline int soap_read_ns1__DeleteAlertSchedule(struct soap *soap, struct ns1__DeleteAlertSchedule *p)
{
	if (p)
	{	::soap_default_ns1__DeleteAlertSchedule(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__DeleteAlertSchedule(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__DeleteAlertSchedule(struct soap *soap, const char *URL, struct ns1__DeleteAlertSchedule *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__DeleteAlertSchedule(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__DeleteAlertSchedule(struct soap *soap, struct ns1__DeleteAlertSchedule *p)
{
	if (::soap_read_ns1__DeleteAlertSchedule(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__DeleteAlertScheduleResponse_DEFINED
#define SOAP_TYPE_ns1__DeleteAlertScheduleResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__DeleteAlertScheduleResponse(struct soap*, struct ns1__DeleteAlertScheduleResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__DeleteAlertScheduleResponse(struct soap*, const struct ns1__DeleteAlertScheduleResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DeleteAlertScheduleResponse(struct soap*, const char*, int, const struct ns1__DeleteAlertScheduleResponse *, const char*);
SOAP_FMAC3 struct ns1__DeleteAlertScheduleResponse * SOAP_FMAC4 soap_in_ns1__DeleteAlertScheduleResponse(struct soap*, const char*, struct ns1__DeleteAlertScheduleResponse *, const char*);
SOAP_FMAC1 struct ns1__DeleteAlertScheduleResponse * SOAP_FMAC2 soap_instantiate_ns1__DeleteAlertScheduleResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__DeleteAlertScheduleResponse * soap_new_ns1__DeleteAlertScheduleResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__DeleteAlertScheduleResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__DeleteAlertScheduleResponse * soap_new_req_ns1__DeleteAlertScheduleResponse(
	struct soap *soap)
{
	struct ns1__DeleteAlertScheduleResponse *_p = ::soap_new_ns1__DeleteAlertScheduleResponse(soap);
	if (_p)
	{	::soap_default_ns1__DeleteAlertScheduleResponse(soap, _p);
	}
	return _p;
}

inline struct ns1__DeleteAlertScheduleResponse * soap_new_set_ns1__DeleteAlertScheduleResponse(
	struct soap *soap)
{
	struct ns1__DeleteAlertScheduleResponse *_p = ::soap_new_ns1__DeleteAlertScheduleResponse(soap);
	if (_p)
	{	::soap_default_ns1__DeleteAlertScheduleResponse(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__DeleteAlertScheduleResponse(struct soap*, const struct ns1__DeleteAlertScheduleResponse *, const char*, const char*);

inline int soap_write_ns1__DeleteAlertScheduleResponse(struct soap *soap, struct ns1__DeleteAlertScheduleResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__DeleteAlertScheduleResponse(soap, p), 0) || ::soap_put_ns1__DeleteAlertScheduleResponse(soap, p, "ns1:DeleteAlertScheduleResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__DeleteAlertScheduleResponse(struct soap *soap, const char *URL, struct ns1__DeleteAlertScheduleResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__DeleteAlertScheduleResponse(soap, p), 0) || ::soap_put_ns1__DeleteAlertScheduleResponse(soap, p, "ns1:DeleteAlertScheduleResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__DeleteAlertScheduleResponse(struct soap *soap, const char *URL, struct ns1__DeleteAlertScheduleResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__DeleteAlertScheduleResponse(soap, p), 0) || ::soap_put_ns1__DeleteAlertScheduleResponse(soap, p, "ns1:DeleteAlertScheduleResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__DeleteAlertScheduleResponse(struct soap *soap, const char *URL, struct ns1__DeleteAlertScheduleResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__DeleteAlertScheduleResponse(soap, p), 0) || ::soap_put_ns1__DeleteAlertScheduleResponse(soap, p, "ns1:DeleteAlertScheduleResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__DeleteAlertScheduleResponse * SOAP_FMAC4 soap_get_ns1__DeleteAlertScheduleResponse(struct soap*, struct ns1__DeleteAlertScheduleResponse *, const char*, const char*);

inline int soap_read_ns1__DeleteAlertScheduleResponse(struct soap *soap, struct ns1__DeleteAlertScheduleResponse *p)
{
	if (p)
	{	::soap_default_ns1__DeleteAlertScheduleResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__DeleteAlertScheduleResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__DeleteAlertScheduleResponse(struct soap *soap, const char *URL, struct ns1__DeleteAlertScheduleResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__DeleteAlertScheduleResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__DeleteAlertScheduleResponse(struct soap *soap, struct ns1__DeleteAlertScheduleResponse *p)
{
	if (::soap_read_ns1__DeleteAlertScheduleResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__DeleteAlertScheduleByScheduleId_DEFINED
#define SOAP_TYPE_ns1__DeleteAlertScheduleByScheduleId_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__DeleteAlertScheduleByScheduleId(struct soap*, struct ns1__DeleteAlertScheduleByScheduleId *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__DeleteAlertScheduleByScheduleId(struct soap*, const struct ns1__DeleteAlertScheduleByScheduleId *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DeleteAlertScheduleByScheduleId(struct soap*, const char*, int, const struct ns1__DeleteAlertScheduleByScheduleId *, const char*);
SOAP_FMAC3 struct ns1__DeleteAlertScheduleByScheduleId * SOAP_FMAC4 soap_in_ns1__DeleteAlertScheduleByScheduleId(struct soap*, const char*, struct ns1__DeleteAlertScheduleByScheduleId *, const char*);
SOAP_FMAC1 struct ns1__DeleteAlertScheduleByScheduleId * SOAP_FMAC2 soap_instantiate_ns1__DeleteAlertScheduleByScheduleId(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__DeleteAlertScheduleByScheduleId * soap_new_ns1__DeleteAlertScheduleByScheduleId(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__DeleteAlertScheduleByScheduleId(soap, n, NULL, NULL, NULL);
}

inline struct ns1__DeleteAlertScheduleByScheduleId * soap_new_req_ns1__DeleteAlertScheduleByScheduleId(
	struct soap *soap,
	int _in0)
{
	struct ns1__DeleteAlertScheduleByScheduleId *_p = ::soap_new_ns1__DeleteAlertScheduleByScheduleId(soap);
	if (_p)
	{	::soap_default_ns1__DeleteAlertScheduleByScheduleId(soap, _p);
		_p->_in0 = _in0;
	}
	return _p;
}

inline struct ns1__DeleteAlertScheduleByScheduleId * soap_new_set_ns1__DeleteAlertScheduleByScheduleId(
	struct soap *soap,
	int _in0)
{
	struct ns1__DeleteAlertScheduleByScheduleId *_p = ::soap_new_ns1__DeleteAlertScheduleByScheduleId(soap);
	if (_p)
	{	::soap_default_ns1__DeleteAlertScheduleByScheduleId(soap, _p);
		_p->_in0 = _in0;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__DeleteAlertScheduleByScheduleId(struct soap*, const struct ns1__DeleteAlertScheduleByScheduleId *, const char*, const char*);

inline int soap_write_ns1__DeleteAlertScheduleByScheduleId(struct soap *soap, struct ns1__DeleteAlertScheduleByScheduleId const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__DeleteAlertScheduleByScheduleId(soap, p), 0) || ::soap_put_ns1__DeleteAlertScheduleByScheduleId(soap, p, "ns1:DeleteAlertScheduleByScheduleId", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__DeleteAlertScheduleByScheduleId(struct soap *soap, const char *URL, struct ns1__DeleteAlertScheduleByScheduleId const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__DeleteAlertScheduleByScheduleId(soap, p), 0) || ::soap_put_ns1__DeleteAlertScheduleByScheduleId(soap, p, "ns1:DeleteAlertScheduleByScheduleId", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__DeleteAlertScheduleByScheduleId(struct soap *soap, const char *URL, struct ns1__DeleteAlertScheduleByScheduleId const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__DeleteAlertScheduleByScheduleId(soap, p), 0) || ::soap_put_ns1__DeleteAlertScheduleByScheduleId(soap, p, "ns1:DeleteAlertScheduleByScheduleId", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__DeleteAlertScheduleByScheduleId(struct soap *soap, const char *URL, struct ns1__DeleteAlertScheduleByScheduleId const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__DeleteAlertScheduleByScheduleId(soap, p), 0) || ::soap_put_ns1__DeleteAlertScheduleByScheduleId(soap, p, "ns1:DeleteAlertScheduleByScheduleId", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__DeleteAlertScheduleByScheduleId * SOAP_FMAC4 soap_get_ns1__DeleteAlertScheduleByScheduleId(struct soap*, struct ns1__DeleteAlertScheduleByScheduleId *, const char*, const char*);

inline int soap_read_ns1__DeleteAlertScheduleByScheduleId(struct soap *soap, struct ns1__DeleteAlertScheduleByScheduleId *p)
{
	if (p)
	{	::soap_default_ns1__DeleteAlertScheduleByScheduleId(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__DeleteAlertScheduleByScheduleId(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__DeleteAlertScheduleByScheduleId(struct soap *soap, const char *URL, struct ns1__DeleteAlertScheduleByScheduleId *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__DeleteAlertScheduleByScheduleId(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__DeleteAlertScheduleByScheduleId(struct soap *soap, struct ns1__DeleteAlertScheduleByScheduleId *p)
{
	if (::soap_read_ns1__DeleteAlertScheduleByScheduleId(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__DeleteAlertScheduleByScheduleIdResponse_DEFINED
#define SOAP_TYPE_ns1__DeleteAlertScheduleByScheduleIdResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__DeleteAlertScheduleByScheduleIdResponse(struct soap*, struct ns1__DeleteAlertScheduleByScheduleIdResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__DeleteAlertScheduleByScheduleIdResponse(struct soap*, const struct ns1__DeleteAlertScheduleByScheduleIdResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DeleteAlertScheduleByScheduleIdResponse(struct soap*, const char*, int, const struct ns1__DeleteAlertScheduleByScheduleIdResponse *, const char*);
SOAP_FMAC3 struct ns1__DeleteAlertScheduleByScheduleIdResponse * SOAP_FMAC4 soap_in_ns1__DeleteAlertScheduleByScheduleIdResponse(struct soap*, const char*, struct ns1__DeleteAlertScheduleByScheduleIdResponse *, const char*);
SOAP_FMAC1 struct ns1__DeleteAlertScheduleByScheduleIdResponse * SOAP_FMAC2 soap_instantiate_ns1__DeleteAlertScheduleByScheduleIdResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__DeleteAlertScheduleByScheduleIdResponse * soap_new_ns1__DeleteAlertScheduleByScheduleIdResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__DeleteAlertScheduleByScheduleIdResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__DeleteAlertScheduleByScheduleIdResponse * soap_new_req_ns1__DeleteAlertScheduleByScheduleIdResponse(
	struct soap *soap)
{
	struct ns1__DeleteAlertScheduleByScheduleIdResponse *_p = ::soap_new_ns1__DeleteAlertScheduleByScheduleIdResponse(soap);
	if (_p)
	{	::soap_default_ns1__DeleteAlertScheduleByScheduleIdResponse(soap, _p);
	}
	return _p;
}

inline struct ns1__DeleteAlertScheduleByScheduleIdResponse * soap_new_set_ns1__DeleteAlertScheduleByScheduleIdResponse(
	struct soap *soap)
{
	struct ns1__DeleteAlertScheduleByScheduleIdResponse *_p = ::soap_new_ns1__DeleteAlertScheduleByScheduleIdResponse(soap);
	if (_p)
	{	::soap_default_ns1__DeleteAlertScheduleByScheduleIdResponse(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__DeleteAlertScheduleByScheduleIdResponse(struct soap*, const struct ns1__DeleteAlertScheduleByScheduleIdResponse *, const char*, const char*);

inline int soap_write_ns1__DeleteAlertScheduleByScheduleIdResponse(struct soap *soap, struct ns1__DeleteAlertScheduleByScheduleIdResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__DeleteAlertScheduleByScheduleIdResponse(soap, p), 0) || ::soap_put_ns1__DeleteAlertScheduleByScheduleIdResponse(soap, p, "ns1:DeleteAlertScheduleByScheduleIdResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__DeleteAlertScheduleByScheduleIdResponse(struct soap *soap, const char *URL, struct ns1__DeleteAlertScheduleByScheduleIdResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__DeleteAlertScheduleByScheduleIdResponse(soap, p), 0) || ::soap_put_ns1__DeleteAlertScheduleByScheduleIdResponse(soap, p, "ns1:DeleteAlertScheduleByScheduleIdResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__DeleteAlertScheduleByScheduleIdResponse(struct soap *soap, const char *URL, struct ns1__DeleteAlertScheduleByScheduleIdResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__DeleteAlertScheduleByScheduleIdResponse(soap, p), 0) || ::soap_put_ns1__DeleteAlertScheduleByScheduleIdResponse(soap, p, "ns1:DeleteAlertScheduleByScheduleIdResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__DeleteAlertScheduleByScheduleIdResponse(struct soap *soap, const char *URL, struct ns1__DeleteAlertScheduleByScheduleIdResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__DeleteAlertScheduleByScheduleIdResponse(soap, p), 0) || ::soap_put_ns1__DeleteAlertScheduleByScheduleIdResponse(soap, p, "ns1:DeleteAlertScheduleByScheduleIdResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__DeleteAlertScheduleByScheduleIdResponse * SOAP_FMAC4 soap_get_ns1__DeleteAlertScheduleByScheduleIdResponse(struct soap*, struct ns1__DeleteAlertScheduleByScheduleIdResponse *, const char*, const char*);

inline int soap_read_ns1__DeleteAlertScheduleByScheduleIdResponse(struct soap *soap, struct ns1__DeleteAlertScheduleByScheduleIdResponse *p)
{
	if (p)
	{	::soap_default_ns1__DeleteAlertScheduleByScheduleIdResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__DeleteAlertScheduleByScheduleIdResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__DeleteAlertScheduleByScheduleIdResponse(struct soap *soap, const char *URL, struct ns1__DeleteAlertScheduleByScheduleIdResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__DeleteAlertScheduleByScheduleIdResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__DeleteAlertScheduleByScheduleIdResponse(struct soap *soap, struct ns1__DeleteAlertScheduleByScheduleIdResponse *p)
{
	if (::soap_read_ns1__DeleteAlertScheduleByScheduleIdResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__DeleteAlertActionParameter_DEFINED
#define SOAP_TYPE_ns1__DeleteAlertActionParameter_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__DeleteAlertActionParameter(struct soap*, struct ns1__DeleteAlertActionParameter *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__DeleteAlertActionParameter(struct soap*, const struct ns1__DeleteAlertActionParameter *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DeleteAlertActionParameter(struct soap*, const char*, int, const struct ns1__DeleteAlertActionParameter *, const char*);
SOAP_FMAC3 struct ns1__DeleteAlertActionParameter * SOAP_FMAC4 soap_in_ns1__DeleteAlertActionParameter(struct soap*, const char*, struct ns1__DeleteAlertActionParameter *, const char*);
SOAP_FMAC1 struct ns1__DeleteAlertActionParameter * SOAP_FMAC2 soap_instantiate_ns1__DeleteAlertActionParameter(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__DeleteAlertActionParameter * soap_new_ns1__DeleteAlertActionParameter(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__DeleteAlertActionParameter(soap, n, NULL, NULL, NULL);
}

inline struct ns1__DeleteAlertActionParameter * soap_new_req_ns1__DeleteAlertActionParameter(
	struct soap *soap,
	int _in0)
{
	struct ns1__DeleteAlertActionParameter *_p = ::soap_new_ns1__DeleteAlertActionParameter(soap);
	if (_p)
	{	::soap_default_ns1__DeleteAlertActionParameter(soap, _p);
		_p->_in0 = _in0;
	}
	return _p;
}

inline struct ns1__DeleteAlertActionParameter * soap_new_set_ns1__DeleteAlertActionParameter(
	struct soap *soap,
	int _in0)
{
	struct ns1__DeleteAlertActionParameter *_p = ::soap_new_ns1__DeleteAlertActionParameter(soap);
	if (_p)
	{	::soap_default_ns1__DeleteAlertActionParameter(soap, _p);
		_p->_in0 = _in0;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__DeleteAlertActionParameter(struct soap*, const struct ns1__DeleteAlertActionParameter *, const char*, const char*);

inline int soap_write_ns1__DeleteAlertActionParameter(struct soap *soap, struct ns1__DeleteAlertActionParameter const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__DeleteAlertActionParameter(soap, p), 0) || ::soap_put_ns1__DeleteAlertActionParameter(soap, p, "ns1:DeleteAlertActionParameter", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__DeleteAlertActionParameter(struct soap *soap, const char *URL, struct ns1__DeleteAlertActionParameter const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__DeleteAlertActionParameter(soap, p), 0) || ::soap_put_ns1__DeleteAlertActionParameter(soap, p, "ns1:DeleteAlertActionParameter", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__DeleteAlertActionParameter(struct soap *soap, const char *URL, struct ns1__DeleteAlertActionParameter const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__DeleteAlertActionParameter(soap, p), 0) || ::soap_put_ns1__DeleteAlertActionParameter(soap, p, "ns1:DeleteAlertActionParameter", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__DeleteAlertActionParameter(struct soap *soap, const char *URL, struct ns1__DeleteAlertActionParameter const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__DeleteAlertActionParameter(soap, p), 0) || ::soap_put_ns1__DeleteAlertActionParameter(soap, p, "ns1:DeleteAlertActionParameter", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__DeleteAlertActionParameter * SOAP_FMAC4 soap_get_ns1__DeleteAlertActionParameter(struct soap*, struct ns1__DeleteAlertActionParameter *, const char*, const char*);

inline int soap_read_ns1__DeleteAlertActionParameter(struct soap *soap, struct ns1__DeleteAlertActionParameter *p)
{
	if (p)
	{	::soap_default_ns1__DeleteAlertActionParameter(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__DeleteAlertActionParameter(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__DeleteAlertActionParameter(struct soap *soap, const char *URL, struct ns1__DeleteAlertActionParameter *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__DeleteAlertActionParameter(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__DeleteAlertActionParameter(struct soap *soap, struct ns1__DeleteAlertActionParameter *p)
{
	if (::soap_read_ns1__DeleteAlertActionParameter(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__DeleteAlertActionParameterResponse_DEFINED
#define SOAP_TYPE_ns1__DeleteAlertActionParameterResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__DeleteAlertActionParameterResponse(struct soap*, struct ns1__DeleteAlertActionParameterResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__DeleteAlertActionParameterResponse(struct soap*, const struct ns1__DeleteAlertActionParameterResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DeleteAlertActionParameterResponse(struct soap*, const char*, int, const struct ns1__DeleteAlertActionParameterResponse *, const char*);
SOAP_FMAC3 struct ns1__DeleteAlertActionParameterResponse * SOAP_FMAC4 soap_in_ns1__DeleteAlertActionParameterResponse(struct soap*, const char*, struct ns1__DeleteAlertActionParameterResponse *, const char*);
SOAP_FMAC1 struct ns1__DeleteAlertActionParameterResponse * SOAP_FMAC2 soap_instantiate_ns1__DeleteAlertActionParameterResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__DeleteAlertActionParameterResponse * soap_new_ns1__DeleteAlertActionParameterResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__DeleteAlertActionParameterResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__DeleteAlertActionParameterResponse * soap_new_req_ns1__DeleteAlertActionParameterResponse(
	struct soap *soap)
{
	struct ns1__DeleteAlertActionParameterResponse *_p = ::soap_new_ns1__DeleteAlertActionParameterResponse(soap);
	if (_p)
	{	::soap_default_ns1__DeleteAlertActionParameterResponse(soap, _p);
	}
	return _p;
}

inline struct ns1__DeleteAlertActionParameterResponse * soap_new_set_ns1__DeleteAlertActionParameterResponse(
	struct soap *soap)
{
	struct ns1__DeleteAlertActionParameterResponse *_p = ::soap_new_ns1__DeleteAlertActionParameterResponse(soap);
	if (_p)
	{	::soap_default_ns1__DeleteAlertActionParameterResponse(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__DeleteAlertActionParameterResponse(struct soap*, const struct ns1__DeleteAlertActionParameterResponse *, const char*, const char*);

inline int soap_write_ns1__DeleteAlertActionParameterResponse(struct soap *soap, struct ns1__DeleteAlertActionParameterResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__DeleteAlertActionParameterResponse(soap, p), 0) || ::soap_put_ns1__DeleteAlertActionParameterResponse(soap, p, "ns1:DeleteAlertActionParameterResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__DeleteAlertActionParameterResponse(struct soap *soap, const char *URL, struct ns1__DeleteAlertActionParameterResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__DeleteAlertActionParameterResponse(soap, p), 0) || ::soap_put_ns1__DeleteAlertActionParameterResponse(soap, p, "ns1:DeleteAlertActionParameterResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__DeleteAlertActionParameterResponse(struct soap *soap, const char *URL, struct ns1__DeleteAlertActionParameterResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__DeleteAlertActionParameterResponse(soap, p), 0) || ::soap_put_ns1__DeleteAlertActionParameterResponse(soap, p, "ns1:DeleteAlertActionParameterResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__DeleteAlertActionParameterResponse(struct soap *soap, const char *URL, struct ns1__DeleteAlertActionParameterResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__DeleteAlertActionParameterResponse(soap, p), 0) || ::soap_put_ns1__DeleteAlertActionParameterResponse(soap, p, "ns1:DeleteAlertActionParameterResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__DeleteAlertActionParameterResponse * SOAP_FMAC4 soap_get_ns1__DeleteAlertActionParameterResponse(struct soap*, struct ns1__DeleteAlertActionParameterResponse *, const char*, const char*);

inline int soap_read_ns1__DeleteAlertActionParameterResponse(struct soap *soap, struct ns1__DeleteAlertActionParameterResponse *p)
{
	if (p)
	{	::soap_default_ns1__DeleteAlertActionParameterResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__DeleteAlertActionParameterResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__DeleteAlertActionParameterResponse(struct soap *soap, const char *URL, struct ns1__DeleteAlertActionParameterResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__DeleteAlertActionParameterResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__DeleteAlertActionParameterResponse(struct soap *soap, struct ns1__DeleteAlertActionParameterResponse *p)
{
	if (::soap_read_ns1__DeleteAlertActionParameterResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__DeleteAlertActionParameter2_DEFINED
#define SOAP_TYPE_ns1__DeleteAlertActionParameter2_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__DeleteAlertActionParameter2(struct soap*, struct ns1__DeleteAlertActionParameter2 *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__DeleteAlertActionParameter2(struct soap*, const struct ns1__DeleteAlertActionParameter2 *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DeleteAlertActionParameter2(struct soap*, const char*, int, const struct ns1__DeleteAlertActionParameter2 *, const char*);
SOAP_FMAC3 struct ns1__DeleteAlertActionParameter2 * SOAP_FMAC4 soap_in_ns1__DeleteAlertActionParameter2(struct soap*, const char*, struct ns1__DeleteAlertActionParameter2 *, const char*);
SOAP_FMAC1 struct ns1__DeleteAlertActionParameter2 * SOAP_FMAC2 soap_instantiate_ns1__DeleteAlertActionParameter2(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__DeleteAlertActionParameter2 * soap_new_ns1__DeleteAlertActionParameter2(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__DeleteAlertActionParameter2(soap, n, NULL, NULL, NULL);
}

inline struct ns1__DeleteAlertActionParameter2 * soap_new_req_ns1__DeleteAlertActionParameter2(
	struct soap *soap,
	int _in0,
	int _in1)
{
	struct ns1__DeleteAlertActionParameter2 *_p = ::soap_new_ns1__DeleteAlertActionParameter2(soap);
	if (_p)
	{	::soap_default_ns1__DeleteAlertActionParameter2(soap, _p);
		_p->_in0 = _in0;
		_p->_in1 = _in1;
	}
	return _p;
}

inline struct ns1__DeleteAlertActionParameter2 * soap_new_set_ns1__DeleteAlertActionParameter2(
	struct soap *soap,
	int _in0,
	int _in1)
{
	struct ns1__DeleteAlertActionParameter2 *_p = ::soap_new_ns1__DeleteAlertActionParameter2(soap);
	if (_p)
	{	::soap_default_ns1__DeleteAlertActionParameter2(soap, _p);
		_p->_in0 = _in0;
		_p->_in1 = _in1;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__DeleteAlertActionParameter2(struct soap*, const struct ns1__DeleteAlertActionParameter2 *, const char*, const char*);

inline int soap_write_ns1__DeleteAlertActionParameter2(struct soap *soap, struct ns1__DeleteAlertActionParameter2 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__DeleteAlertActionParameter2(soap, p), 0) || ::soap_put_ns1__DeleteAlertActionParameter2(soap, p, "ns1:DeleteAlertActionParameter2", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__DeleteAlertActionParameter2(struct soap *soap, const char *URL, struct ns1__DeleteAlertActionParameter2 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__DeleteAlertActionParameter2(soap, p), 0) || ::soap_put_ns1__DeleteAlertActionParameter2(soap, p, "ns1:DeleteAlertActionParameter2", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__DeleteAlertActionParameter2(struct soap *soap, const char *URL, struct ns1__DeleteAlertActionParameter2 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__DeleteAlertActionParameter2(soap, p), 0) || ::soap_put_ns1__DeleteAlertActionParameter2(soap, p, "ns1:DeleteAlertActionParameter2", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__DeleteAlertActionParameter2(struct soap *soap, const char *URL, struct ns1__DeleteAlertActionParameter2 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__DeleteAlertActionParameter2(soap, p), 0) || ::soap_put_ns1__DeleteAlertActionParameter2(soap, p, "ns1:DeleteAlertActionParameter2", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__DeleteAlertActionParameter2 * SOAP_FMAC4 soap_get_ns1__DeleteAlertActionParameter2(struct soap*, struct ns1__DeleteAlertActionParameter2 *, const char*, const char*);

inline int soap_read_ns1__DeleteAlertActionParameter2(struct soap *soap, struct ns1__DeleteAlertActionParameter2 *p)
{
	if (p)
	{	::soap_default_ns1__DeleteAlertActionParameter2(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__DeleteAlertActionParameter2(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__DeleteAlertActionParameter2(struct soap *soap, const char *URL, struct ns1__DeleteAlertActionParameter2 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__DeleteAlertActionParameter2(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__DeleteAlertActionParameter2(struct soap *soap, struct ns1__DeleteAlertActionParameter2 *p)
{
	if (::soap_read_ns1__DeleteAlertActionParameter2(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__DeleteAlertActionParameter2Response_DEFINED
#define SOAP_TYPE_ns1__DeleteAlertActionParameter2Response_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__DeleteAlertActionParameter2Response(struct soap*, struct ns1__DeleteAlertActionParameter2Response *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__DeleteAlertActionParameter2Response(struct soap*, const struct ns1__DeleteAlertActionParameter2Response *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DeleteAlertActionParameter2Response(struct soap*, const char*, int, const struct ns1__DeleteAlertActionParameter2Response *, const char*);
SOAP_FMAC3 struct ns1__DeleteAlertActionParameter2Response * SOAP_FMAC4 soap_in_ns1__DeleteAlertActionParameter2Response(struct soap*, const char*, struct ns1__DeleteAlertActionParameter2Response *, const char*);
SOAP_FMAC1 struct ns1__DeleteAlertActionParameter2Response * SOAP_FMAC2 soap_instantiate_ns1__DeleteAlertActionParameter2Response(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__DeleteAlertActionParameter2Response * soap_new_ns1__DeleteAlertActionParameter2Response(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__DeleteAlertActionParameter2Response(soap, n, NULL, NULL, NULL);
}

inline struct ns1__DeleteAlertActionParameter2Response * soap_new_req_ns1__DeleteAlertActionParameter2Response(
	struct soap *soap)
{
	struct ns1__DeleteAlertActionParameter2Response *_p = ::soap_new_ns1__DeleteAlertActionParameter2Response(soap);
	if (_p)
	{	::soap_default_ns1__DeleteAlertActionParameter2Response(soap, _p);
	}
	return _p;
}

inline struct ns1__DeleteAlertActionParameter2Response * soap_new_set_ns1__DeleteAlertActionParameter2Response(
	struct soap *soap)
{
	struct ns1__DeleteAlertActionParameter2Response *_p = ::soap_new_ns1__DeleteAlertActionParameter2Response(soap);
	if (_p)
	{	::soap_default_ns1__DeleteAlertActionParameter2Response(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__DeleteAlertActionParameter2Response(struct soap*, const struct ns1__DeleteAlertActionParameter2Response *, const char*, const char*);

inline int soap_write_ns1__DeleteAlertActionParameter2Response(struct soap *soap, struct ns1__DeleteAlertActionParameter2Response const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__DeleteAlertActionParameter2Response(soap, p), 0) || ::soap_put_ns1__DeleteAlertActionParameter2Response(soap, p, "ns1:DeleteAlertActionParameter2Response", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__DeleteAlertActionParameter2Response(struct soap *soap, const char *URL, struct ns1__DeleteAlertActionParameter2Response const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__DeleteAlertActionParameter2Response(soap, p), 0) || ::soap_put_ns1__DeleteAlertActionParameter2Response(soap, p, "ns1:DeleteAlertActionParameter2Response", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__DeleteAlertActionParameter2Response(struct soap *soap, const char *URL, struct ns1__DeleteAlertActionParameter2Response const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__DeleteAlertActionParameter2Response(soap, p), 0) || ::soap_put_ns1__DeleteAlertActionParameter2Response(soap, p, "ns1:DeleteAlertActionParameter2Response", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__DeleteAlertActionParameter2Response(struct soap *soap, const char *URL, struct ns1__DeleteAlertActionParameter2Response const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__DeleteAlertActionParameter2Response(soap, p), 0) || ::soap_put_ns1__DeleteAlertActionParameter2Response(soap, p, "ns1:DeleteAlertActionParameter2Response", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__DeleteAlertActionParameter2Response * SOAP_FMAC4 soap_get_ns1__DeleteAlertActionParameter2Response(struct soap*, struct ns1__DeleteAlertActionParameter2Response *, const char*, const char*);

inline int soap_read_ns1__DeleteAlertActionParameter2Response(struct soap *soap, struct ns1__DeleteAlertActionParameter2Response *p)
{
	if (p)
	{	::soap_default_ns1__DeleteAlertActionParameter2Response(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__DeleteAlertActionParameter2Response(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__DeleteAlertActionParameter2Response(struct soap *soap, const char *URL, struct ns1__DeleteAlertActionParameter2Response *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__DeleteAlertActionParameter2Response(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__DeleteAlertActionParameter2Response(struct soap *soap, struct ns1__DeleteAlertActionParameter2Response *p)
{
	if (::soap_read_ns1__DeleteAlertActionParameter2Response(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__DeleteAlertActionField_DEFINED
#define SOAP_TYPE_ns1__DeleteAlertActionField_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__DeleteAlertActionField(struct soap*, struct ns1__DeleteAlertActionField *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__DeleteAlertActionField(struct soap*, const struct ns1__DeleteAlertActionField *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DeleteAlertActionField(struct soap*, const char*, int, const struct ns1__DeleteAlertActionField *, const char*);
SOAP_FMAC3 struct ns1__DeleteAlertActionField * SOAP_FMAC4 soap_in_ns1__DeleteAlertActionField(struct soap*, const char*, struct ns1__DeleteAlertActionField *, const char*);
SOAP_FMAC1 struct ns1__DeleteAlertActionField * SOAP_FMAC2 soap_instantiate_ns1__DeleteAlertActionField(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__DeleteAlertActionField * soap_new_ns1__DeleteAlertActionField(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__DeleteAlertActionField(soap, n, NULL, NULL, NULL);
}

inline struct ns1__DeleteAlertActionField * soap_new_req_ns1__DeleteAlertActionField(
	struct soap *soap,
	int _in0)
{
	struct ns1__DeleteAlertActionField *_p = ::soap_new_ns1__DeleteAlertActionField(soap);
	if (_p)
	{	::soap_default_ns1__DeleteAlertActionField(soap, _p);
		_p->_in0 = _in0;
	}
	return _p;
}

inline struct ns1__DeleteAlertActionField * soap_new_set_ns1__DeleteAlertActionField(
	struct soap *soap,
	int _in0)
{
	struct ns1__DeleteAlertActionField *_p = ::soap_new_ns1__DeleteAlertActionField(soap);
	if (_p)
	{	::soap_default_ns1__DeleteAlertActionField(soap, _p);
		_p->_in0 = _in0;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__DeleteAlertActionField(struct soap*, const struct ns1__DeleteAlertActionField *, const char*, const char*);

inline int soap_write_ns1__DeleteAlertActionField(struct soap *soap, struct ns1__DeleteAlertActionField const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__DeleteAlertActionField(soap, p), 0) || ::soap_put_ns1__DeleteAlertActionField(soap, p, "ns1:DeleteAlertActionField", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__DeleteAlertActionField(struct soap *soap, const char *URL, struct ns1__DeleteAlertActionField const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__DeleteAlertActionField(soap, p), 0) || ::soap_put_ns1__DeleteAlertActionField(soap, p, "ns1:DeleteAlertActionField", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__DeleteAlertActionField(struct soap *soap, const char *URL, struct ns1__DeleteAlertActionField const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__DeleteAlertActionField(soap, p), 0) || ::soap_put_ns1__DeleteAlertActionField(soap, p, "ns1:DeleteAlertActionField", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__DeleteAlertActionField(struct soap *soap, const char *URL, struct ns1__DeleteAlertActionField const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__DeleteAlertActionField(soap, p), 0) || ::soap_put_ns1__DeleteAlertActionField(soap, p, "ns1:DeleteAlertActionField", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__DeleteAlertActionField * SOAP_FMAC4 soap_get_ns1__DeleteAlertActionField(struct soap*, struct ns1__DeleteAlertActionField *, const char*, const char*);

inline int soap_read_ns1__DeleteAlertActionField(struct soap *soap, struct ns1__DeleteAlertActionField *p)
{
	if (p)
	{	::soap_default_ns1__DeleteAlertActionField(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__DeleteAlertActionField(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__DeleteAlertActionField(struct soap *soap, const char *URL, struct ns1__DeleteAlertActionField *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__DeleteAlertActionField(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__DeleteAlertActionField(struct soap *soap, struct ns1__DeleteAlertActionField *p)
{
	if (::soap_read_ns1__DeleteAlertActionField(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__DeleteAlertActionFieldResponse_DEFINED
#define SOAP_TYPE_ns1__DeleteAlertActionFieldResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__DeleteAlertActionFieldResponse(struct soap*, struct ns1__DeleteAlertActionFieldResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__DeleteAlertActionFieldResponse(struct soap*, const struct ns1__DeleteAlertActionFieldResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DeleteAlertActionFieldResponse(struct soap*, const char*, int, const struct ns1__DeleteAlertActionFieldResponse *, const char*);
SOAP_FMAC3 struct ns1__DeleteAlertActionFieldResponse * SOAP_FMAC4 soap_in_ns1__DeleteAlertActionFieldResponse(struct soap*, const char*, struct ns1__DeleteAlertActionFieldResponse *, const char*);
SOAP_FMAC1 struct ns1__DeleteAlertActionFieldResponse * SOAP_FMAC2 soap_instantiate_ns1__DeleteAlertActionFieldResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__DeleteAlertActionFieldResponse * soap_new_ns1__DeleteAlertActionFieldResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__DeleteAlertActionFieldResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__DeleteAlertActionFieldResponse * soap_new_req_ns1__DeleteAlertActionFieldResponse(
	struct soap *soap)
{
	struct ns1__DeleteAlertActionFieldResponse *_p = ::soap_new_ns1__DeleteAlertActionFieldResponse(soap);
	if (_p)
	{	::soap_default_ns1__DeleteAlertActionFieldResponse(soap, _p);
	}
	return _p;
}

inline struct ns1__DeleteAlertActionFieldResponse * soap_new_set_ns1__DeleteAlertActionFieldResponse(
	struct soap *soap)
{
	struct ns1__DeleteAlertActionFieldResponse *_p = ::soap_new_ns1__DeleteAlertActionFieldResponse(soap);
	if (_p)
	{	::soap_default_ns1__DeleteAlertActionFieldResponse(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__DeleteAlertActionFieldResponse(struct soap*, const struct ns1__DeleteAlertActionFieldResponse *, const char*, const char*);

inline int soap_write_ns1__DeleteAlertActionFieldResponse(struct soap *soap, struct ns1__DeleteAlertActionFieldResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__DeleteAlertActionFieldResponse(soap, p), 0) || ::soap_put_ns1__DeleteAlertActionFieldResponse(soap, p, "ns1:DeleteAlertActionFieldResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__DeleteAlertActionFieldResponse(struct soap *soap, const char *URL, struct ns1__DeleteAlertActionFieldResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__DeleteAlertActionFieldResponse(soap, p), 0) || ::soap_put_ns1__DeleteAlertActionFieldResponse(soap, p, "ns1:DeleteAlertActionFieldResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__DeleteAlertActionFieldResponse(struct soap *soap, const char *URL, struct ns1__DeleteAlertActionFieldResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__DeleteAlertActionFieldResponse(soap, p), 0) || ::soap_put_ns1__DeleteAlertActionFieldResponse(soap, p, "ns1:DeleteAlertActionFieldResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__DeleteAlertActionFieldResponse(struct soap *soap, const char *URL, struct ns1__DeleteAlertActionFieldResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__DeleteAlertActionFieldResponse(soap, p), 0) || ::soap_put_ns1__DeleteAlertActionFieldResponse(soap, p, "ns1:DeleteAlertActionFieldResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__DeleteAlertActionFieldResponse * SOAP_FMAC4 soap_get_ns1__DeleteAlertActionFieldResponse(struct soap*, struct ns1__DeleteAlertActionFieldResponse *, const char*, const char*);

inline int soap_read_ns1__DeleteAlertActionFieldResponse(struct soap *soap, struct ns1__DeleteAlertActionFieldResponse *p)
{
	if (p)
	{	::soap_default_ns1__DeleteAlertActionFieldResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__DeleteAlertActionFieldResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__DeleteAlertActionFieldResponse(struct soap *soap, const char *URL, struct ns1__DeleteAlertActionFieldResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__DeleteAlertActionFieldResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__DeleteAlertActionFieldResponse(struct soap *soap, struct ns1__DeleteAlertActionFieldResponse *p)
{
	if (::soap_read_ns1__DeleteAlertActionFieldResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__DeleteAlertActionField2_DEFINED
#define SOAP_TYPE_ns1__DeleteAlertActionField2_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__DeleteAlertActionField2(struct soap*, struct ns1__DeleteAlertActionField2 *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__DeleteAlertActionField2(struct soap*, const struct ns1__DeleteAlertActionField2 *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DeleteAlertActionField2(struct soap*, const char*, int, const struct ns1__DeleteAlertActionField2 *, const char*);
SOAP_FMAC3 struct ns1__DeleteAlertActionField2 * SOAP_FMAC4 soap_in_ns1__DeleteAlertActionField2(struct soap*, const char*, struct ns1__DeleteAlertActionField2 *, const char*);
SOAP_FMAC1 struct ns1__DeleteAlertActionField2 * SOAP_FMAC2 soap_instantiate_ns1__DeleteAlertActionField2(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__DeleteAlertActionField2 * soap_new_ns1__DeleteAlertActionField2(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__DeleteAlertActionField2(soap, n, NULL, NULL, NULL);
}

inline struct ns1__DeleteAlertActionField2 * soap_new_req_ns1__DeleteAlertActionField2(
	struct soap *soap,
	int _in0,
	int _in1)
{
	struct ns1__DeleteAlertActionField2 *_p = ::soap_new_ns1__DeleteAlertActionField2(soap);
	if (_p)
	{	::soap_default_ns1__DeleteAlertActionField2(soap, _p);
		_p->_in0 = _in0;
		_p->_in1 = _in1;
	}
	return _p;
}

inline struct ns1__DeleteAlertActionField2 * soap_new_set_ns1__DeleteAlertActionField2(
	struct soap *soap,
	int _in0,
	int _in1)
{
	struct ns1__DeleteAlertActionField2 *_p = ::soap_new_ns1__DeleteAlertActionField2(soap);
	if (_p)
	{	::soap_default_ns1__DeleteAlertActionField2(soap, _p);
		_p->_in0 = _in0;
		_p->_in1 = _in1;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__DeleteAlertActionField2(struct soap*, const struct ns1__DeleteAlertActionField2 *, const char*, const char*);

inline int soap_write_ns1__DeleteAlertActionField2(struct soap *soap, struct ns1__DeleteAlertActionField2 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__DeleteAlertActionField2(soap, p), 0) || ::soap_put_ns1__DeleteAlertActionField2(soap, p, "ns1:DeleteAlertActionField2", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__DeleteAlertActionField2(struct soap *soap, const char *URL, struct ns1__DeleteAlertActionField2 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__DeleteAlertActionField2(soap, p), 0) || ::soap_put_ns1__DeleteAlertActionField2(soap, p, "ns1:DeleteAlertActionField2", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__DeleteAlertActionField2(struct soap *soap, const char *URL, struct ns1__DeleteAlertActionField2 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__DeleteAlertActionField2(soap, p), 0) || ::soap_put_ns1__DeleteAlertActionField2(soap, p, "ns1:DeleteAlertActionField2", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__DeleteAlertActionField2(struct soap *soap, const char *URL, struct ns1__DeleteAlertActionField2 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__DeleteAlertActionField2(soap, p), 0) || ::soap_put_ns1__DeleteAlertActionField2(soap, p, "ns1:DeleteAlertActionField2", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__DeleteAlertActionField2 * SOAP_FMAC4 soap_get_ns1__DeleteAlertActionField2(struct soap*, struct ns1__DeleteAlertActionField2 *, const char*, const char*);

inline int soap_read_ns1__DeleteAlertActionField2(struct soap *soap, struct ns1__DeleteAlertActionField2 *p)
{
	if (p)
	{	::soap_default_ns1__DeleteAlertActionField2(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__DeleteAlertActionField2(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__DeleteAlertActionField2(struct soap *soap, const char *URL, struct ns1__DeleteAlertActionField2 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__DeleteAlertActionField2(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__DeleteAlertActionField2(struct soap *soap, struct ns1__DeleteAlertActionField2 *p)
{
	if (::soap_read_ns1__DeleteAlertActionField2(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__DeleteAlertActionField2Response_DEFINED
#define SOAP_TYPE_ns1__DeleteAlertActionField2Response_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__DeleteAlertActionField2Response(struct soap*, struct ns1__DeleteAlertActionField2Response *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__DeleteAlertActionField2Response(struct soap*, const struct ns1__DeleteAlertActionField2Response *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DeleteAlertActionField2Response(struct soap*, const char*, int, const struct ns1__DeleteAlertActionField2Response *, const char*);
SOAP_FMAC3 struct ns1__DeleteAlertActionField2Response * SOAP_FMAC4 soap_in_ns1__DeleteAlertActionField2Response(struct soap*, const char*, struct ns1__DeleteAlertActionField2Response *, const char*);
SOAP_FMAC1 struct ns1__DeleteAlertActionField2Response * SOAP_FMAC2 soap_instantiate_ns1__DeleteAlertActionField2Response(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__DeleteAlertActionField2Response * soap_new_ns1__DeleteAlertActionField2Response(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__DeleteAlertActionField2Response(soap, n, NULL, NULL, NULL);
}

inline struct ns1__DeleteAlertActionField2Response * soap_new_req_ns1__DeleteAlertActionField2Response(
	struct soap *soap)
{
	struct ns1__DeleteAlertActionField2Response *_p = ::soap_new_ns1__DeleteAlertActionField2Response(soap);
	if (_p)
	{	::soap_default_ns1__DeleteAlertActionField2Response(soap, _p);
	}
	return _p;
}

inline struct ns1__DeleteAlertActionField2Response * soap_new_set_ns1__DeleteAlertActionField2Response(
	struct soap *soap)
{
	struct ns1__DeleteAlertActionField2Response *_p = ::soap_new_ns1__DeleteAlertActionField2Response(soap);
	if (_p)
	{	::soap_default_ns1__DeleteAlertActionField2Response(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__DeleteAlertActionField2Response(struct soap*, const struct ns1__DeleteAlertActionField2Response *, const char*, const char*);

inline int soap_write_ns1__DeleteAlertActionField2Response(struct soap *soap, struct ns1__DeleteAlertActionField2Response const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__DeleteAlertActionField2Response(soap, p), 0) || ::soap_put_ns1__DeleteAlertActionField2Response(soap, p, "ns1:DeleteAlertActionField2Response", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__DeleteAlertActionField2Response(struct soap *soap, const char *URL, struct ns1__DeleteAlertActionField2Response const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__DeleteAlertActionField2Response(soap, p), 0) || ::soap_put_ns1__DeleteAlertActionField2Response(soap, p, "ns1:DeleteAlertActionField2Response", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__DeleteAlertActionField2Response(struct soap *soap, const char *URL, struct ns1__DeleteAlertActionField2Response const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__DeleteAlertActionField2Response(soap, p), 0) || ::soap_put_ns1__DeleteAlertActionField2Response(soap, p, "ns1:DeleteAlertActionField2Response", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__DeleteAlertActionField2Response(struct soap *soap, const char *URL, struct ns1__DeleteAlertActionField2Response const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__DeleteAlertActionField2Response(soap, p), 0) || ::soap_put_ns1__DeleteAlertActionField2Response(soap, p, "ns1:DeleteAlertActionField2Response", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__DeleteAlertActionField2Response * SOAP_FMAC4 soap_get_ns1__DeleteAlertActionField2Response(struct soap*, struct ns1__DeleteAlertActionField2Response *, const char*, const char*);

inline int soap_read_ns1__DeleteAlertActionField2Response(struct soap *soap, struct ns1__DeleteAlertActionField2Response *p)
{
	if (p)
	{	::soap_default_ns1__DeleteAlertActionField2Response(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__DeleteAlertActionField2Response(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__DeleteAlertActionField2Response(struct soap *soap, const char *URL, struct ns1__DeleteAlertActionField2Response *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__DeleteAlertActionField2Response(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__DeleteAlertActionField2Response(struct soap *soap, struct ns1__DeleteAlertActionField2Response *p)
{
	if (::soap_read_ns1__DeleteAlertActionField2Response(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__AcknowledgeSystemAlert_DEFINED
#define SOAP_TYPE_ns1__AcknowledgeSystemAlert_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__AcknowledgeSystemAlert(struct soap*, struct ns1__AcknowledgeSystemAlert *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__AcknowledgeSystemAlert(struct soap*, const struct ns1__AcknowledgeSystemAlert *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__AcknowledgeSystemAlert(struct soap*, const char*, int, const struct ns1__AcknowledgeSystemAlert *, const char*);
SOAP_FMAC3 struct ns1__AcknowledgeSystemAlert * SOAP_FMAC4 soap_in_ns1__AcknowledgeSystemAlert(struct soap*, const char*, struct ns1__AcknowledgeSystemAlert *, const char*);
SOAP_FMAC1 struct ns1__AcknowledgeSystemAlert * SOAP_FMAC2 soap_instantiate_ns1__AcknowledgeSystemAlert(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__AcknowledgeSystemAlert * soap_new_ns1__AcknowledgeSystemAlert(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__AcknowledgeSystemAlert(soap, n, NULL, NULL, NULL);
}

inline struct ns1__AcknowledgeSystemAlert * soap_new_req_ns1__AcknowledgeSystemAlert(
	struct soap *soap,
	int _in0,
	const std::string& _in1)
{
	struct ns1__AcknowledgeSystemAlert *_p = ::soap_new_ns1__AcknowledgeSystemAlert(soap);
	if (_p)
	{	::soap_default_ns1__AcknowledgeSystemAlert(soap, _p);
		_p->_in0 = _in0;
		_p->_in1 = _in1;
	}
	return _p;
}

inline struct ns1__AcknowledgeSystemAlert * soap_new_set_ns1__AcknowledgeSystemAlert(
	struct soap *soap,
	int _in0,
	const std::string& _in1)
{
	struct ns1__AcknowledgeSystemAlert *_p = ::soap_new_ns1__AcknowledgeSystemAlert(soap);
	if (_p)
	{	::soap_default_ns1__AcknowledgeSystemAlert(soap, _p);
		_p->_in0 = _in0;
		_p->_in1 = _in1;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__AcknowledgeSystemAlert(struct soap*, const struct ns1__AcknowledgeSystemAlert *, const char*, const char*);

inline int soap_write_ns1__AcknowledgeSystemAlert(struct soap *soap, struct ns1__AcknowledgeSystemAlert const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__AcknowledgeSystemAlert(soap, p), 0) || ::soap_put_ns1__AcknowledgeSystemAlert(soap, p, "ns1:AcknowledgeSystemAlert", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__AcknowledgeSystemAlert(struct soap *soap, const char *URL, struct ns1__AcknowledgeSystemAlert const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__AcknowledgeSystemAlert(soap, p), 0) || ::soap_put_ns1__AcknowledgeSystemAlert(soap, p, "ns1:AcknowledgeSystemAlert", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__AcknowledgeSystemAlert(struct soap *soap, const char *URL, struct ns1__AcknowledgeSystemAlert const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__AcknowledgeSystemAlert(soap, p), 0) || ::soap_put_ns1__AcknowledgeSystemAlert(soap, p, "ns1:AcknowledgeSystemAlert", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__AcknowledgeSystemAlert(struct soap *soap, const char *URL, struct ns1__AcknowledgeSystemAlert const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__AcknowledgeSystemAlert(soap, p), 0) || ::soap_put_ns1__AcknowledgeSystemAlert(soap, p, "ns1:AcknowledgeSystemAlert", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__AcknowledgeSystemAlert * SOAP_FMAC4 soap_get_ns1__AcknowledgeSystemAlert(struct soap*, struct ns1__AcknowledgeSystemAlert *, const char*, const char*);

inline int soap_read_ns1__AcknowledgeSystemAlert(struct soap *soap, struct ns1__AcknowledgeSystemAlert *p)
{
	if (p)
	{	::soap_default_ns1__AcknowledgeSystemAlert(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__AcknowledgeSystemAlert(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__AcknowledgeSystemAlert(struct soap *soap, const char *URL, struct ns1__AcknowledgeSystemAlert *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__AcknowledgeSystemAlert(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__AcknowledgeSystemAlert(struct soap *soap, struct ns1__AcknowledgeSystemAlert *p)
{
	if (::soap_read_ns1__AcknowledgeSystemAlert(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__AcknowledgeSystemAlertResponse_DEFINED
#define SOAP_TYPE_ns1__AcknowledgeSystemAlertResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__AcknowledgeSystemAlertResponse(struct soap*, struct ns1__AcknowledgeSystemAlertResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__AcknowledgeSystemAlertResponse(struct soap*, const struct ns1__AcknowledgeSystemAlertResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__AcknowledgeSystemAlertResponse(struct soap*, const char*, int, const struct ns1__AcknowledgeSystemAlertResponse *, const char*);
SOAP_FMAC3 struct ns1__AcknowledgeSystemAlertResponse * SOAP_FMAC4 soap_in_ns1__AcknowledgeSystemAlertResponse(struct soap*, const char*, struct ns1__AcknowledgeSystemAlertResponse *, const char*);
SOAP_FMAC1 struct ns1__AcknowledgeSystemAlertResponse * SOAP_FMAC2 soap_instantiate_ns1__AcknowledgeSystemAlertResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__AcknowledgeSystemAlertResponse * soap_new_ns1__AcknowledgeSystemAlertResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__AcknowledgeSystemAlertResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__AcknowledgeSystemAlertResponse * soap_new_req_ns1__AcknowledgeSystemAlertResponse(
	struct soap *soap)
{
	struct ns1__AcknowledgeSystemAlertResponse *_p = ::soap_new_ns1__AcknowledgeSystemAlertResponse(soap);
	if (_p)
	{	::soap_default_ns1__AcknowledgeSystemAlertResponse(soap, _p);
	}
	return _p;
}

inline struct ns1__AcknowledgeSystemAlertResponse * soap_new_set_ns1__AcknowledgeSystemAlertResponse(
	struct soap *soap)
{
	struct ns1__AcknowledgeSystemAlertResponse *_p = ::soap_new_ns1__AcknowledgeSystemAlertResponse(soap);
	if (_p)
	{	::soap_default_ns1__AcknowledgeSystemAlertResponse(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__AcknowledgeSystemAlertResponse(struct soap*, const struct ns1__AcknowledgeSystemAlertResponse *, const char*, const char*);

inline int soap_write_ns1__AcknowledgeSystemAlertResponse(struct soap *soap, struct ns1__AcknowledgeSystemAlertResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__AcknowledgeSystemAlertResponse(soap, p), 0) || ::soap_put_ns1__AcknowledgeSystemAlertResponse(soap, p, "ns1:AcknowledgeSystemAlertResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__AcknowledgeSystemAlertResponse(struct soap *soap, const char *URL, struct ns1__AcknowledgeSystemAlertResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__AcknowledgeSystemAlertResponse(soap, p), 0) || ::soap_put_ns1__AcknowledgeSystemAlertResponse(soap, p, "ns1:AcknowledgeSystemAlertResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__AcknowledgeSystemAlertResponse(struct soap *soap, const char *URL, struct ns1__AcknowledgeSystemAlertResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__AcknowledgeSystemAlertResponse(soap, p), 0) || ::soap_put_ns1__AcknowledgeSystemAlertResponse(soap, p, "ns1:AcknowledgeSystemAlertResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__AcknowledgeSystemAlertResponse(struct soap *soap, const char *URL, struct ns1__AcknowledgeSystemAlertResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__AcknowledgeSystemAlertResponse(soap, p), 0) || ::soap_put_ns1__AcknowledgeSystemAlertResponse(soap, p, "ns1:AcknowledgeSystemAlertResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__AcknowledgeSystemAlertResponse * SOAP_FMAC4 soap_get_ns1__AcknowledgeSystemAlertResponse(struct soap*, struct ns1__AcknowledgeSystemAlertResponse *, const char*, const char*);

inline int soap_read_ns1__AcknowledgeSystemAlertResponse(struct soap *soap, struct ns1__AcknowledgeSystemAlertResponse *p)
{
	if (p)
	{	::soap_default_ns1__AcknowledgeSystemAlertResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__AcknowledgeSystemAlertResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__AcknowledgeSystemAlertResponse(struct soap *soap, const char *URL, struct ns1__AcknowledgeSystemAlertResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__AcknowledgeSystemAlertResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__AcknowledgeSystemAlertResponse(struct soap *soap, struct ns1__AcknowledgeSystemAlertResponse *p)
{
	if (::soap_read_ns1__AcknowledgeSystemAlertResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__AcknowledgeApplicationAlert_DEFINED
#define SOAP_TYPE_ns1__AcknowledgeApplicationAlert_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__AcknowledgeApplicationAlert(struct soap*, struct ns1__AcknowledgeApplicationAlert *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__AcknowledgeApplicationAlert(struct soap*, const struct ns1__AcknowledgeApplicationAlert *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__AcknowledgeApplicationAlert(struct soap*, const char*, int, const struct ns1__AcknowledgeApplicationAlert *, const char*);
SOAP_FMAC3 struct ns1__AcknowledgeApplicationAlert * SOAP_FMAC4 soap_in_ns1__AcknowledgeApplicationAlert(struct soap*, const char*, struct ns1__AcknowledgeApplicationAlert *, const char*);
SOAP_FMAC1 struct ns1__AcknowledgeApplicationAlert * SOAP_FMAC2 soap_instantiate_ns1__AcknowledgeApplicationAlert(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__AcknowledgeApplicationAlert * soap_new_ns1__AcknowledgeApplicationAlert(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__AcknowledgeApplicationAlert(soap, n, NULL, NULL, NULL);
}

inline struct ns1__AcknowledgeApplicationAlert * soap_new_req_ns1__AcknowledgeApplicationAlert(
	struct soap *soap,
	int _in0,
	const std::string& _in1)
{
	struct ns1__AcknowledgeApplicationAlert *_p = ::soap_new_ns1__AcknowledgeApplicationAlert(soap);
	if (_p)
	{	::soap_default_ns1__AcknowledgeApplicationAlert(soap, _p);
		_p->_in0 = _in0;
		_p->_in1 = _in1;
	}
	return _p;
}

inline struct ns1__AcknowledgeApplicationAlert * soap_new_set_ns1__AcknowledgeApplicationAlert(
	struct soap *soap,
	int _in0,
	const std::string& _in1)
{
	struct ns1__AcknowledgeApplicationAlert *_p = ::soap_new_ns1__AcknowledgeApplicationAlert(soap);
	if (_p)
	{	::soap_default_ns1__AcknowledgeApplicationAlert(soap, _p);
		_p->_in0 = _in0;
		_p->_in1 = _in1;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__AcknowledgeApplicationAlert(struct soap*, const struct ns1__AcknowledgeApplicationAlert *, const char*, const char*);

inline int soap_write_ns1__AcknowledgeApplicationAlert(struct soap *soap, struct ns1__AcknowledgeApplicationAlert const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__AcknowledgeApplicationAlert(soap, p), 0) || ::soap_put_ns1__AcknowledgeApplicationAlert(soap, p, "ns1:AcknowledgeApplicationAlert", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__AcknowledgeApplicationAlert(struct soap *soap, const char *URL, struct ns1__AcknowledgeApplicationAlert const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__AcknowledgeApplicationAlert(soap, p), 0) || ::soap_put_ns1__AcknowledgeApplicationAlert(soap, p, "ns1:AcknowledgeApplicationAlert", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__AcknowledgeApplicationAlert(struct soap *soap, const char *URL, struct ns1__AcknowledgeApplicationAlert const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__AcknowledgeApplicationAlert(soap, p), 0) || ::soap_put_ns1__AcknowledgeApplicationAlert(soap, p, "ns1:AcknowledgeApplicationAlert", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__AcknowledgeApplicationAlert(struct soap *soap, const char *URL, struct ns1__AcknowledgeApplicationAlert const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__AcknowledgeApplicationAlert(soap, p), 0) || ::soap_put_ns1__AcknowledgeApplicationAlert(soap, p, "ns1:AcknowledgeApplicationAlert", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__AcknowledgeApplicationAlert * SOAP_FMAC4 soap_get_ns1__AcknowledgeApplicationAlert(struct soap*, struct ns1__AcknowledgeApplicationAlert *, const char*, const char*);

inline int soap_read_ns1__AcknowledgeApplicationAlert(struct soap *soap, struct ns1__AcknowledgeApplicationAlert *p)
{
	if (p)
	{	::soap_default_ns1__AcknowledgeApplicationAlert(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__AcknowledgeApplicationAlert(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__AcknowledgeApplicationAlert(struct soap *soap, const char *URL, struct ns1__AcknowledgeApplicationAlert *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__AcknowledgeApplicationAlert(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__AcknowledgeApplicationAlert(struct soap *soap, struct ns1__AcknowledgeApplicationAlert *p)
{
	if (::soap_read_ns1__AcknowledgeApplicationAlert(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__AcknowledgeApplicationAlertResponse_DEFINED
#define SOAP_TYPE_ns1__AcknowledgeApplicationAlertResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__AcknowledgeApplicationAlertResponse(struct soap*, struct ns1__AcknowledgeApplicationAlertResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__AcknowledgeApplicationAlertResponse(struct soap*, const struct ns1__AcknowledgeApplicationAlertResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__AcknowledgeApplicationAlertResponse(struct soap*, const char*, int, const struct ns1__AcknowledgeApplicationAlertResponse *, const char*);
SOAP_FMAC3 struct ns1__AcknowledgeApplicationAlertResponse * SOAP_FMAC4 soap_in_ns1__AcknowledgeApplicationAlertResponse(struct soap*, const char*, struct ns1__AcknowledgeApplicationAlertResponse *, const char*);
SOAP_FMAC1 struct ns1__AcknowledgeApplicationAlertResponse * SOAP_FMAC2 soap_instantiate_ns1__AcknowledgeApplicationAlertResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__AcknowledgeApplicationAlertResponse * soap_new_ns1__AcknowledgeApplicationAlertResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__AcknowledgeApplicationAlertResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__AcknowledgeApplicationAlertResponse * soap_new_req_ns1__AcknowledgeApplicationAlertResponse(
	struct soap *soap)
{
	struct ns1__AcknowledgeApplicationAlertResponse *_p = ::soap_new_ns1__AcknowledgeApplicationAlertResponse(soap);
	if (_p)
	{	::soap_default_ns1__AcknowledgeApplicationAlertResponse(soap, _p);
	}
	return _p;
}

inline struct ns1__AcknowledgeApplicationAlertResponse * soap_new_set_ns1__AcknowledgeApplicationAlertResponse(
	struct soap *soap)
{
	struct ns1__AcknowledgeApplicationAlertResponse *_p = ::soap_new_ns1__AcknowledgeApplicationAlertResponse(soap);
	if (_p)
	{	::soap_default_ns1__AcknowledgeApplicationAlertResponse(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__AcknowledgeApplicationAlertResponse(struct soap*, const struct ns1__AcknowledgeApplicationAlertResponse *, const char*, const char*);

inline int soap_write_ns1__AcknowledgeApplicationAlertResponse(struct soap *soap, struct ns1__AcknowledgeApplicationAlertResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__AcknowledgeApplicationAlertResponse(soap, p), 0) || ::soap_put_ns1__AcknowledgeApplicationAlertResponse(soap, p, "ns1:AcknowledgeApplicationAlertResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__AcknowledgeApplicationAlertResponse(struct soap *soap, const char *URL, struct ns1__AcknowledgeApplicationAlertResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__AcknowledgeApplicationAlertResponse(soap, p), 0) || ::soap_put_ns1__AcknowledgeApplicationAlertResponse(soap, p, "ns1:AcknowledgeApplicationAlertResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__AcknowledgeApplicationAlertResponse(struct soap *soap, const char *URL, struct ns1__AcknowledgeApplicationAlertResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__AcknowledgeApplicationAlertResponse(soap, p), 0) || ::soap_put_ns1__AcknowledgeApplicationAlertResponse(soap, p, "ns1:AcknowledgeApplicationAlertResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__AcknowledgeApplicationAlertResponse(struct soap *soap, const char *URL, struct ns1__AcknowledgeApplicationAlertResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__AcknowledgeApplicationAlertResponse(soap, p), 0) || ::soap_put_ns1__AcknowledgeApplicationAlertResponse(soap, p, "ns1:AcknowledgeApplicationAlertResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__AcknowledgeApplicationAlertResponse * SOAP_FMAC4 soap_get_ns1__AcknowledgeApplicationAlertResponse(struct soap*, struct ns1__AcknowledgeApplicationAlertResponse *, const char*, const char*);

inline int soap_read_ns1__AcknowledgeApplicationAlertResponse(struct soap *soap, struct ns1__AcknowledgeApplicationAlertResponse *p)
{
	if (p)
	{	::soap_default_ns1__AcknowledgeApplicationAlertResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__AcknowledgeApplicationAlertResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__AcknowledgeApplicationAlertResponse(struct soap *soap, const char *URL, struct ns1__AcknowledgeApplicationAlertResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__AcknowledgeApplicationAlertResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__AcknowledgeApplicationAlertResponse(struct soap *soap, struct ns1__AcknowledgeApplicationAlertResponse *p)
{
	if (::soap_read_ns1__AcknowledgeApplicationAlertResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GetSystemAlerts_DEFINED
#define SOAP_TYPE_ns1__GetSystemAlerts_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__GetSystemAlerts(struct soap*, struct ns1__GetSystemAlerts *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__GetSystemAlerts(struct soap*, const struct ns1__GetSystemAlerts *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetSystemAlerts(struct soap*, const char*, int, const struct ns1__GetSystemAlerts *, const char*);
SOAP_FMAC3 struct ns1__GetSystemAlerts * SOAP_FMAC4 soap_in_ns1__GetSystemAlerts(struct soap*, const char*, struct ns1__GetSystemAlerts *, const char*);
SOAP_FMAC1 struct ns1__GetSystemAlerts * SOAP_FMAC2 soap_instantiate_ns1__GetSystemAlerts(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__GetSystemAlerts * soap_new_ns1__GetSystemAlerts(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetSystemAlerts(soap, n, NULL, NULL, NULL);
}

inline struct ns1__GetSystemAlerts * soap_new_req_ns1__GetSystemAlerts(
	struct soap *soap,
	int _in0)
{
	struct ns1__GetSystemAlerts *_p = ::soap_new_ns1__GetSystemAlerts(soap);
	if (_p)
	{	::soap_default_ns1__GetSystemAlerts(soap, _p);
		_p->_in0 = _in0;
	}
	return _p;
}

inline struct ns1__GetSystemAlerts * soap_new_set_ns1__GetSystemAlerts(
	struct soap *soap,
	int _in0)
{
	struct ns1__GetSystemAlerts *_p = ::soap_new_ns1__GetSystemAlerts(soap);
	if (_p)
	{	::soap_default_ns1__GetSystemAlerts(soap, _p);
		_p->_in0 = _in0;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__GetSystemAlerts(struct soap*, const struct ns1__GetSystemAlerts *, const char*, const char*);

inline int soap_write_ns1__GetSystemAlerts(struct soap *soap, struct ns1__GetSystemAlerts const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__GetSystemAlerts(soap, p), 0) || ::soap_put_ns1__GetSystemAlerts(soap, p, "ns1:GetSystemAlerts", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetSystemAlerts(struct soap *soap, const char *URL, struct ns1__GetSystemAlerts const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetSystemAlerts(soap, p), 0) || ::soap_put_ns1__GetSystemAlerts(soap, p, "ns1:GetSystemAlerts", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__GetSystemAlerts(struct soap *soap, const char *URL, struct ns1__GetSystemAlerts const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetSystemAlerts(soap, p), 0) || ::soap_put_ns1__GetSystemAlerts(soap, p, "ns1:GetSystemAlerts", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetSystemAlerts(struct soap *soap, const char *URL, struct ns1__GetSystemAlerts const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetSystemAlerts(soap, p), 0) || ::soap_put_ns1__GetSystemAlerts(soap, p, "ns1:GetSystemAlerts", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__GetSystemAlerts * SOAP_FMAC4 soap_get_ns1__GetSystemAlerts(struct soap*, struct ns1__GetSystemAlerts *, const char*, const char*);

inline int soap_read_ns1__GetSystemAlerts(struct soap *soap, struct ns1__GetSystemAlerts *p)
{
	if (p)
	{	::soap_default_ns1__GetSystemAlerts(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__GetSystemAlerts(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetSystemAlerts(struct soap *soap, const char *URL, struct ns1__GetSystemAlerts *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__GetSystemAlerts(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GetSystemAlerts(struct soap *soap, struct ns1__GetSystemAlerts *p)
{
	if (::soap_read_ns1__GetSystemAlerts(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GetSystemAlertsResponse_DEFINED
#define SOAP_TYPE_ns1__GetSystemAlertsResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__GetSystemAlertsResponse(struct soap*, struct ns1__GetSystemAlertsResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__GetSystemAlertsResponse(struct soap*, const struct ns1__GetSystemAlertsResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetSystemAlertsResponse(struct soap*, const char*, int, const struct ns1__GetSystemAlertsResponse *, const char*);
SOAP_FMAC3 struct ns1__GetSystemAlertsResponse * SOAP_FMAC4 soap_in_ns1__GetSystemAlertsResponse(struct soap*, const char*, struct ns1__GetSystemAlertsResponse *, const char*);
SOAP_FMAC1 struct ns1__GetSystemAlertsResponse * SOAP_FMAC2 soap_instantiate_ns1__GetSystemAlertsResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__GetSystemAlertsResponse * soap_new_ns1__GetSystemAlertsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetSystemAlertsResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__GetSystemAlertsResponse * soap_new_req_ns1__GetSystemAlertsResponse(
	struct soap *soap,
	const std::string& _GetSystemAlertsReturn)
{
	struct ns1__GetSystemAlertsResponse *_p = ::soap_new_ns1__GetSystemAlertsResponse(soap);
	if (_p)
	{	::soap_default_ns1__GetSystemAlertsResponse(soap, _p);
		_p->_GetSystemAlertsReturn = _GetSystemAlertsReturn;
	}
	return _p;
}

inline struct ns1__GetSystemAlertsResponse * soap_new_set_ns1__GetSystemAlertsResponse(
	struct soap *soap,
	const std::string& _GetSystemAlertsReturn)
{
	struct ns1__GetSystemAlertsResponse *_p = ::soap_new_ns1__GetSystemAlertsResponse(soap);
	if (_p)
	{	::soap_default_ns1__GetSystemAlertsResponse(soap, _p);
		_p->_GetSystemAlertsReturn = _GetSystemAlertsReturn;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__GetSystemAlertsResponse(struct soap*, const struct ns1__GetSystemAlertsResponse *, const char*, const char*);

inline int soap_write_ns1__GetSystemAlertsResponse(struct soap *soap, struct ns1__GetSystemAlertsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__GetSystemAlertsResponse(soap, p), 0) || ::soap_put_ns1__GetSystemAlertsResponse(soap, p, "ns1:GetSystemAlertsResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetSystemAlertsResponse(struct soap *soap, const char *URL, struct ns1__GetSystemAlertsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetSystemAlertsResponse(soap, p), 0) || ::soap_put_ns1__GetSystemAlertsResponse(soap, p, "ns1:GetSystemAlertsResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__GetSystemAlertsResponse(struct soap *soap, const char *URL, struct ns1__GetSystemAlertsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetSystemAlertsResponse(soap, p), 0) || ::soap_put_ns1__GetSystemAlertsResponse(soap, p, "ns1:GetSystemAlertsResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetSystemAlertsResponse(struct soap *soap, const char *URL, struct ns1__GetSystemAlertsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetSystemAlertsResponse(soap, p), 0) || ::soap_put_ns1__GetSystemAlertsResponse(soap, p, "ns1:GetSystemAlertsResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__GetSystemAlertsResponse * SOAP_FMAC4 soap_get_ns1__GetSystemAlertsResponse(struct soap*, struct ns1__GetSystemAlertsResponse *, const char*, const char*);

inline int soap_read_ns1__GetSystemAlertsResponse(struct soap *soap, struct ns1__GetSystemAlertsResponse *p)
{
	if (p)
	{	::soap_default_ns1__GetSystemAlertsResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__GetSystemAlertsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetSystemAlertsResponse(struct soap *soap, const char *URL, struct ns1__GetSystemAlertsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__GetSystemAlertsResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GetSystemAlertsResponse(struct soap *soap, struct ns1__GetSystemAlertsResponse *p)
{
	if (::soap_read_ns1__GetSystemAlertsResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GetSystemAlertsByStartDate_DEFINED
#define SOAP_TYPE_ns1__GetSystemAlertsByStartDate_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__GetSystemAlertsByStartDate(struct soap*, struct ns1__GetSystemAlertsByStartDate *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__GetSystemAlertsByStartDate(struct soap*, const struct ns1__GetSystemAlertsByStartDate *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetSystemAlertsByStartDate(struct soap*, const char*, int, const struct ns1__GetSystemAlertsByStartDate *, const char*);
SOAP_FMAC3 struct ns1__GetSystemAlertsByStartDate * SOAP_FMAC4 soap_in_ns1__GetSystemAlertsByStartDate(struct soap*, const char*, struct ns1__GetSystemAlertsByStartDate *, const char*);
SOAP_FMAC1 struct ns1__GetSystemAlertsByStartDate * SOAP_FMAC2 soap_instantiate_ns1__GetSystemAlertsByStartDate(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__GetSystemAlertsByStartDate * soap_new_ns1__GetSystemAlertsByStartDate(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetSystemAlertsByStartDate(soap, n, NULL, NULL, NULL);
}

inline struct ns1__GetSystemAlertsByStartDate * soap_new_req_ns1__GetSystemAlertsByStartDate(
	struct soap *soap,
	const std::string& _in0,
	int _in1)
{
	struct ns1__GetSystemAlertsByStartDate *_p = ::soap_new_ns1__GetSystemAlertsByStartDate(soap);
	if (_p)
	{	::soap_default_ns1__GetSystemAlertsByStartDate(soap, _p);
		_p->_in0 = _in0;
		_p->_in1 = _in1;
	}
	return _p;
}

inline struct ns1__GetSystemAlertsByStartDate * soap_new_set_ns1__GetSystemAlertsByStartDate(
	struct soap *soap,
	const std::string& _in0,
	int _in1)
{
	struct ns1__GetSystemAlertsByStartDate *_p = ::soap_new_ns1__GetSystemAlertsByStartDate(soap);
	if (_p)
	{	::soap_default_ns1__GetSystemAlertsByStartDate(soap, _p);
		_p->_in0 = _in0;
		_p->_in1 = _in1;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__GetSystemAlertsByStartDate(struct soap*, const struct ns1__GetSystemAlertsByStartDate *, const char*, const char*);

inline int soap_write_ns1__GetSystemAlertsByStartDate(struct soap *soap, struct ns1__GetSystemAlertsByStartDate const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__GetSystemAlertsByStartDate(soap, p), 0) || ::soap_put_ns1__GetSystemAlertsByStartDate(soap, p, "ns1:GetSystemAlertsByStartDate", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetSystemAlertsByStartDate(struct soap *soap, const char *URL, struct ns1__GetSystemAlertsByStartDate const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetSystemAlertsByStartDate(soap, p), 0) || ::soap_put_ns1__GetSystemAlertsByStartDate(soap, p, "ns1:GetSystemAlertsByStartDate", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__GetSystemAlertsByStartDate(struct soap *soap, const char *URL, struct ns1__GetSystemAlertsByStartDate const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetSystemAlertsByStartDate(soap, p), 0) || ::soap_put_ns1__GetSystemAlertsByStartDate(soap, p, "ns1:GetSystemAlertsByStartDate", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetSystemAlertsByStartDate(struct soap *soap, const char *URL, struct ns1__GetSystemAlertsByStartDate const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetSystemAlertsByStartDate(soap, p), 0) || ::soap_put_ns1__GetSystemAlertsByStartDate(soap, p, "ns1:GetSystemAlertsByStartDate", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__GetSystemAlertsByStartDate * SOAP_FMAC4 soap_get_ns1__GetSystemAlertsByStartDate(struct soap*, struct ns1__GetSystemAlertsByStartDate *, const char*, const char*);

inline int soap_read_ns1__GetSystemAlertsByStartDate(struct soap *soap, struct ns1__GetSystemAlertsByStartDate *p)
{
	if (p)
	{	::soap_default_ns1__GetSystemAlertsByStartDate(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__GetSystemAlertsByStartDate(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetSystemAlertsByStartDate(struct soap *soap, const char *URL, struct ns1__GetSystemAlertsByStartDate *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__GetSystemAlertsByStartDate(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GetSystemAlertsByStartDate(struct soap *soap, struct ns1__GetSystemAlertsByStartDate *p)
{
	if (::soap_read_ns1__GetSystemAlertsByStartDate(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GetSystemAlertsByStartDateResponse_DEFINED
#define SOAP_TYPE_ns1__GetSystemAlertsByStartDateResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__GetSystemAlertsByStartDateResponse(struct soap*, struct ns1__GetSystemAlertsByStartDateResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__GetSystemAlertsByStartDateResponse(struct soap*, const struct ns1__GetSystemAlertsByStartDateResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetSystemAlertsByStartDateResponse(struct soap*, const char*, int, const struct ns1__GetSystemAlertsByStartDateResponse *, const char*);
SOAP_FMAC3 struct ns1__GetSystemAlertsByStartDateResponse * SOAP_FMAC4 soap_in_ns1__GetSystemAlertsByStartDateResponse(struct soap*, const char*, struct ns1__GetSystemAlertsByStartDateResponse *, const char*);
SOAP_FMAC1 struct ns1__GetSystemAlertsByStartDateResponse * SOAP_FMAC2 soap_instantiate_ns1__GetSystemAlertsByStartDateResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__GetSystemAlertsByStartDateResponse * soap_new_ns1__GetSystemAlertsByStartDateResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetSystemAlertsByStartDateResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__GetSystemAlertsByStartDateResponse * soap_new_req_ns1__GetSystemAlertsByStartDateResponse(
	struct soap *soap,
	const std::string& _GetSystemAlertsByStartDateReturn)
{
	struct ns1__GetSystemAlertsByStartDateResponse *_p = ::soap_new_ns1__GetSystemAlertsByStartDateResponse(soap);
	if (_p)
	{	::soap_default_ns1__GetSystemAlertsByStartDateResponse(soap, _p);
		_p->_GetSystemAlertsByStartDateReturn = _GetSystemAlertsByStartDateReturn;
	}
	return _p;
}

inline struct ns1__GetSystemAlertsByStartDateResponse * soap_new_set_ns1__GetSystemAlertsByStartDateResponse(
	struct soap *soap,
	const std::string& _GetSystemAlertsByStartDateReturn)
{
	struct ns1__GetSystemAlertsByStartDateResponse *_p = ::soap_new_ns1__GetSystemAlertsByStartDateResponse(soap);
	if (_p)
	{	::soap_default_ns1__GetSystemAlertsByStartDateResponse(soap, _p);
		_p->_GetSystemAlertsByStartDateReturn = _GetSystemAlertsByStartDateReturn;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__GetSystemAlertsByStartDateResponse(struct soap*, const struct ns1__GetSystemAlertsByStartDateResponse *, const char*, const char*);

inline int soap_write_ns1__GetSystemAlertsByStartDateResponse(struct soap *soap, struct ns1__GetSystemAlertsByStartDateResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__GetSystemAlertsByStartDateResponse(soap, p), 0) || ::soap_put_ns1__GetSystemAlertsByStartDateResponse(soap, p, "ns1:GetSystemAlertsByStartDateResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetSystemAlertsByStartDateResponse(struct soap *soap, const char *URL, struct ns1__GetSystemAlertsByStartDateResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetSystemAlertsByStartDateResponse(soap, p), 0) || ::soap_put_ns1__GetSystemAlertsByStartDateResponse(soap, p, "ns1:GetSystemAlertsByStartDateResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__GetSystemAlertsByStartDateResponse(struct soap *soap, const char *URL, struct ns1__GetSystemAlertsByStartDateResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetSystemAlertsByStartDateResponse(soap, p), 0) || ::soap_put_ns1__GetSystemAlertsByStartDateResponse(soap, p, "ns1:GetSystemAlertsByStartDateResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetSystemAlertsByStartDateResponse(struct soap *soap, const char *URL, struct ns1__GetSystemAlertsByStartDateResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetSystemAlertsByStartDateResponse(soap, p), 0) || ::soap_put_ns1__GetSystemAlertsByStartDateResponse(soap, p, "ns1:GetSystemAlertsByStartDateResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__GetSystemAlertsByStartDateResponse * SOAP_FMAC4 soap_get_ns1__GetSystemAlertsByStartDateResponse(struct soap*, struct ns1__GetSystemAlertsByStartDateResponse *, const char*, const char*);

inline int soap_read_ns1__GetSystemAlertsByStartDateResponse(struct soap *soap, struct ns1__GetSystemAlertsByStartDateResponse *p)
{
	if (p)
	{	::soap_default_ns1__GetSystemAlertsByStartDateResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__GetSystemAlertsByStartDateResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetSystemAlertsByStartDateResponse(struct soap *soap, const char *URL, struct ns1__GetSystemAlertsByStartDateResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__GetSystemAlertsByStartDateResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GetSystemAlertsByStartDateResponse(struct soap *soap, struct ns1__GetSystemAlertsByStartDateResponse *p)
{
	if (::soap_read_ns1__GetSystemAlertsByStartDateResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GetSystemAlertsFilter_DEFINED
#define SOAP_TYPE_ns1__GetSystemAlertsFilter_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__GetSystemAlertsFilter(struct soap*, struct ns1__GetSystemAlertsFilter *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__GetSystemAlertsFilter(struct soap*, const struct ns1__GetSystemAlertsFilter *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetSystemAlertsFilter(struct soap*, const char*, int, const struct ns1__GetSystemAlertsFilter *, const char*);
SOAP_FMAC3 struct ns1__GetSystemAlertsFilter * SOAP_FMAC4 soap_in_ns1__GetSystemAlertsFilter(struct soap*, const char*, struct ns1__GetSystemAlertsFilter *, const char*);
SOAP_FMAC1 struct ns1__GetSystemAlertsFilter * SOAP_FMAC2 soap_instantiate_ns1__GetSystemAlertsFilter(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__GetSystemAlertsFilter * soap_new_ns1__GetSystemAlertsFilter(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetSystemAlertsFilter(soap, n, NULL, NULL, NULL);
}

inline struct ns1__GetSystemAlertsFilter * soap_new_req_ns1__GetSystemAlertsFilter(
	struct soap *soap,
	const std::string& _in0,
	const std::string& _in1,
	int _in2,
	int _in3)
{
	struct ns1__GetSystemAlertsFilter *_p = ::soap_new_ns1__GetSystemAlertsFilter(soap);
	if (_p)
	{	::soap_default_ns1__GetSystemAlertsFilter(soap, _p);
		_p->_in0 = _in0;
		_p->_in1 = _in1;
		_p->_in2 = _in2;
		_p->_in3 = _in3;
	}
	return _p;
}

inline struct ns1__GetSystemAlertsFilter * soap_new_set_ns1__GetSystemAlertsFilter(
	struct soap *soap,
	const std::string& _in0,
	const std::string& _in1,
	int _in2,
	int _in3)
{
	struct ns1__GetSystemAlertsFilter *_p = ::soap_new_ns1__GetSystemAlertsFilter(soap);
	if (_p)
	{	::soap_default_ns1__GetSystemAlertsFilter(soap, _p);
		_p->_in0 = _in0;
		_p->_in1 = _in1;
		_p->_in2 = _in2;
		_p->_in3 = _in3;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__GetSystemAlertsFilter(struct soap*, const struct ns1__GetSystemAlertsFilter *, const char*, const char*);

inline int soap_write_ns1__GetSystemAlertsFilter(struct soap *soap, struct ns1__GetSystemAlertsFilter const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__GetSystemAlertsFilter(soap, p), 0) || ::soap_put_ns1__GetSystemAlertsFilter(soap, p, "ns1:GetSystemAlertsFilter", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetSystemAlertsFilter(struct soap *soap, const char *URL, struct ns1__GetSystemAlertsFilter const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetSystemAlertsFilter(soap, p), 0) || ::soap_put_ns1__GetSystemAlertsFilter(soap, p, "ns1:GetSystemAlertsFilter", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__GetSystemAlertsFilter(struct soap *soap, const char *URL, struct ns1__GetSystemAlertsFilter const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetSystemAlertsFilter(soap, p), 0) || ::soap_put_ns1__GetSystemAlertsFilter(soap, p, "ns1:GetSystemAlertsFilter", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetSystemAlertsFilter(struct soap *soap, const char *URL, struct ns1__GetSystemAlertsFilter const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetSystemAlertsFilter(soap, p), 0) || ::soap_put_ns1__GetSystemAlertsFilter(soap, p, "ns1:GetSystemAlertsFilter", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__GetSystemAlertsFilter * SOAP_FMAC4 soap_get_ns1__GetSystemAlertsFilter(struct soap*, struct ns1__GetSystemAlertsFilter *, const char*, const char*);

inline int soap_read_ns1__GetSystemAlertsFilter(struct soap *soap, struct ns1__GetSystemAlertsFilter *p)
{
	if (p)
	{	::soap_default_ns1__GetSystemAlertsFilter(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__GetSystemAlertsFilter(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetSystemAlertsFilter(struct soap *soap, const char *URL, struct ns1__GetSystemAlertsFilter *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__GetSystemAlertsFilter(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GetSystemAlertsFilter(struct soap *soap, struct ns1__GetSystemAlertsFilter *p)
{
	if (::soap_read_ns1__GetSystemAlertsFilter(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GetSystemAlertsFilterResponse_DEFINED
#define SOAP_TYPE_ns1__GetSystemAlertsFilterResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__GetSystemAlertsFilterResponse(struct soap*, struct ns1__GetSystemAlertsFilterResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__GetSystemAlertsFilterResponse(struct soap*, const struct ns1__GetSystemAlertsFilterResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetSystemAlertsFilterResponse(struct soap*, const char*, int, const struct ns1__GetSystemAlertsFilterResponse *, const char*);
SOAP_FMAC3 struct ns1__GetSystemAlertsFilterResponse * SOAP_FMAC4 soap_in_ns1__GetSystemAlertsFilterResponse(struct soap*, const char*, struct ns1__GetSystemAlertsFilterResponse *, const char*);
SOAP_FMAC1 struct ns1__GetSystemAlertsFilterResponse * SOAP_FMAC2 soap_instantiate_ns1__GetSystemAlertsFilterResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__GetSystemAlertsFilterResponse * soap_new_ns1__GetSystemAlertsFilterResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetSystemAlertsFilterResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__GetSystemAlertsFilterResponse * soap_new_req_ns1__GetSystemAlertsFilterResponse(
	struct soap *soap,
	const std::string& _GetSystemAlertsFilterReturn)
{
	struct ns1__GetSystemAlertsFilterResponse *_p = ::soap_new_ns1__GetSystemAlertsFilterResponse(soap);
	if (_p)
	{	::soap_default_ns1__GetSystemAlertsFilterResponse(soap, _p);
		_p->_GetSystemAlertsFilterReturn = _GetSystemAlertsFilterReturn;
	}
	return _p;
}

inline struct ns1__GetSystemAlertsFilterResponse * soap_new_set_ns1__GetSystemAlertsFilterResponse(
	struct soap *soap,
	const std::string& _GetSystemAlertsFilterReturn)
{
	struct ns1__GetSystemAlertsFilterResponse *_p = ::soap_new_ns1__GetSystemAlertsFilterResponse(soap);
	if (_p)
	{	::soap_default_ns1__GetSystemAlertsFilterResponse(soap, _p);
		_p->_GetSystemAlertsFilterReturn = _GetSystemAlertsFilterReturn;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__GetSystemAlertsFilterResponse(struct soap*, const struct ns1__GetSystemAlertsFilterResponse *, const char*, const char*);

inline int soap_write_ns1__GetSystemAlertsFilterResponse(struct soap *soap, struct ns1__GetSystemAlertsFilterResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__GetSystemAlertsFilterResponse(soap, p), 0) || ::soap_put_ns1__GetSystemAlertsFilterResponse(soap, p, "ns1:GetSystemAlertsFilterResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetSystemAlertsFilterResponse(struct soap *soap, const char *URL, struct ns1__GetSystemAlertsFilterResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetSystemAlertsFilterResponse(soap, p), 0) || ::soap_put_ns1__GetSystemAlertsFilterResponse(soap, p, "ns1:GetSystemAlertsFilterResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__GetSystemAlertsFilterResponse(struct soap *soap, const char *URL, struct ns1__GetSystemAlertsFilterResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetSystemAlertsFilterResponse(soap, p), 0) || ::soap_put_ns1__GetSystemAlertsFilterResponse(soap, p, "ns1:GetSystemAlertsFilterResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetSystemAlertsFilterResponse(struct soap *soap, const char *URL, struct ns1__GetSystemAlertsFilterResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetSystemAlertsFilterResponse(soap, p), 0) || ::soap_put_ns1__GetSystemAlertsFilterResponse(soap, p, "ns1:GetSystemAlertsFilterResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__GetSystemAlertsFilterResponse * SOAP_FMAC4 soap_get_ns1__GetSystemAlertsFilterResponse(struct soap*, struct ns1__GetSystemAlertsFilterResponse *, const char*, const char*);

inline int soap_read_ns1__GetSystemAlertsFilterResponse(struct soap *soap, struct ns1__GetSystemAlertsFilterResponse *p)
{
	if (p)
	{	::soap_default_ns1__GetSystemAlertsFilterResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__GetSystemAlertsFilterResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetSystemAlertsFilterResponse(struct soap *soap, const char *URL, struct ns1__GetSystemAlertsFilterResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__GetSystemAlertsFilterResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GetSystemAlertsFilterResponse(struct soap *soap, struct ns1__GetSystemAlertsFilterResponse *p)
{
	if (::soap_read_ns1__GetSystemAlertsFilterResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GetApplicationAlertsFilter_DEFINED
#define SOAP_TYPE_ns1__GetApplicationAlertsFilter_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__GetApplicationAlertsFilter(struct soap*, struct ns1__GetApplicationAlertsFilter *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__GetApplicationAlertsFilter(struct soap*, const struct ns1__GetApplicationAlertsFilter *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetApplicationAlertsFilter(struct soap*, const char*, int, const struct ns1__GetApplicationAlertsFilter *, const char*);
SOAP_FMAC3 struct ns1__GetApplicationAlertsFilter * SOAP_FMAC4 soap_in_ns1__GetApplicationAlertsFilter(struct soap*, const char*, struct ns1__GetApplicationAlertsFilter *, const char*);
SOAP_FMAC1 struct ns1__GetApplicationAlertsFilter * SOAP_FMAC2 soap_instantiate_ns1__GetApplicationAlertsFilter(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__GetApplicationAlertsFilter * soap_new_ns1__GetApplicationAlertsFilter(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetApplicationAlertsFilter(soap, n, NULL, NULL, NULL);
}

inline struct ns1__GetApplicationAlertsFilter * soap_new_req_ns1__GetApplicationAlertsFilter(
	struct soap *soap,
	const std::string& _in0,
	const std::string& _in1,
	const std::string& _in2,
	int _in3,
	int _in4)
{
	struct ns1__GetApplicationAlertsFilter *_p = ::soap_new_ns1__GetApplicationAlertsFilter(soap);
	if (_p)
	{	::soap_default_ns1__GetApplicationAlertsFilter(soap, _p);
		_p->_in0 = _in0;
		_p->_in1 = _in1;
		_p->_in2 = _in2;
		_p->_in3 = _in3;
		_p->_in4 = _in4;
	}
	return _p;
}

inline struct ns1__GetApplicationAlertsFilter * soap_new_set_ns1__GetApplicationAlertsFilter(
	struct soap *soap,
	const std::string& _in0,
	const std::string& _in1,
	const std::string& _in2,
	int _in3,
	int _in4)
{
	struct ns1__GetApplicationAlertsFilter *_p = ::soap_new_ns1__GetApplicationAlertsFilter(soap);
	if (_p)
	{	::soap_default_ns1__GetApplicationAlertsFilter(soap, _p);
		_p->_in0 = _in0;
		_p->_in1 = _in1;
		_p->_in2 = _in2;
		_p->_in3 = _in3;
		_p->_in4 = _in4;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__GetApplicationAlertsFilter(struct soap*, const struct ns1__GetApplicationAlertsFilter *, const char*, const char*);

inline int soap_write_ns1__GetApplicationAlertsFilter(struct soap *soap, struct ns1__GetApplicationAlertsFilter const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__GetApplicationAlertsFilter(soap, p), 0) || ::soap_put_ns1__GetApplicationAlertsFilter(soap, p, "ns1:GetApplicationAlertsFilter", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetApplicationAlertsFilter(struct soap *soap, const char *URL, struct ns1__GetApplicationAlertsFilter const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetApplicationAlertsFilter(soap, p), 0) || ::soap_put_ns1__GetApplicationAlertsFilter(soap, p, "ns1:GetApplicationAlertsFilter", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__GetApplicationAlertsFilter(struct soap *soap, const char *URL, struct ns1__GetApplicationAlertsFilter const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetApplicationAlertsFilter(soap, p), 0) || ::soap_put_ns1__GetApplicationAlertsFilter(soap, p, "ns1:GetApplicationAlertsFilter", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetApplicationAlertsFilter(struct soap *soap, const char *URL, struct ns1__GetApplicationAlertsFilter const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetApplicationAlertsFilter(soap, p), 0) || ::soap_put_ns1__GetApplicationAlertsFilter(soap, p, "ns1:GetApplicationAlertsFilter", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__GetApplicationAlertsFilter * SOAP_FMAC4 soap_get_ns1__GetApplicationAlertsFilter(struct soap*, struct ns1__GetApplicationAlertsFilter *, const char*, const char*);

inline int soap_read_ns1__GetApplicationAlertsFilter(struct soap *soap, struct ns1__GetApplicationAlertsFilter *p)
{
	if (p)
	{	::soap_default_ns1__GetApplicationAlertsFilter(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__GetApplicationAlertsFilter(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetApplicationAlertsFilter(struct soap *soap, const char *URL, struct ns1__GetApplicationAlertsFilter *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__GetApplicationAlertsFilter(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GetApplicationAlertsFilter(struct soap *soap, struct ns1__GetApplicationAlertsFilter *p)
{
	if (::soap_read_ns1__GetApplicationAlertsFilter(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GetApplicationAlertsFilterResponse_DEFINED
#define SOAP_TYPE_ns1__GetApplicationAlertsFilterResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__GetApplicationAlertsFilterResponse(struct soap*, struct ns1__GetApplicationAlertsFilterResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__GetApplicationAlertsFilterResponse(struct soap*, const struct ns1__GetApplicationAlertsFilterResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetApplicationAlertsFilterResponse(struct soap*, const char*, int, const struct ns1__GetApplicationAlertsFilterResponse *, const char*);
SOAP_FMAC3 struct ns1__GetApplicationAlertsFilterResponse * SOAP_FMAC4 soap_in_ns1__GetApplicationAlertsFilterResponse(struct soap*, const char*, struct ns1__GetApplicationAlertsFilterResponse *, const char*);
SOAP_FMAC1 struct ns1__GetApplicationAlertsFilterResponse * SOAP_FMAC2 soap_instantiate_ns1__GetApplicationAlertsFilterResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__GetApplicationAlertsFilterResponse * soap_new_ns1__GetApplicationAlertsFilterResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetApplicationAlertsFilterResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__GetApplicationAlertsFilterResponse * soap_new_req_ns1__GetApplicationAlertsFilterResponse(
	struct soap *soap,
	const std::string& _GetApplicationAlertsFilterReturn)
{
	struct ns1__GetApplicationAlertsFilterResponse *_p = ::soap_new_ns1__GetApplicationAlertsFilterResponse(soap);
	if (_p)
	{	::soap_default_ns1__GetApplicationAlertsFilterResponse(soap, _p);
		_p->_GetApplicationAlertsFilterReturn = _GetApplicationAlertsFilterReturn;
	}
	return _p;
}

inline struct ns1__GetApplicationAlertsFilterResponse * soap_new_set_ns1__GetApplicationAlertsFilterResponse(
	struct soap *soap,
	const std::string& _GetApplicationAlertsFilterReturn)
{
	struct ns1__GetApplicationAlertsFilterResponse *_p = ::soap_new_ns1__GetApplicationAlertsFilterResponse(soap);
	if (_p)
	{	::soap_default_ns1__GetApplicationAlertsFilterResponse(soap, _p);
		_p->_GetApplicationAlertsFilterReturn = _GetApplicationAlertsFilterReturn;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__GetApplicationAlertsFilterResponse(struct soap*, const struct ns1__GetApplicationAlertsFilterResponse *, const char*, const char*);

inline int soap_write_ns1__GetApplicationAlertsFilterResponse(struct soap *soap, struct ns1__GetApplicationAlertsFilterResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__GetApplicationAlertsFilterResponse(soap, p), 0) || ::soap_put_ns1__GetApplicationAlertsFilterResponse(soap, p, "ns1:GetApplicationAlertsFilterResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetApplicationAlertsFilterResponse(struct soap *soap, const char *URL, struct ns1__GetApplicationAlertsFilterResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetApplicationAlertsFilterResponse(soap, p), 0) || ::soap_put_ns1__GetApplicationAlertsFilterResponse(soap, p, "ns1:GetApplicationAlertsFilterResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__GetApplicationAlertsFilterResponse(struct soap *soap, const char *URL, struct ns1__GetApplicationAlertsFilterResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetApplicationAlertsFilterResponse(soap, p), 0) || ::soap_put_ns1__GetApplicationAlertsFilterResponse(soap, p, "ns1:GetApplicationAlertsFilterResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetApplicationAlertsFilterResponse(struct soap *soap, const char *URL, struct ns1__GetApplicationAlertsFilterResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetApplicationAlertsFilterResponse(soap, p), 0) || ::soap_put_ns1__GetApplicationAlertsFilterResponse(soap, p, "ns1:GetApplicationAlertsFilterResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__GetApplicationAlertsFilterResponse * SOAP_FMAC4 soap_get_ns1__GetApplicationAlertsFilterResponse(struct soap*, struct ns1__GetApplicationAlertsFilterResponse *, const char*, const char*);

inline int soap_read_ns1__GetApplicationAlertsFilterResponse(struct soap *soap, struct ns1__GetApplicationAlertsFilterResponse *p)
{
	if (p)
	{	::soap_default_ns1__GetApplicationAlertsFilterResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__GetApplicationAlertsFilterResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetApplicationAlertsFilterResponse(struct soap *soap, const char *URL, struct ns1__GetApplicationAlertsFilterResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__GetApplicationAlertsFilterResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GetApplicationAlertsFilterResponse(struct soap *soap, struct ns1__GetApplicationAlertsFilterResponse *p)
{
	if (::soap_read_ns1__GetApplicationAlertsFilterResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GetApplicationAlerts_DEFINED
#define SOAP_TYPE_ns1__GetApplicationAlerts_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__GetApplicationAlerts(struct soap*, struct ns1__GetApplicationAlerts *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__GetApplicationAlerts(struct soap*, const struct ns1__GetApplicationAlerts *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetApplicationAlerts(struct soap*, const char*, int, const struct ns1__GetApplicationAlerts *, const char*);
SOAP_FMAC3 struct ns1__GetApplicationAlerts * SOAP_FMAC4 soap_in_ns1__GetApplicationAlerts(struct soap*, const char*, struct ns1__GetApplicationAlerts *, const char*);
SOAP_FMAC1 struct ns1__GetApplicationAlerts * SOAP_FMAC2 soap_instantiate_ns1__GetApplicationAlerts(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__GetApplicationAlerts * soap_new_ns1__GetApplicationAlerts(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetApplicationAlerts(soap, n, NULL, NULL, NULL);
}

inline struct ns1__GetApplicationAlerts * soap_new_req_ns1__GetApplicationAlerts(
	struct soap *soap,
	const std::string& _in0,
	int _in1)
{
	struct ns1__GetApplicationAlerts *_p = ::soap_new_ns1__GetApplicationAlerts(soap);
	if (_p)
	{	::soap_default_ns1__GetApplicationAlerts(soap, _p);
		_p->_in0 = _in0;
		_p->_in1 = _in1;
	}
	return _p;
}

inline struct ns1__GetApplicationAlerts * soap_new_set_ns1__GetApplicationAlerts(
	struct soap *soap,
	const std::string& _in0,
	int _in1)
{
	struct ns1__GetApplicationAlerts *_p = ::soap_new_ns1__GetApplicationAlerts(soap);
	if (_p)
	{	::soap_default_ns1__GetApplicationAlerts(soap, _p);
		_p->_in0 = _in0;
		_p->_in1 = _in1;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__GetApplicationAlerts(struct soap*, const struct ns1__GetApplicationAlerts *, const char*, const char*);

inline int soap_write_ns1__GetApplicationAlerts(struct soap *soap, struct ns1__GetApplicationAlerts const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__GetApplicationAlerts(soap, p), 0) || ::soap_put_ns1__GetApplicationAlerts(soap, p, "ns1:GetApplicationAlerts", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetApplicationAlerts(struct soap *soap, const char *URL, struct ns1__GetApplicationAlerts const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetApplicationAlerts(soap, p), 0) || ::soap_put_ns1__GetApplicationAlerts(soap, p, "ns1:GetApplicationAlerts", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__GetApplicationAlerts(struct soap *soap, const char *URL, struct ns1__GetApplicationAlerts const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetApplicationAlerts(soap, p), 0) || ::soap_put_ns1__GetApplicationAlerts(soap, p, "ns1:GetApplicationAlerts", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetApplicationAlerts(struct soap *soap, const char *URL, struct ns1__GetApplicationAlerts const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetApplicationAlerts(soap, p), 0) || ::soap_put_ns1__GetApplicationAlerts(soap, p, "ns1:GetApplicationAlerts", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__GetApplicationAlerts * SOAP_FMAC4 soap_get_ns1__GetApplicationAlerts(struct soap*, struct ns1__GetApplicationAlerts *, const char*, const char*);

inline int soap_read_ns1__GetApplicationAlerts(struct soap *soap, struct ns1__GetApplicationAlerts *p)
{
	if (p)
	{	::soap_default_ns1__GetApplicationAlerts(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__GetApplicationAlerts(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetApplicationAlerts(struct soap *soap, const char *URL, struct ns1__GetApplicationAlerts *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__GetApplicationAlerts(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GetApplicationAlerts(struct soap *soap, struct ns1__GetApplicationAlerts *p)
{
	if (::soap_read_ns1__GetApplicationAlerts(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GetApplicationAlertsResponse_DEFINED
#define SOAP_TYPE_ns1__GetApplicationAlertsResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__GetApplicationAlertsResponse(struct soap*, struct ns1__GetApplicationAlertsResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__GetApplicationAlertsResponse(struct soap*, const struct ns1__GetApplicationAlertsResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetApplicationAlertsResponse(struct soap*, const char*, int, const struct ns1__GetApplicationAlertsResponse *, const char*);
SOAP_FMAC3 struct ns1__GetApplicationAlertsResponse * SOAP_FMAC4 soap_in_ns1__GetApplicationAlertsResponse(struct soap*, const char*, struct ns1__GetApplicationAlertsResponse *, const char*);
SOAP_FMAC1 struct ns1__GetApplicationAlertsResponse * SOAP_FMAC2 soap_instantiate_ns1__GetApplicationAlertsResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__GetApplicationAlertsResponse * soap_new_ns1__GetApplicationAlertsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetApplicationAlertsResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__GetApplicationAlertsResponse * soap_new_req_ns1__GetApplicationAlertsResponse(
	struct soap *soap,
	const std::string& _GetApplicationAlertsReturn)
{
	struct ns1__GetApplicationAlertsResponse *_p = ::soap_new_ns1__GetApplicationAlertsResponse(soap);
	if (_p)
	{	::soap_default_ns1__GetApplicationAlertsResponse(soap, _p);
		_p->_GetApplicationAlertsReturn = _GetApplicationAlertsReturn;
	}
	return _p;
}

inline struct ns1__GetApplicationAlertsResponse * soap_new_set_ns1__GetApplicationAlertsResponse(
	struct soap *soap,
	const std::string& _GetApplicationAlertsReturn)
{
	struct ns1__GetApplicationAlertsResponse *_p = ::soap_new_ns1__GetApplicationAlertsResponse(soap);
	if (_p)
	{	::soap_default_ns1__GetApplicationAlertsResponse(soap, _p);
		_p->_GetApplicationAlertsReturn = _GetApplicationAlertsReturn;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__GetApplicationAlertsResponse(struct soap*, const struct ns1__GetApplicationAlertsResponse *, const char*, const char*);

inline int soap_write_ns1__GetApplicationAlertsResponse(struct soap *soap, struct ns1__GetApplicationAlertsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__GetApplicationAlertsResponse(soap, p), 0) || ::soap_put_ns1__GetApplicationAlertsResponse(soap, p, "ns1:GetApplicationAlertsResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetApplicationAlertsResponse(struct soap *soap, const char *URL, struct ns1__GetApplicationAlertsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetApplicationAlertsResponse(soap, p), 0) || ::soap_put_ns1__GetApplicationAlertsResponse(soap, p, "ns1:GetApplicationAlertsResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__GetApplicationAlertsResponse(struct soap *soap, const char *URL, struct ns1__GetApplicationAlertsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetApplicationAlertsResponse(soap, p), 0) || ::soap_put_ns1__GetApplicationAlertsResponse(soap, p, "ns1:GetApplicationAlertsResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetApplicationAlertsResponse(struct soap *soap, const char *URL, struct ns1__GetApplicationAlertsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetApplicationAlertsResponse(soap, p), 0) || ::soap_put_ns1__GetApplicationAlertsResponse(soap, p, "ns1:GetApplicationAlertsResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__GetApplicationAlertsResponse * SOAP_FMAC4 soap_get_ns1__GetApplicationAlertsResponse(struct soap*, struct ns1__GetApplicationAlertsResponse *, const char*, const char*);

inline int soap_read_ns1__GetApplicationAlertsResponse(struct soap *soap, struct ns1__GetApplicationAlertsResponse *p)
{
	if (p)
	{	::soap_default_ns1__GetApplicationAlertsResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__GetApplicationAlertsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetApplicationAlertsResponse(struct soap *soap, const char *URL, struct ns1__GetApplicationAlertsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__GetApplicationAlertsResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GetApplicationAlertsResponse(struct soap *soap, struct ns1__GetApplicationAlertsResponse *p)
{
	if (::soap_read_ns1__GetApplicationAlertsResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GetApplicationAlertsByStartDate_DEFINED
#define SOAP_TYPE_ns1__GetApplicationAlertsByStartDate_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__GetApplicationAlertsByStartDate(struct soap*, struct ns1__GetApplicationAlertsByStartDate *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__GetApplicationAlertsByStartDate(struct soap*, const struct ns1__GetApplicationAlertsByStartDate *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetApplicationAlertsByStartDate(struct soap*, const char*, int, const struct ns1__GetApplicationAlertsByStartDate *, const char*);
SOAP_FMAC3 struct ns1__GetApplicationAlertsByStartDate * SOAP_FMAC4 soap_in_ns1__GetApplicationAlertsByStartDate(struct soap*, const char*, struct ns1__GetApplicationAlertsByStartDate *, const char*);
SOAP_FMAC1 struct ns1__GetApplicationAlertsByStartDate * SOAP_FMAC2 soap_instantiate_ns1__GetApplicationAlertsByStartDate(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__GetApplicationAlertsByStartDate * soap_new_ns1__GetApplicationAlertsByStartDate(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetApplicationAlertsByStartDate(soap, n, NULL, NULL, NULL);
}

inline struct ns1__GetApplicationAlertsByStartDate * soap_new_req_ns1__GetApplicationAlertsByStartDate(
	struct soap *soap,
	const std::string& _in0,
	const std::string& _in1,
	int _in2)
{
	struct ns1__GetApplicationAlertsByStartDate *_p = ::soap_new_ns1__GetApplicationAlertsByStartDate(soap);
	if (_p)
	{	::soap_default_ns1__GetApplicationAlertsByStartDate(soap, _p);
		_p->_in0 = _in0;
		_p->_in1 = _in1;
		_p->_in2 = _in2;
	}
	return _p;
}

inline struct ns1__GetApplicationAlertsByStartDate * soap_new_set_ns1__GetApplicationAlertsByStartDate(
	struct soap *soap,
	const std::string& _in0,
	const std::string& _in1,
	int _in2)
{
	struct ns1__GetApplicationAlertsByStartDate *_p = ::soap_new_ns1__GetApplicationAlertsByStartDate(soap);
	if (_p)
	{	::soap_default_ns1__GetApplicationAlertsByStartDate(soap, _p);
		_p->_in0 = _in0;
		_p->_in1 = _in1;
		_p->_in2 = _in2;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__GetApplicationAlertsByStartDate(struct soap*, const struct ns1__GetApplicationAlertsByStartDate *, const char*, const char*);

inline int soap_write_ns1__GetApplicationAlertsByStartDate(struct soap *soap, struct ns1__GetApplicationAlertsByStartDate const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__GetApplicationAlertsByStartDate(soap, p), 0) || ::soap_put_ns1__GetApplicationAlertsByStartDate(soap, p, "ns1:GetApplicationAlertsByStartDate", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetApplicationAlertsByStartDate(struct soap *soap, const char *URL, struct ns1__GetApplicationAlertsByStartDate const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetApplicationAlertsByStartDate(soap, p), 0) || ::soap_put_ns1__GetApplicationAlertsByStartDate(soap, p, "ns1:GetApplicationAlertsByStartDate", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__GetApplicationAlertsByStartDate(struct soap *soap, const char *URL, struct ns1__GetApplicationAlertsByStartDate const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetApplicationAlertsByStartDate(soap, p), 0) || ::soap_put_ns1__GetApplicationAlertsByStartDate(soap, p, "ns1:GetApplicationAlertsByStartDate", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetApplicationAlertsByStartDate(struct soap *soap, const char *URL, struct ns1__GetApplicationAlertsByStartDate const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetApplicationAlertsByStartDate(soap, p), 0) || ::soap_put_ns1__GetApplicationAlertsByStartDate(soap, p, "ns1:GetApplicationAlertsByStartDate", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__GetApplicationAlertsByStartDate * SOAP_FMAC4 soap_get_ns1__GetApplicationAlertsByStartDate(struct soap*, struct ns1__GetApplicationAlertsByStartDate *, const char*, const char*);

inline int soap_read_ns1__GetApplicationAlertsByStartDate(struct soap *soap, struct ns1__GetApplicationAlertsByStartDate *p)
{
	if (p)
	{	::soap_default_ns1__GetApplicationAlertsByStartDate(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__GetApplicationAlertsByStartDate(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetApplicationAlertsByStartDate(struct soap *soap, const char *URL, struct ns1__GetApplicationAlertsByStartDate *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__GetApplicationAlertsByStartDate(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GetApplicationAlertsByStartDate(struct soap *soap, struct ns1__GetApplicationAlertsByStartDate *p)
{
	if (::soap_read_ns1__GetApplicationAlertsByStartDate(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GetApplicationAlertsByStartDateResponse_DEFINED
#define SOAP_TYPE_ns1__GetApplicationAlertsByStartDateResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__GetApplicationAlertsByStartDateResponse(struct soap*, struct ns1__GetApplicationAlertsByStartDateResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__GetApplicationAlertsByStartDateResponse(struct soap*, const struct ns1__GetApplicationAlertsByStartDateResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetApplicationAlertsByStartDateResponse(struct soap*, const char*, int, const struct ns1__GetApplicationAlertsByStartDateResponse *, const char*);
SOAP_FMAC3 struct ns1__GetApplicationAlertsByStartDateResponse * SOAP_FMAC4 soap_in_ns1__GetApplicationAlertsByStartDateResponse(struct soap*, const char*, struct ns1__GetApplicationAlertsByStartDateResponse *, const char*);
SOAP_FMAC1 struct ns1__GetApplicationAlertsByStartDateResponse * SOAP_FMAC2 soap_instantiate_ns1__GetApplicationAlertsByStartDateResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__GetApplicationAlertsByStartDateResponse * soap_new_ns1__GetApplicationAlertsByStartDateResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetApplicationAlertsByStartDateResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__GetApplicationAlertsByStartDateResponse * soap_new_req_ns1__GetApplicationAlertsByStartDateResponse(
	struct soap *soap,
	const std::string& _GetApplicationAlertsByStartDateReturn)
{
	struct ns1__GetApplicationAlertsByStartDateResponse *_p = ::soap_new_ns1__GetApplicationAlertsByStartDateResponse(soap);
	if (_p)
	{	::soap_default_ns1__GetApplicationAlertsByStartDateResponse(soap, _p);
		_p->_GetApplicationAlertsByStartDateReturn = _GetApplicationAlertsByStartDateReturn;
	}
	return _p;
}

inline struct ns1__GetApplicationAlertsByStartDateResponse * soap_new_set_ns1__GetApplicationAlertsByStartDateResponse(
	struct soap *soap,
	const std::string& _GetApplicationAlertsByStartDateReturn)
{
	struct ns1__GetApplicationAlertsByStartDateResponse *_p = ::soap_new_ns1__GetApplicationAlertsByStartDateResponse(soap);
	if (_p)
	{	::soap_default_ns1__GetApplicationAlertsByStartDateResponse(soap, _p);
		_p->_GetApplicationAlertsByStartDateReturn = _GetApplicationAlertsByStartDateReturn;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__GetApplicationAlertsByStartDateResponse(struct soap*, const struct ns1__GetApplicationAlertsByStartDateResponse *, const char*, const char*);

inline int soap_write_ns1__GetApplicationAlertsByStartDateResponse(struct soap *soap, struct ns1__GetApplicationAlertsByStartDateResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__GetApplicationAlertsByStartDateResponse(soap, p), 0) || ::soap_put_ns1__GetApplicationAlertsByStartDateResponse(soap, p, "ns1:GetApplicationAlertsByStartDateResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetApplicationAlertsByStartDateResponse(struct soap *soap, const char *URL, struct ns1__GetApplicationAlertsByStartDateResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetApplicationAlertsByStartDateResponse(soap, p), 0) || ::soap_put_ns1__GetApplicationAlertsByStartDateResponse(soap, p, "ns1:GetApplicationAlertsByStartDateResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__GetApplicationAlertsByStartDateResponse(struct soap *soap, const char *URL, struct ns1__GetApplicationAlertsByStartDateResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetApplicationAlertsByStartDateResponse(soap, p), 0) || ::soap_put_ns1__GetApplicationAlertsByStartDateResponse(soap, p, "ns1:GetApplicationAlertsByStartDateResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetApplicationAlertsByStartDateResponse(struct soap *soap, const char *URL, struct ns1__GetApplicationAlertsByStartDateResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetApplicationAlertsByStartDateResponse(soap, p), 0) || ::soap_put_ns1__GetApplicationAlertsByStartDateResponse(soap, p, "ns1:GetApplicationAlertsByStartDateResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__GetApplicationAlertsByStartDateResponse * SOAP_FMAC4 soap_get_ns1__GetApplicationAlertsByStartDateResponse(struct soap*, struct ns1__GetApplicationAlertsByStartDateResponse *, const char*, const char*);

inline int soap_read_ns1__GetApplicationAlertsByStartDateResponse(struct soap *soap, struct ns1__GetApplicationAlertsByStartDateResponse *p)
{
	if (p)
	{	::soap_default_ns1__GetApplicationAlertsByStartDateResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__GetApplicationAlertsByStartDateResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetApplicationAlertsByStartDateResponse(struct soap *soap, const char *URL, struct ns1__GetApplicationAlertsByStartDateResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__GetApplicationAlertsByStartDateResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GetApplicationAlertsByStartDateResponse(struct soap *soap, struct ns1__GetApplicationAlertsByStartDateResponse *p)
{
	if (::soap_read_ns1__GetApplicationAlertsByStartDateResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GetTlkpSystemAlertTypesRecord_DEFINED
#define SOAP_TYPE_ns1__GetTlkpSystemAlertTypesRecord_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__GetTlkpSystemAlertTypesRecord(struct soap*, struct ns1__GetTlkpSystemAlertTypesRecord *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__GetTlkpSystemAlertTypesRecord(struct soap*, const struct ns1__GetTlkpSystemAlertTypesRecord *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetTlkpSystemAlertTypesRecord(struct soap*, const char*, int, const struct ns1__GetTlkpSystemAlertTypesRecord *, const char*);
SOAP_FMAC3 struct ns1__GetTlkpSystemAlertTypesRecord * SOAP_FMAC4 soap_in_ns1__GetTlkpSystemAlertTypesRecord(struct soap*, const char*, struct ns1__GetTlkpSystemAlertTypesRecord *, const char*);
SOAP_FMAC1 struct ns1__GetTlkpSystemAlertTypesRecord * SOAP_FMAC2 soap_instantiate_ns1__GetTlkpSystemAlertTypesRecord(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__GetTlkpSystemAlertTypesRecord * soap_new_ns1__GetTlkpSystemAlertTypesRecord(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetTlkpSystemAlertTypesRecord(soap, n, NULL, NULL, NULL);
}

inline struct ns1__GetTlkpSystemAlertTypesRecord * soap_new_req_ns1__GetTlkpSystemAlertTypesRecord(
	struct soap *soap)
{
	struct ns1__GetTlkpSystemAlertTypesRecord *_p = ::soap_new_ns1__GetTlkpSystemAlertTypesRecord(soap);
	if (_p)
	{	::soap_default_ns1__GetTlkpSystemAlertTypesRecord(soap, _p);
	}
	return _p;
}

inline struct ns1__GetTlkpSystemAlertTypesRecord * soap_new_set_ns1__GetTlkpSystemAlertTypesRecord(
	struct soap *soap)
{
	struct ns1__GetTlkpSystemAlertTypesRecord *_p = ::soap_new_ns1__GetTlkpSystemAlertTypesRecord(soap);
	if (_p)
	{	::soap_default_ns1__GetTlkpSystemAlertTypesRecord(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__GetTlkpSystemAlertTypesRecord(struct soap*, const struct ns1__GetTlkpSystemAlertTypesRecord *, const char*, const char*);

inline int soap_write_ns1__GetTlkpSystemAlertTypesRecord(struct soap *soap, struct ns1__GetTlkpSystemAlertTypesRecord const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__GetTlkpSystemAlertTypesRecord(soap, p), 0) || ::soap_put_ns1__GetTlkpSystemAlertTypesRecord(soap, p, "ns1:GetTlkpSystemAlertTypesRecord", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetTlkpSystemAlertTypesRecord(struct soap *soap, const char *URL, struct ns1__GetTlkpSystemAlertTypesRecord const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetTlkpSystemAlertTypesRecord(soap, p), 0) || ::soap_put_ns1__GetTlkpSystemAlertTypesRecord(soap, p, "ns1:GetTlkpSystemAlertTypesRecord", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__GetTlkpSystemAlertTypesRecord(struct soap *soap, const char *URL, struct ns1__GetTlkpSystemAlertTypesRecord const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetTlkpSystemAlertTypesRecord(soap, p), 0) || ::soap_put_ns1__GetTlkpSystemAlertTypesRecord(soap, p, "ns1:GetTlkpSystemAlertTypesRecord", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetTlkpSystemAlertTypesRecord(struct soap *soap, const char *URL, struct ns1__GetTlkpSystemAlertTypesRecord const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetTlkpSystemAlertTypesRecord(soap, p), 0) || ::soap_put_ns1__GetTlkpSystemAlertTypesRecord(soap, p, "ns1:GetTlkpSystemAlertTypesRecord", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__GetTlkpSystemAlertTypesRecord * SOAP_FMAC4 soap_get_ns1__GetTlkpSystemAlertTypesRecord(struct soap*, struct ns1__GetTlkpSystemAlertTypesRecord *, const char*, const char*);

inline int soap_read_ns1__GetTlkpSystemAlertTypesRecord(struct soap *soap, struct ns1__GetTlkpSystemAlertTypesRecord *p)
{
	if (p)
	{	::soap_default_ns1__GetTlkpSystemAlertTypesRecord(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__GetTlkpSystemAlertTypesRecord(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetTlkpSystemAlertTypesRecord(struct soap *soap, const char *URL, struct ns1__GetTlkpSystemAlertTypesRecord *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__GetTlkpSystemAlertTypesRecord(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GetTlkpSystemAlertTypesRecord(struct soap *soap, struct ns1__GetTlkpSystemAlertTypesRecord *p)
{
	if (::soap_read_ns1__GetTlkpSystemAlertTypesRecord(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GetTlkpSystemAlertTypesRecordResponse_DEFINED
#define SOAP_TYPE_ns1__GetTlkpSystemAlertTypesRecordResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__GetTlkpSystemAlertTypesRecordResponse(struct soap*, struct ns1__GetTlkpSystemAlertTypesRecordResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__GetTlkpSystemAlertTypesRecordResponse(struct soap*, const struct ns1__GetTlkpSystemAlertTypesRecordResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetTlkpSystemAlertTypesRecordResponse(struct soap*, const char*, int, const struct ns1__GetTlkpSystemAlertTypesRecordResponse *, const char*);
SOAP_FMAC3 struct ns1__GetTlkpSystemAlertTypesRecordResponse * SOAP_FMAC4 soap_in_ns1__GetTlkpSystemAlertTypesRecordResponse(struct soap*, const char*, struct ns1__GetTlkpSystemAlertTypesRecordResponse *, const char*);
SOAP_FMAC1 struct ns1__GetTlkpSystemAlertTypesRecordResponse * SOAP_FMAC2 soap_instantiate_ns1__GetTlkpSystemAlertTypesRecordResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__GetTlkpSystemAlertTypesRecordResponse * soap_new_ns1__GetTlkpSystemAlertTypesRecordResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetTlkpSystemAlertTypesRecordResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__GetTlkpSystemAlertTypesRecordResponse * soap_new_req_ns1__GetTlkpSystemAlertTypesRecordResponse(
	struct soap *soap,
	const std::string& GetTlkpSystemAlertTypesRecordReturn)
{
	struct ns1__GetTlkpSystemAlertTypesRecordResponse *_p = ::soap_new_ns1__GetTlkpSystemAlertTypesRecordResponse(soap);
	if (_p)
	{	::soap_default_ns1__GetTlkpSystemAlertTypesRecordResponse(soap, _p);
		_p->GetTlkpSystemAlertTypesRecordReturn = GetTlkpSystemAlertTypesRecordReturn;
	}
	return _p;
}

inline struct ns1__GetTlkpSystemAlertTypesRecordResponse * soap_new_set_ns1__GetTlkpSystemAlertTypesRecordResponse(
	struct soap *soap,
	const std::string& GetTlkpSystemAlertTypesRecordReturn)
{
	struct ns1__GetTlkpSystemAlertTypesRecordResponse *_p = ::soap_new_ns1__GetTlkpSystemAlertTypesRecordResponse(soap);
	if (_p)
	{	::soap_default_ns1__GetTlkpSystemAlertTypesRecordResponse(soap, _p);
		_p->GetTlkpSystemAlertTypesRecordReturn = GetTlkpSystemAlertTypesRecordReturn;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__GetTlkpSystemAlertTypesRecordResponse(struct soap*, const struct ns1__GetTlkpSystemAlertTypesRecordResponse *, const char*, const char*);

inline int soap_write_ns1__GetTlkpSystemAlertTypesRecordResponse(struct soap *soap, struct ns1__GetTlkpSystemAlertTypesRecordResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__GetTlkpSystemAlertTypesRecordResponse(soap, p), 0) || ::soap_put_ns1__GetTlkpSystemAlertTypesRecordResponse(soap, p, "ns1:GetTlkpSystemAlertTypesRecordResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetTlkpSystemAlertTypesRecordResponse(struct soap *soap, const char *URL, struct ns1__GetTlkpSystemAlertTypesRecordResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetTlkpSystemAlertTypesRecordResponse(soap, p), 0) || ::soap_put_ns1__GetTlkpSystemAlertTypesRecordResponse(soap, p, "ns1:GetTlkpSystemAlertTypesRecordResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__GetTlkpSystemAlertTypesRecordResponse(struct soap *soap, const char *URL, struct ns1__GetTlkpSystemAlertTypesRecordResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetTlkpSystemAlertTypesRecordResponse(soap, p), 0) || ::soap_put_ns1__GetTlkpSystemAlertTypesRecordResponse(soap, p, "ns1:GetTlkpSystemAlertTypesRecordResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetTlkpSystemAlertTypesRecordResponse(struct soap *soap, const char *URL, struct ns1__GetTlkpSystemAlertTypesRecordResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetTlkpSystemAlertTypesRecordResponse(soap, p), 0) || ::soap_put_ns1__GetTlkpSystemAlertTypesRecordResponse(soap, p, "ns1:GetTlkpSystemAlertTypesRecordResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__GetTlkpSystemAlertTypesRecordResponse * SOAP_FMAC4 soap_get_ns1__GetTlkpSystemAlertTypesRecordResponse(struct soap*, struct ns1__GetTlkpSystemAlertTypesRecordResponse *, const char*, const char*);

inline int soap_read_ns1__GetTlkpSystemAlertTypesRecordResponse(struct soap *soap, struct ns1__GetTlkpSystemAlertTypesRecordResponse *p)
{
	if (p)
	{	::soap_default_ns1__GetTlkpSystemAlertTypesRecordResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__GetTlkpSystemAlertTypesRecordResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetTlkpSystemAlertTypesRecordResponse(struct soap *soap, const char *URL, struct ns1__GetTlkpSystemAlertTypesRecordResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__GetTlkpSystemAlertTypesRecordResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GetTlkpSystemAlertTypesRecordResponse(struct soap *soap, struct ns1__GetTlkpSystemAlertTypesRecordResponse *p)
{
	if (::soap_read_ns1__GetTlkpSystemAlertTypesRecordResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GetTlkpSystemAlertActionsRecord_DEFINED
#define SOAP_TYPE_ns1__GetTlkpSystemAlertActionsRecord_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__GetTlkpSystemAlertActionsRecord(struct soap*, struct ns1__GetTlkpSystemAlertActionsRecord *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__GetTlkpSystemAlertActionsRecord(struct soap*, const struct ns1__GetTlkpSystemAlertActionsRecord *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetTlkpSystemAlertActionsRecord(struct soap*, const char*, int, const struct ns1__GetTlkpSystemAlertActionsRecord *, const char*);
SOAP_FMAC3 struct ns1__GetTlkpSystemAlertActionsRecord * SOAP_FMAC4 soap_in_ns1__GetTlkpSystemAlertActionsRecord(struct soap*, const char*, struct ns1__GetTlkpSystemAlertActionsRecord *, const char*);
SOAP_FMAC1 struct ns1__GetTlkpSystemAlertActionsRecord * SOAP_FMAC2 soap_instantiate_ns1__GetTlkpSystemAlertActionsRecord(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__GetTlkpSystemAlertActionsRecord * soap_new_ns1__GetTlkpSystemAlertActionsRecord(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetTlkpSystemAlertActionsRecord(soap, n, NULL, NULL, NULL);
}

inline struct ns1__GetTlkpSystemAlertActionsRecord * soap_new_req_ns1__GetTlkpSystemAlertActionsRecord(
	struct soap *soap)
{
	struct ns1__GetTlkpSystemAlertActionsRecord *_p = ::soap_new_ns1__GetTlkpSystemAlertActionsRecord(soap);
	if (_p)
	{	::soap_default_ns1__GetTlkpSystemAlertActionsRecord(soap, _p);
	}
	return _p;
}

inline struct ns1__GetTlkpSystemAlertActionsRecord * soap_new_set_ns1__GetTlkpSystemAlertActionsRecord(
	struct soap *soap)
{
	struct ns1__GetTlkpSystemAlertActionsRecord *_p = ::soap_new_ns1__GetTlkpSystemAlertActionsRecord(soap);
	if (_p)
	{	::soap_default_ns1__GetTlkpSystemAlertActionsRecord(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__GetTlkpSystemAlertActionsRecord(struct soap*, const struct ns1__GetTlkpSystemAlertActionsRecord *, const char*, const char*);

inline int soap_write_ns1__GetTlkpSystemAlertActionsRecord(struct soap *soap, struct ns1__GetTlkpSystemAlertActionsRecord const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__GetTlkpSystemAlertActionsRecord(soap, p), 0) || ::soap_put_ns1__GetTlkpSystemAlertActionsRecord(soap, p, "ns1:GetTlkpSystemAlertActionsRecord", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetTlkpSystemAlertActionsRecord(struct soap *soap, const char *URL, struct ns1__GetTlkpSystemAlertActionsRecord const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetTlkpSystemAlertActionsRecord(soap, p), 0) || ::soap_put_ns1__GetTlkpSystemAlertActionsRecord(soap, p, "ns1:GetTlkpSystemAlertActionsRecord", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__GetTlkpSystemAlertActionsRecord(struct soap *soap, const char *URL, struct ns1__GetTlkpSystemAlertActionsRecord const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetTlkpSystemAlertActionsRecord(soap, p), 0) || ::soap_put_ns1__GetTlkpSystemAlertActionsRecord(soap, p, "ns1:GetTlkpSystemAlertActionsRecord", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetTlkpSystemAlertActionsRecord(struct soap *soap, const char *URL, struct ns1__GetTlkpSystemAlertActionsRecord const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetTlkpSystemAlertActionsRecord(soap, p), 0) || ::soap_put_ns1__GetTlkpSystemAlertActionsRecord(soap, p, "ns1:GetTlkpSystemAlertActionsRecord", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__GetTlkpSystemAlertActionsRecord * SOAP_FMAC4 soap_get_ns1__GetTlkpSystemAlertActionsRecord(struct soap*, struct ns1__GetTlkpSystemAlertActionsRecord *, const char*, const char*);

inline int soap_read_ns1__GetTlkpSystemAlertActionsRecord(struct soap *soap, struct ns1__GetTlkpSystemAlertActionsRecord *p)
{
	if (p)
	{	::soap_default_ns1__GetTlkpSystemAlertActionsRecord(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__GetTlkpSystemAlertActionsRecord(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetTlkpSystemAlertActionsRecord(struct soap *soap, const char *URL, struct ns1__GetTlkpSystemAlertActionsRecord *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__GetTlkpSystemAlertActionsRecord(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GetTlkpSystemAlertActionsRecord(struct soap *soap, struct ns1__GetTlkpSystemAlertActionsRecord *p)
{
	if (::soap_read_ns1__GetTlkpSystemAlertActionsRecord(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GetTlkpSystemAlertActionsRecordResponse_DEFINED
#define SOAP_TYPE_ns1__GetTlkpSystemAlertActionsRecordResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__GetTlkpSystemAlertActionsRecordResponse(struct soap*, struct ns1__GetTlkpSystemAlertActionsRecordResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__GetTlkpSystemAlertActionsRecordResponse(struct soap*, const struct ns1__GetTlkpSystemAlertActionsRecordResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetTlkpSystemAlertActionsRecordResponse(struct soap*, const char*, int, const struct ns1__GetTlkpSystemAlertActionsRecordResponse *, const char*);
SOAP_FMAC3 struct ns1__GetTlkpSystemAlertActionsRecordResponse * SOAP_FMAC4 soap_in_ns1__GetTlkpSystemAlertActionsRecordResponse(struct soap*, const char*, struct ns1__GetTlkpSystemAlertActionsRecordResponse *, const char*);
SOAP_FMAC1 struct ns1__GetTlkpSystemAlertActionsRecordResponse * SOAP_FMAC2 soap_instantiate_ns1__GetTlkpSystemAlertActionsRecordResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__GetTlkpSystemAlertActionsRecordResponse * soap_new_ns1__GetTlkpSystemAlertActionsRecordResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetTlkpSystemAlertActionsRecordResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__GetTlkpSystemAlertActionsRecordResponse * soap_new_req_ns1__GetTlkpSystemAlertActionsRecordResponse(
	struct soap *soap,
	const std::string& GetTlkpSystemAlertActionsRecordReturn)
{
	struct ns1__GetTlkpSystemAlertActionsRecordResponse *_p = ::soap_new_ns1__GetTlkpSystemAlertActionsRecordResponse(soap);
	if (_p)
	{	::soap_default_ns1__GetTlkpSystemAlertActionsRecordResponse(soap, _p);
		_p->GetTlkpSystemAlertActionsRecordReturn = GetTlkpSystemAlertActionsRecordReturn;
	}
	return _p;
}

inline struct ns1__GetTlkpSystemAlertActionsRecordResponse * soap_new_set_ns1__GetTlkpSystemAlertActionsRecordResponse(
	struct soap *soap,
	const std::string& GetTlkpSystemAlertActionsRecordReturn)
{
	struct ns1__GetTlkpSystemAlertActionsRecordResponse *_p = ::soap_new_ns1__GetTlkpSystemAlertActionsRecordResponse(soap);
	if (_p)
	{	::soap_default_ns1__GetTlkpSystemAlertActionsRecordResponse(soap, _p);
		_p->GetTlkpSystemAlertActionsRecordReturn = GetTlkpSystemAlertActionsRecordReturn;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__GetTlkpSystemAlertActionsRecordResponse(struct soap*, const struct ns1__GetTlkpSystemAlertActionsRecordResponse *, const char*, const char*);

inline int soap_write_ns1__GetTlkpSystemAlertActionsRecordResponse(struct soap *soap, struct ns1__GetTlkpSystemAlertActionsRecordResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__GetTlkpSystemAlertActionsRecordResponse(soap, p), 0) || ::soap_put_ns1__GetTlkpSystemAlertActionsRecordResponse(soap, p, "ns1:GetTlkpSystemAlertActionsRecordResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetTlkpSystemAlertActionsRecordResponse(struct soap *soap, const char *URL, struct ns1__GetTlkpSystemAlertActionsRecordResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetTlkpSystemAlertActionsRecordResponse(soap, p), 0) || ::soap_put_ns1__GetTlkpSystemAlertActionsRecordResponse(soap, p, "ns1:GetTlkpSystemAlertActionsRecordResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__GetTlkpSystemAlertActionsRecordResponse(struct soap *soap, const char *URL, struct ns1__GetTlkpSystemAlertActionsRecordResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetTlkpSystemAlertActionsRecordResponse(soap, p), 0) || ::soap_put_ns1__GetTlkpSystemAlertActionsRecordResponse(soap, p, "ns1:GetTlkpSystemAlertActionsRecordResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetTlkpSystemAlertActionsRecordResponse(struct soap *soap, const char *URL, struct ns1__GetTlkpSystemAlertActionsRecordResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetTlkpSystemAlertActionsRecordResponse(soap, p), 0) || ::soap_put_ns1__GetTlkpSystemAlertActionsRecordResponse(soap, p, "ns1:GetTlkpSystemAlertActionsRecordResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__GetTlkpSystemAlertActionsRecordResponse * SOAP_FMAC4 soap_get_ns1__GetTlkpSystemAlertActionsRecordResponse(struct soap*, struct ns1__GetTlkpSystemAlertActionsRecordResponse *, const char*, const char*);

inline int soap_read_ns1__GetTlkpSystemAlertActionsRecordResponse(struct soap *soap, struct ns1__GetTlkpSystemAlertActionsRecordResponse *p)
{
	if (p)
	{	::soap_default_ns1__GetTlkpSystemAlertActionsRecordResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__GetTlkpSystemAlertActionsRecordResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetTlkpSystemAlertActionsRecordResponse(struct soap *soap, const char *URL, struct ns1__GetTlkpSystemAlertActionsRecordResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__GetTlkpSystemAlertActionsRecordResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GetTlkpSystemAlertActionsRecordResponse(struct soap *soap, struct ns1__GetTlkpSystemAlertActionsRecordResponse *p)
{
	if (::soap_read_ns1__GetTlkpSystemAlertActionsRecordResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GetTlkpSystemAlertStatesRecord_DEFINED
#define SOAP_TYPE_ns1__GetTlkpSystemAlertStatesRecord_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__GetTlkpSystemAlertStatesRecord(struct soap*, struct ns1__GetTlkpSystemAlertStatesRecord *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__GetTlkpSystemAlertStatesRecord(struct soap*, const struct ns1__GetTlkpSystemAlertStatesRecord *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetTlkpSystemAlertStatesRecord(struct soap*, const char*, int, const struct ns1__GetTlkpSystemAlertStatesRecord *, const char*);
SOAP_FMAC3 struct ns1__GetTlkpSystemAlertStatesRecord * SOAP_FMAC4 soap_in_ns1__GetTlkpSystemAlertStatesRecord(struct soap*, const char*, struct ns1__GetTlkpSystemAlertStatesRecord *, const char*);
SOAP_FMAC1 struct ns1__GetTlkpSystemAlertStatesRecord * SOAP_FMAC2 soap_instantiate_ns1__GetTlkpSystemAlertStatesRecord(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__GetTlkpSystemAlertStatesRecord * soap_new_ns1__GetTlkpSystemAlertStatesRecord(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetTlkpSystemAlertStatesRecord(soap, n, NULL, NULL, NULL);
}

inline struct ns1__GetTlkpSystemAlertStatesRecord * soap_new_req_ns1__GetTlkpSystemAlertStatesRecord(
	struct soap *soap)
{
	struct ns1__GetTlkpSystemAlertStatesRecord *_p = ::soap_new_ns1__GetTlkpSystemAlertStatesRecord(soap);
	if (_p)
	{	::soap_default_ns1__GetTlkpSystemAlertStatesRecord(soap, _p);
	}
	return _p;
}

inline struct ns1__GetTlkpSystemAlertStatesRecord * soap_new_set_ns1__GetTlkpSystemAlertStatesRecord(
	struct soap *soap)
{
	struct ns1__GetTlkpSystemAlertStatesRecord *_p = ::soap_new_ns1__GetTlkpSystemAlertStatesRecord(soap);
	if (_p)
	{	::soap_default_ns1__GetTlkpSystemAlertStatesRecord(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__GetTlkpSystemAlertStatesRecord(struct soap*, const struct ns1__GetTlkpSystemAlertStatesRecord *, const char*, const char*);

inline int soap_write_ns1__GetTlkpSystemAlertStatesRecord(struct soap *soap, struct ns1__GetTlkpSystemAlertStatesRecord const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__GetTlkpSystemAlertStatesRecord(soap, p), 0) || ::soap_put_ns1__GetTlkpSystemAlertStatesRecord(soap, p, "ns1:GetTlkpSystemAlertStatesRecord", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetTlkpSystemAlertStatesRecord(struct soap *soap, const char *URL, struct ns1__GetTlkpSystemAlertStatesRecord const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetTlkpSystemAlertStatesRecord(soap, p), 0) || ::soap_put_ns1__GetTlkpSystemAlertStatesRecord(soap, p, "ns1:GetTlkpSystemAlertStatesRecord", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__GetTlkpSystemAlertStatesRecord(struct soap *soap, const char *URL, struct ns1__GetTlkpSystemAlertStatesRecord const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetTlkpSystemAlertStatesRecord(soap, p), 0) || ::soap_put_ns1__GetTlkpSystemAlertStatesRecord(soap, p, "ns1:GetTlkpSystemAlertStatesRecord", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetTlkpSystemAlertStatesRecord(struct soap *soap, const char *URL, struct ns1__GetTlkpSystemAlertStatesRecord const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetTlkpSystemAlertStatesRecord(soap, p), 0) || ::soap_put_ns1__GetTlkpSystemAlertStatesRecord(soap, p, "ns1:GetTlkpSystemAlertStatesRecord", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__GetTlkpSystemAlertStatesRecord * SOAP_FMAC4 soap_get_ns1__GetTlkpSystemAlertStatesRecord(struct soap*, struct ns1__GetTlkpSystemAlertStatesRecord *, const char*, const char*);

inline int soap_read_ns1__GetTlkpSystemAlertStatesRecord(struct soap *soap, struct ns1__GetTlkpSystemAlertStatesRecord *p)
{
	if (p)
	{	::soap_default_ns1__GetTlkpSystemAlertStatesRecord(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__GetTlkpSystemAlertStatesRecord(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetTlkpSystemAlertStatesRecord(struct soap *soap, const char *URL, struct ns1__GetTlkpSystemAlertStatesRecord *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__GetTlkpSystemAlertStatesRecord(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GetTlkpSystemAlertStatesRecord(struct soap *soap, struct ns1__GetTlkpSystemAlertStatesRecord *p)
{
	if (::soap_read_ns1__GetTlkpSystemAlertStatesRecord(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GetTlkpSystemAlertStatesRecordResponse_DEFINED
#define SOAP_TYPE_ns1__GetTlkpSystemAlertStatesRecordResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__GetTlkpSystemAlertStatesRecordResponse(struct soap*, struct ns1__GetTlkpSystemAlertStatesRecordResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__GetTlkpSystemAlertStatesRecordResponse(struct soap*, const struct ns1__GetTlkpSystemAlertStatesRecordResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetTlkpSystemAlertStatesRecordResponse(struct soap*, const char*, int, const struct ns1__GetTlkpSystemAlertStatesRecordResponse *, const char*);
SOAP_FMAC3 struct ns1__GetTlkpSystemAlertStatesRecordResponse * SOAP_FMAC4 soap_in_ns1__GetTlkpSystemAlertStatesRecordResponse(struct soap*, const char*, struct ns1__GetTlkpSystemAlertStatesRecordResponse *, const char*);
SOAP_FMAC1 struct ns1__GetTlkpSystemAlertStatesRecordResponse * SOAP_FMAC2 soap_instantiate_ns1__GetTlkpSystemAlertStatesRecordResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__GetTlkpSystemAlertStatesRecordResponse * soap_new_ns1__GetTlkpSystemAlertStatesRecordResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetTlkpSystemAlertStatesRecordResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__GetTlkpSystemAlertStatesRecordResponse * soap_new_req_ns1__GetTlkpSystemAlertStatesRecordResponse(
	struct soap *soap,
	const std::string& GetTlkpSystemAlertStatesRecordReturn)
{
	struct ns1__GetTlkpSystemAlertStatesRecordResponse *_p = ::soap_new_ns1__GetTlkpSystemAlertStatesRecordResponse(soap);
	if (_p)
	{	::soap_default_ns1__GetTlkpSystemAlertStatesRecordResponse(soap, _p);
		_p->GetTlkpSystemAlertStatesRecordReturn = GetTlkpSystemAlertStatesRecordReturn;
	}
	return _p;
}

inline struct ns1__GetTlkpSystemAlertStatesRecordResponse * soap_new_set_ns1__GetTlkpSystemAlertStatesRecordResponse(
	struct soap *soap,
	const std::string& GetTlkpSystemAlertStatesRecordReturn)
{
	struct ns1__GetTlkpSystemAlertStatesRecordResponse *_p = ::soap_new_ns1__GetTlkpSystemAlertStatesRecordResponse(soap);
	if (_p)
	{	::soap_default_ns1__GetTlkpSystemAlertStatesRecordResponse(soap, _p);
		_p->GetTlkpSystemAlertStatesRecordReturn = GetTlkpSystemAlertStatesRecordReturn;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__GetTlkpSystemAlertStatesRecordResponse(struct soap*, const struct ns1__GetTlkpSystemAlertStatesRecordResponse *, const char*, const char*);

inline int soap_write_ns1__GetTlkpSystemAlertStatesRecordResponse(struct soap *soap, struct ns1__GetTlkpSystemAlertStatesRecordResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__GetTlkpSystemAlertStatesRecordResponse(soap, p), 0) || ::soap_put_ns1__GetTlkpSystemAlertStatesRecordResponse(soap, p, "ns1:GetTlkpSystemAlertStatesRecordResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetTlkpSystemAlertStatesRecordResponse(struct soap *soap, const char *URL, struct ns1__GetTlkpSystemAlertStatesRecordResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetTlkpSystemAlertStatesRecordResponse(soap, p), 0) || ::soap_put_ns1__GetTlkpSystemAlertStatesRecordResponse(soap, p, "ns1:GetTlkpSystemAlertStatesRecordResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__GetTlkpSystemAlertStatesRecordResponse(struct soap *soap, const char *URL, struct ns1__GetTlkpSystemAlertStatesRecordResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetTlkpSystemAlertStatesRecordResponse(soap, p), 0) || ::soap_put_ns1__GetTlkpSystemAlertStatesRecordResponse(soap, p, "ns1:GetTlkpSystemAlertStatesRecordResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetTlkpSystemAlertStatesRecordResponse(struct soap *soap, const char *URL, struct ns1__GetTlkpSystemAlertStatesRecordResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetTlkpSystemAlertStatesRecordResponse(soap, p), 0) || ::soap_put_ns1__GetTlkpSystemAlertStatesRecordResponse(soap, p, "ns1:GetTlkpSystemAlertStatesRecordResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__GetTlkpSystemAlertStatesRecordResponse * SOAP_FMAC4 soap_get_ns1__GetTlkpSystemAlertStatesRecordResponse(struct soap*, struct ns1__GetTlkpSystemAlertStatesRecordResponse *, const char*, const char*);

inline int soap_read_ns1__GetTlkpSystemAlertStatesRecordResponse(struct soap *soap, struct ns1__GetTlkpSystemAlertStatesRecordResponse *p)
{
	if (p)
	{	::soap_default_ns1__GetTlkpSystemAlertStatesRecordResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__GetTlkpSystemAlertStatesRecordResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetTlkpSystemAlertStatesRecordResponse(struct soap *soap, const char *URL, struct ns1__GetTlkpSystemAlertStatesRecordResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__GetTlkpSystemAlertStatesRecordResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GetTlkpSystemAlertStatesRecordResponse(struct soap *soap, struct ns1__GetTlkpSystemAlertStatesRecordResponse *p)
{
	if (::soap_read_ns1__GetTlkpSystemAlertStatesRecordResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GetServerRecord_DEFINED
#define SOAP_TYPE_ns1__GetServerRecord_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__GetServerRecord(struct soap*, struct ns1__GetServerRecord *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__GetServerRecord(struct soap*, const struct ns1__GetServerRecord *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetServerRecord(struct soap*, const char*, int, const struct ns1__GetServerRecord *, const char*);
SOAP_FMAC3 struct ns1__GetServerRecord * SOAP_FMAC4 soap_in_ns1__GetServerRecord(struct soap*, const char*, struct ns1__GetServerRecord *, const char*);
SOAP_FMAC1 struct ns1__GetServerRecord * SOAP_FMAC2 soap_instantiate_ns1__GetServerRecord(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__GetServerRecord * soap_new_ns1__GetServerRecord(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetServerRecord(soap, n, NULL, NULL, NULL);
}

inline struct ns1__GetServerRecord * soap_new_req_ns1__GetServerRecord(
	struct soap *soap)
{
	struct ns1__GetServerRecord *_p = ::soap_new_ns1__GetServerRecord(soap);
	if (_p)
	{	::soap_default_ns1__GetServerRecord(soap, _p);
	}
	return _p;
}

inline struct ns1__GetServerRecord * soap_new_set_ns1__GetServerRecord(
	struct soap *soap)
{
	struct ns1__GetServerRecord *_p = ::soap_new_ns1__GetServerRecord(soap);
	if (_p)
	{	::soap_default_ns1__GetServerRecord(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__GetServerRecord(struct soap*, const struct ns1__GetServerRecord *, const char*, const char*);

inline int soap_write_ns1__GetServerRecord(struct soap *soap, struct ns1__GetServerRecord const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__GetServerRecord(soap, p), 0) || ::soap_put_ns1__GetServerRecord(soap, p, "ns1:GetServerRecord", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetServerRecord(struct soap *soap, const char *URL, struct ns1__GetServerRecord const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetServerRecord(soap, p), 0) || ::soap_put_ns1__GetServerRecord(soap, p, "ns1:GetServerRecord", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__GetServerRecord(struct soap *soap, const char *URL, struct ns1__GetServerRecord const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetServerRecord(soap, p), 0) || ::soap_put_ns1__GetServerRecord(soap, p, "ns1:GetServerRecord", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetServerRecord(struct soap *soap, const char *URL, struct ns1__GetServerRecord const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetServerRecord(soap, p), 0) || ::soap_put_ns1__GetServerRecord(soap, p, "ns1:GetServerRecord", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__GetServerRecord * SOAP_FMAC4 soap_get_ns1__GetServerRecord(struct soap*, struct ns1__GetServerRecord *, const char*, const char*);

inline int soap_read_ns1__GetServerRecord(struct soap *soap, struct ns1__GetServerRecord *p)
{
	if (p)
	{	::soap_default_ns1__GetServerRecord(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__GetServerRecord(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetServerRecord(struct soap *soap, const char *URL, struct ns1__GetServerRecord *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__GetServerRecord(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GetServerRecord(struct soap *soap, struct ns1__GetServerRecord *p)
{
	if (::soap_read_ns1__GetServerRecord(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GetServerRecordResponse_DEFINED
#define SOAP_TYPE_ns1__GetServerRecordResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__GetServerRecordResponse(struct soap*, struct ns1__GetServerRecordResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__GetServerRecordResponse(struct soap*, const struct ns1__GetServerRecordResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetServerRecordResponse(struct soap*, const char*, int, const struct ns1__GetServerRecordResponse *, const char*);
SOAP_FMAC3 struct ns1__GetServerRecordResponse * SOAP_FMAC4 soap_in_ns1__GetServerRecordResponse(struct soap*, const char*, struct ns1__GetServerRecordResponse *, const char*);
SOAP_FMAC1 struct ns1__GetServerRecordResponse * SOAP_FMAC2 soap_instantiate_ns1__GetServerRecordResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__GetServerRecordResponse * soap_new_ns1__GetServerRecordResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetServerRecordResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__GetServerRecordResponse * soap_new_req_ns1__GetServerRecordResponse(
	struct soap *soap,
	const std::string& GetServerRecordReturn)
{
	struct ns1__GetServerRecordResponse *_p = ::soap_new_ns1__GetServerRecordResponse(soap);
	if (_p)
	{	::soap_default_ns1__GetServerRecordResponse(soap, _p);
		_p->GetServerRecordReturn = GetServerRecordReturn;
	}
	return _p;
}

inline struct ns1__GetServerRecordResponse * soap_new_set_ns1__GetServerRecordResponse(
	struct soap *soap,
	const std::string& GetServerRecordReturn)
{
	struct ns1__GetServerRecordResponse *_p = ::soap_new_ns1__GetServerRecordResponse(soap);
	if (_p)
	{	::soap_default_ns1__GetServerRecordResponse(soap, _p);
		_p->GetServerRecordReturn = GetServerRecordReturn;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__GetServerRecordResponse(struct soap*, const struct ns1__GetServerRecordResponse *, const char*, const char*);

inline int soap_write_ns1__GetServerRecordResponse(struct soap *soap, struct ns1__GetServerRecordResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__GetServerRecordResponse(soap, p), 0) || ::soap_put_ns1__GetServerRecordResponse(soap, p, "ns1:GetServerRecordResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetServerRecordResponse(struct soap *soap, const char *URL, struct ns1__GetServerRecordResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetServerRecordResponse(soap, p), 0) || ::soap_put_ns1__GetServerRecordResponse(soap, p, "ns1:GetServerRecordResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__GetServerRecordResponse(struct soap *soap, const char *URL, struct ns1__GetServerRecordResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetServerRecordResponse(soap, p), 0) || ::soap_put_ns1__GetServerRecordResponse(soap, p, "ns1:GetServerRecordResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetServerRecordResponse(struct soap *soap, const char *URL, struct ns1__GetServerRecordResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetServerRecordResponse(soap, p), 0) || ::soap_put_ns1__GetServerRecordResponse(soap, p, "ns1:GetServerRecordResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__GetServerRecordResponse * SOAP_FMAC4 soap_get_ns1__GetServerRecordResponse(struct soap*, struct ns1__GetServerRecordResponse *, const char*, const char*);

inline int soap_read_ns1__GetServerRecordResponse(struct soap *soap, struct ns1__GetServerRecordResponse *p)
{
	if (p)
	{	::soap_default_ns1__GetServerRecordResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__GetServerRecordResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetServerRecordResponse(struct soap *soap, const char *URL, struct ns1__GetServerRecordResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__GetServerRecordResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GetServerRecordResponse(struct soap *soap, struct ns1__GetServerRecordResponse *p)
{
	if (::soap_read_ns1__GetServerRecordResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GetServerTypeRecord_DEFINED
#define SOAP_TYPE_ns1__GetServerTypeRecord_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__GetServerTypeRecord(struct soap*, struct ns1__GetServerTypeRecord *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__GetServerTypeRecord(struct soap*, const struct ns1__GetServerTypeRecord *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetServerTypeRecord(struct soap*, const char*, int, const struct ns1__GetServerTypeRecord *, const char*);
SOAP_FMAC3 struct ns1__GetServerTypeRecord * SOAP_FMAC4 soap_in_ns1__GetServerTypeRecord(struct soap*, const char*, struct ns1__GetServerTypeRecord *, const char*);
SOAP_FMAC1 struct ns1__GetServerTypeRecord * SOAP_FMAC2 soap_instantiate_ns1__GetServerTypeRecord(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__GetServerTypeRecord * soap_new_ns1__GetServerTypeRecord(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetServerTypeRecord(soap, n, NULL, NULL, NULL);
}

inline struct ns1__GetServerTypeRecord * soap_new_req_ns1__GetServerTypeRecord(
	struct soap *soap)
{
	struct ns1__GetServerTypeRecord *_p = ::soap_new_ns1__GetServerTypeRecord(soap);
	if (_p)
	{	::soap_default_ns1__GetServerTypeRecord(soap, _p);
	}
	return _p;
}

inline struct ns1__GetServerTypeRecord * soap_new_set_ns1__GetServerTypeRecord(
	struct soap *soap)
{
	struct ns1__GetServerTypeRecord *_p = ::soap_new_ns1__GetServerTypeRecord(soap);
	if (_p)
	{	::soap_default_ns1__GetServerTypeRecord(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__GetServerTypeRecord(struct soap*, const struct ns1__GetServerTypeRecord *, const char*, const char*);

inline int soap_write_ns1__GetServerTypeRecord(struct soap *soap, struct ns1__GetServerTypeRecord const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__GetServerTypeRecord(soap, p), 0) || ::soap_put_ns1__GetServerTypeRecord(soap, p, "ns1:GetServerTypeRecord", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetServerTypeRecord(struct soap *soap, const char *URL, struct ns1__GetServerTypeRecord const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetServerTypeRecord(soap, p), 0) || ::soap_put_ns1__GetServerTypeRecord(soap, p, "ns1:GetServerTypeRecord", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__GetServerTypeRecord(struct soap *soap, const char *URL, struct ns1__GetServerTypeRecord const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetServerTypeRecord(soap, p), 0) || ::soap_put_ns1__GetServerTypeRecord(soap, p, "ns1:GetServerTypeRecord", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetServerTypeRecord(struct soap *soap, const char *URL, struct ns1__GetServerTypeRecord const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetServerTypeRecord(soap, p), 0) || ::soap_put_ns1__GetServerTypeRecord(soap, p, "ns1:GetServerTypeRecord", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__GetServerTypeRecord * SOAP_FMAC4 soap_get_ns1__GetServerTypeRecord(struct soap*, struct ns1__GetServerTypeRecord *, const char*, const char*);

inline int soap_read_ns1__GetServerTypeRecord(struct soap *soap, struct ns1__GetServerTypeRecord *p)
{
	if (p)
	{	::soap_default_ns1__GetServerTypeRecord(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__GetServerTypeRecord(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetServerTypeRecord(struct soap *soap, const char *URL, struct ns1__GetServerTypeRecord *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__GetServerTypeRecord(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GetServerTypeRecord(struct soap *soap, struct ns1__GetServerTypeRecord *p)
{
	if (::soap_read_ns1__GetServerTypeRecord(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GetServerTypeRecordResponse_DEFINED
#define SOAP_TYPE_ns1__GetServerTypeRecordResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__GetServerTypeRecordResponse(struct soap*, struct ns1__GetServerTypeRecordResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__GetServerTypeRecordResponse(struct soap*, const struct ns1__GetServerTypeRecordResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetServerTypeRecordResponse(struct soap*, const char*, int, const struct ns1__GetServerTypeRecordResponse *, const char*);
SOAP_FMAC3 struct ns1__GetServerTypeRecordResponse * SOAP_FMAC4 soap_in_ns1__GetServerTypeRecordResponse(struct soap*, const char*, struct ns1__GetServerTypeRecordResponse *, const char*);
SOAP_FMAC1 struct ns1__GetServerTypeRecordResponse * SOAP_FMAC2 soap_instantiate_ns1__GetServerTypeRecordResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__GetServerTypeRecordResponse * soap_new_ns1__GetServerTypeRecordResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetServerTypeRecordResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__GetServerTypeRecordResponse * soap_new_req_ns1__GetServerTypeRecordResponse(
	struct soap *soap,
	const std::string& GetServerTypeRecordReturn)
{
	struct ns1__GetServerTypeRecordResponse *_p = ::soap_new_ns1__GetServerTypeRecordResponse(soap);
	if (_p)
	{	::soap_default_ns1__GetServerTypeRecordResponse(soap, _p);
		_p->GetServerTypeRecordReturn = GetServerTypeRecordReturn;
	}
	return _p;
}

inline struct ns1__GetServerTypeRecordResponse * soap_new_set_ns1__GetServerTypeRecordResponse(
	struct soap *soap,
	const std::string& GetServerTypeRecordReturn)
{
	struct ns1__GetServerTypeRecordResponse *_p = ::soap_new_ns1__GetServerTypeRecordResponse(soap);
	if (_p)
	{	::soap_default_ns1__GetServerTypeRecordResponse(soap, _p);
		_p->GetServerTypeRecordReturn = GetServerTypeRecordReturn;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__GetServerTypeRecordResponse(struct soap*, const struct ns1__GetServerTypeRecordResponse *, const char*, const char*);

inline int soap_write_ns1__GetServerTypeRecordResponse(struct soap *soap, struct ns1__GetServerTypeRecordResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__GetServerTypeRecordResponse(soap, p), 0) || ::soap_put_ns1__GetServerTypeRecordResponse(soap, p, "ns1:GetServerTypeRecordResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetServerTypeRecordResponse(struct soap *soap, const char *URL, struct ns1__GetServerTypeRecordResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetServerTypeRecordResponse(soap, p), 0) || ::soap_put_ns1__GetServerTypeRecordResponse(soap, p, "ns1:GetServerTypeRecordResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__GetServerTypeRecordResponse(struct soap *soap, const char *URL, struct ns1__GetServerTypeRecordResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetServerTypeRecordResponse(soap, p), 0) || ::soap_put_ns1__GetServerTypeRecordResponse(soap, p, "ns1:GetServerTypeRecordResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetServerTypeRecordResponse(struct soap *soap, const char *URL, struct ns1__GetServerTypeRecordResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetServerTypeRecordResponse(soap, p), 0) || ::soap_put_ns1__GetServerTypeRecordResponse(soap, p, "ns1:GetServerTypeRecordResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__GetServerTypeRecordResponse * SOAP_FMAC4 soap_get_ns1__GetServerTypeRecordResponse(struct soap*, struct ns1__GetServerTypeRecordResponse *, const char*, const char*);

inline int soap_read_ns1__GetServerTypeRecordResponse(struct soap *soap, struct ns1__GetServerTypeRecordResponse *p)
{
	if (p)
	{	::soap_default_ns1__GetServerTypeRecordResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__GetServerTypeRecordResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetServerTypeRecordResponse(struct soap *soap, const char *URL, struct ns1__GetServerTypeRecordResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__GetServerTypeRecordResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GetServerTypeRecordResponse(struct soap *soap, struct ns1__GetServerTypeRecordResponse *p)
{
	if (::soap_read_ns1__GetServerTypeRecordResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GetSiteRecord_DEFINED
#define SOAP_TYPE_ns1__GetSiteRecord_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__GetSiteRecord(struct soap*, struct ns1__GetSiteRecord *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__GetSiteRecord(struct soap*, const struct ns1__GetSiteRecord *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetSiteRecord(struct soap*, const char*, int, const struct ns1__GetSiteRecord *, const char*);
SOAP_FMAC3 struct ns1__GetSiteRecord * SOAP_FMAC4 soap_in_ns1__GetSiteRecord(struct soap*, const char*, struct ns1__GetSiteRecord *, const char*);
SOAP_FMAC1 struct ns1__GetSiteRecord * SOAP_FMAC2 soap_instantiate_ns1__GetSiteRecord(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__GetSiteRecord * soap_new_ns1__GetSiteRecord(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetSiteRecord(soap, n, NULL, NULL, NULL);
}

inline struct ns1__GetSiteRecord * soap_new_req_ns1__GetSiteRecord(
	struct soap *soap)
{
	struct ns1__GetSiteRecord *_p = ::soap_new_ns1__GetSiteRecord(soap);
	if (_p)
	{	::soap_default_ns1__GetSiteRecord(soap, _p);
	}
	return _p;
}

inline struct ns1__GetSiteRecord * soap_new_set_ns1__GetSiteRecord(
	struct soap *soap)
{
	struct ns1__GetSiteRecord *_p = ::soap_new_ns1__GetSiteRecord(soap);
	if (_p)
	{	::soap_default_ns1__GetSiteRecord(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__GetSiteRecord(struct soap*, const struct ns1__GetSiteRecord *, const char*, const char*);

inline int soap_write_ns1__GetSiteRecord(struct soap *soap, struct ns1__GetSiteRecord const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__GetSiteRecord(soap, p), 0) || ::soap_put_ns1__GetSiteRecord(soap, p, "ns1:GetSiteRecord", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetSiteRecord(struct soap *soap, const char *URL, struct ns1__GetSiteRecord const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetSiteRecord(soap, p), 0) || ::soap_put_ns1__GetSiteRecord(soap, p, "ns1:GetSiteRecord", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__GetSiteRecord(struct soap *soap, const char *URL, struct ns1__GetSiteRecord const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetSiteRecord(soap, p), 0) || ::soap_put_ns1__GetSiteRecord(soap, p, "ns1:GetSiteRecord", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetSiteRecord(struct soap *soap, const char *URL, struct ns1__GetSiteRecord const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetSiteRecord(soap, p), 0) || ::soap_put_ns1__GetSiteRecord(soap, p, "ns1:GetSiteRecord", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__GetSiteRecord * SOAP_FMAC4 soap_get_ns1__GetSiteRecord(struct soap*, struct ns1__GetSiteRecord *, const char*, const char*);

inline int soap_read_ns1__GetSiteRecord(struct soap *soap, struct ns1__GetSiteRecord *p)
{
	if (p)
	{	::soap_default_ns1__GetSiteRecord(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__GetSiteRecord(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetSiteRecord(struct soap *soap, const char *URL, struct ns1__GetSiteRecord *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__GetSiteRecord(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GetSiteRecord(struct soap *soap, struct ns1__GetSiteRecord *p)
{
	if (::soap_read_ns1__GetSiteRecord(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GetSiteRecordResponse_DEFINED
#define SOAP_TYPE_ns1__GetSiteRecordResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__GetSiteRecordResponse(struct soap*, struct ns1__GetSiteRecordResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__GetSiteRecordResponse(struct soap*, const struct ns1__GetSiteRecordResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetSiteRecordResponse(struct soap*, const char*, int, const struct ns1__GetSiteRecordResponse *, const char*);
SOAP_FMAC3 struct ns1__GetSiteRecordResponse * SOAP_FMAC4 soap_in_ns1__GetSiteRecordResponse(struct soap*, const char*, struct ns1__GetSiteRecordResponse *, const char*);
SOAP_FMAC1 struct ns1__GetSiteRecordResponse * SOAP_FMAC2 soap_instantiate_ns1__GetSiteRecordResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__GetSiteRecordResponse * soap_new_ns1__GetSiteRecordResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetSiteRecordResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__GetSiteRecordResponse * soap_new_req_ns1__GetSiteRecordResponse(
	struct soap *soap,
	const std::string& GetSiteRecordReturn)
{
	struct ns1__GetSiteRecordResponse *_p = ::soap_new_ns1__GetSiteRecordResponse(soap);
	if (_p)
	{	::soap_default_ns1__GetSiteRecordResponse(soap, _p);
		_p->GetSiteRecordReturn = GetSiteRecordReturn;
	}
	return _p;
}

inline struct ns1__GetSiteRecordResponse * soap_new_set_ns1__GetSiteRecordResponse(
	struct soap *soap,
	const std::string& GetSiteRecordReturn)
{
	struct ns1__GetSiteRecordResponse *_p = ::soap_new_ns1__GetSiteRecordResponse(soap);
	if (_p)
	{	::soap_default_ns1__GetSiteRecordResponse(soap, _p);
		_p->GetSiteRecordReturn = GetSiteRecordReturn;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__GetSiteRecordResponse(struct soap*, const struct ns1__GetSiteRecordResponse *, const char*, const char*);

inline int soap_write_ns1__GetSiteRecordResponse(struct soap *soap, struct ns1__GetSiteRecordResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__GetSiteRecordResponse(soap, p), 0) || ::soap_put_ns1__GetSiteRecordResponse(soap, p, "ns1:GetSiteRecordResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetSiteRecordResponse(struct soap *soap, const char *URL, struct ns1__GetSiteRecordResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetSiteRecordResponse(soap, p), 0) || ::soap_put_ns1__GetSiteRecordResponse(soap, p, "ns1:GetSiteRecordResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__GetSiteRecordResponse(struct soap *soap, const char *URL, struct ns1__GetSiteRecordResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetSiteRecordResponse(soap, p), 0) || ::soap_put_ns1__GetSiteRecordResponse(soap, p, "ns1:GetSiteRecordResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetSiteRecordResponse(struct soap *soap, const char *URL, struct ns1__GetSiteRecordResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetSiteRecordResponse(soap, p), 0) || ::soap_put_ns1__GetSiteRecordResponse(soap, p, "ns1:GetSiteRecordResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__GetSiteRecordResponse * SOAP_FMAC4 soap_get_ns1__GetSiteRecordResponse(struct soap*, struct ns1__GetSiteRecordResponse *, const char*, const char*);

inline int soap_read_ns1__GetSiteRecordResponse(struct soap *soap, struct ns1__GetSiteRecordResponse *p)
{
	if (p)
	{	::soap_default_ns1__GetSiteRecordResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__GetSiteRecordResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetSiteRecordResponse(struct soap *soap, const char *URL, struct ns1__GetSiteRecordResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__GetSiteRecordResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GetSiteRecordResponse(struct soap *soap, struct ns1__GetSiteRecordResponse *p)
{
	if (::soap_read_ns1__GetSiteRecordResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__ClearApplicationAlert_DEFINED
#define SOAP_TYPE_ns1__ClearApplicationAlert_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__ClearApplicationAlert(struct soap*, struct ns1__ClearApplicationAlert *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__ClearApplicationAlert(struct soap*, const struct ns1__ClearApplicationAlert *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ClearApplicationAlert(struct soap*, const char*, int, const struct ns1__ClearApplicationAlert *, const char*);
SOAP_FMAC3 struct ns1__ClearApplicationAlert * SOAP_FMAC4 soap_in_ns1__ClearApplicationAlert(struct soap*, const char*, struct ns1__ClearApplicationAlert *, const char*);
SOAP_FMAC1 struct ns1__ClearApplicationAlert * SOAP_FMAC2 soap_instantiate_ns1__ClearApplicationAlert(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__ClearApplicationAlert * soap_new_ns1__ClearApplicationAlert(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ClearApplicationAlert(soap, n, NULL, NULL, NULL);
}

inline struct ns1__ClearApplicationAlert * soap_new_req_ns1__ClearApplicationAlert(
	struct soap *soap,
	int _in0)
{
	struct ns1__ClearApplicationAlert *_p = ::soap_new_ns1__ClearApplicationAlert(soap);
	if (_p)
	{	::soap_default_ns1__ClearApplicationAlert(soap, _p);
		_p->_in0 = _in0;
	}
	return _p;
}

inline struct ns1__ClearApplicationAlert * soap_new_set_ns1__ClearApplicationAlert(
	struct soap *soap,
	int _in0)
{
	struct ns1__ClearApplicationAlert *_p = ::soap_new_ns1__ClearApplicationAlert(soap);
	if (_p)
	{	::soap_default_ns1__ClearApplicationAlert(soap, _p);
		_p->_in0 = _in0;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__ClearApplicationAlert(struct soap*, const struct ns1__ClearApplicationAlert *, const char*, const char*);

inline int soap_write_ns1__ClearApplicationAlert(struct soap *soap, struct ns1__ClearApplicationAlert const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__ClearApplicationAlert(soap, p), 0) || ::soap_put_ns1__ClearApplicationAlert(soap, p, "ns1:ClearApplicationAlert", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ClearApplicationAlert(struct soap *soap, const char *URL, struct ns1__ClearApplicationAlert const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__ClearApplicationAlert(soap, p), 0) || ::soap_put_ns1__ClearApplicationAlert(soap, p, "ns1:ClearApplicationAlert", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__ClearApplicationAlert(struct soap *soap, const char *URL, struct ns1__ClearApplicationAlert const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__ClearApplicationAlert(soap, p), 0) || ::soap_put_ns1__ClearApplicationAlert(soap, p, "ns1:ClearApplicationAlert", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ClearApplicationAlert(struct soap *soap, const char *URL, struct ns1__ClearApplicationAlert const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__ClearApplicationAlert(soap, p), 0) || ::soap_put_ns1__ClearApplicationAlert(soap, p, "ns1:ClearApplicationAlert", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__ClearApplicationAlert * SOAP_FMAC4 soap_get_ns1__ClearApplicationAlert(struct soap*, struct ns1__ClearApplicationAlert *, const char*, const char*);

inline int soap_read_ns1__ClearApplicationAlert(struct soap *soap, struct ns1__ClearApplicationAlert *p)
{
	if (p)
	{	::soap_default_ns1__ClearApplicationAlert(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__ClearApplicationAlert(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ClearApplicationAlert(struct soap *soap, const char *URL, struct ns1__ClearApplicationAlert *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__ClearApplicationAlert(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__ClearApplicationAlert(struct soap *soap, struct ns1__ClearApplicationAlert *p)
{
	if (::soap_read_ns1__ClearApplicationAlert(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__ClearApplicationAlertResponse_DEFINED
#define SOAP_TYPE_ns1__ClearApplicationAlertResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__ClearApplicationAlertResponse(struct soap*, struct ns1__ClearApplicationAlertResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__ClearApplicationAlertResponse(struct soap*, const struct ns1__ClearApplicationAlertResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ClearApplicationAlertResponse(struct soap*, const char*, int, const struct ns1__ClearApplicationAlertResponse *, const char*);
SOAP_FMAC3 struct ns1__ClearApplicationAlertResponse * SOAP_FMAC4 soap_in_ns1__ClearApplicationAlertResponse(struct soap*, const char*, struct ns1__ClearApplicationAlertResponse *, const char*);
SOAP_FMAC1 struct ns1__ClearApplicationAlertResponse * SOAP_FMAC2 soap_instantiate_ns1__ClearApplicationAlertResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__ClearApplicationAlertResponse * soap_new_ns1__ClearApplicationAlertResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ClearApplicationAlertResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__ClearApplicationAlertResponse * soap_new_req_ns1__ClearApplicationAlertResponse(
	struct soap *soap)
{
	struct ns1__ClearApplicationAlertResponse *_p = ::soap_new_ns1__ClearApplicationAlertResponse(soap);
	if (_p)
	{	::soap_default_ns1__ClearApplicationAlertResponse(soap, _p);
	}
	return _p;
}

inline struct ns1__ClearApplicationAlertResponse * soap_new_set_ns1__ClearApplicationAlertResponse(
	struct soap *soap)
{
	struct ns1__ClearApplicationAlertResponse *_p = ::soap_new_ns1__ClearApplicationAlertResponse(soap);
	if (_p)
	{	::soap_default_ns1__ClearApplicationAlertResponse(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__ClearApplicationAlertResponse(struct soap*, const struct ns1__ClearApplicationAlertResponse *, const char*, const char*);

inline int soap_write_ns1__ClearApplicationAlertResponse(struct soap *soap, struct ns1__ClearApplicationAlertResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__ClearApplicationAlertResponse(soap, p), 0) || ::soap_put_ns1__ClearApplicationAlertResponse(soap, p, "ns1:ClearApplicationAlertResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ClearApplicationAlertResponse(struct soap *soap, const char *URL, struct ns1__ClearApplicationAlertResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__ClearApplicationAlertResponse(soap, p), 0) || ::soap_put_ns1__ClearApplicationAlertResponse(soap, p, "ns1:ClearApplicationAlertResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__ClearApplicationAlertResponse(struct soap *soap, const char *URL, struct ns1__ClearApplicationAlertResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__ClearApplicationAlertResponse(soap, p), 0) || ::soap_put_ns1__ClearApplicationAlertResponse(soap, p, "ns1:ClearApplicationAlertResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ClearApplicationAlertResponse(struct soap *soap, const char *URL, struct ns1__ClearApplicationAlertResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__ClearApplicationAlertResponse(soap, p), 0) || ::soap_put_ns1__ClearApplicationAlertResponse(soap, p, "ns1:ClearApplicationAlertResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__ClearApplicationAlertResponse * SOAP_FMAC4 soap_get_ns1__ClearApplicationAlertResponse(struct soap*, struct ns1__ClearApplicationAlertResponse *, const char*, const char*);

inline int soap_read_ns1__ClearApplicationAlertResponse(struct soap *soap, struct ns1__ClearApplicationAlertResponse *p)
{
	if (p)
	{	::soap_default_ns1__ClearApplicationAlertResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__ClearApplicationAlertResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ClearApplicationAlertResponse(struct soap *soap, const char *URL, struct ns1__ClearApplicationAlertResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__ClearApplicationAlertResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__ClearApplicationAlertResponse(struct soap *soap, struct ns1__ClearApplicationAlertResponse *p)
{
	if (::soap_read_ns1__ClearApplicationAlertResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__ClearSystemAlert_DEFINED
#define SOAP_TYPE_ns1__ClearSystemAlert_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__ClearSystemAlert(struct soap*, struct ns1__ClearSystemAlert *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__ClearSystemAlert(struct soap*, const struct ns1__ClearSystemAlert *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ClearSystemAlert(struct soap*, const char*, int, const struct ns1__ClearSystemAlert *, const char*);
SOAP_FMAC3 struct ns1__ClearSystemAlert * SOAP_FMAC4 soap_in_ns1__ClearSystemAlert(struct soap*, const char*, struct ns1__ClearSystemAlert *, const char*);
SOAP_FMAC1 struct ns1__ClearSystemAlert * SOAP_FMAC2 soap_instantiate_ns1__ClearSystemAlert(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__ClearSystemAlert * soap_new_ns1__ClearSystemAlert(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ClearSystemAlert(soap, n, NULL, NULL, NULL);
}

inline struct ns1__ClearSystemAlert * soap_new_req_ns1__ClearSystemAlert(
	struct soap *soap,
	int _in0)
{
	struct ns1__ClearSystemAlert *_p = ::soap_new_ns1__ClearSystemAlert(soap);
	if (_p)
	{	::soap_default_ns1__ClearSystemAlert(soap, _p);
		_p->_in0 = _in0;
	}
	return _p;
}

inline struct ns1__ClearSystemAlert * soap_new_set_ns1__ClearSystemAlert(
	struct soap *soap,
	int _in0)
{
	struct ns1__ClearSystemAlert *_p = ::soap_new_ns1__ClearSystemAlert(soap);
	if (_p)
	{	::soap_default_ns1__ClearSystemAlert(soap, _p);
		_p->_in0 = _in0;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__ClearSystemAlert(struct soap*, const struct ns1__ClearSystemAlert *, const char*, const char*);

inline int soap_write_ns1__ClearSystemAlert(struct soap *soap, struct ns1__ClearSystemAlert const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__ClearSystemAlert(soap, p), 0) || ::soap_put_ns1__ClearSystemAlert(soap, p, "ns1:ClearSystemAlert", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ClearSystemAlert(struct soap *soap, const char *URL, struct ns1__ClearSystemAlert const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__ClearSystemAlert(soap, p), 0) || ::soap_put_ns1__ClearSystemAlert(soap, p, "ns1:ClearSystemAlert", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__ClearSystemAlert(struct soap *soap, const char *URL, struct ns1__ClearSystemAlert const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__ClearSystemAlert(soap, p), 0) || ::soap_put_ns1__ClearSystemAlert(soap, p, "ns1:ClearSystemAlert", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ClearSystemAlert(struct soap *soap, const char *URL, struct ns1__ClearSystemAlert const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__ClearSystemAlert(soap, p), 0) || ::soap_put_ns1__ClearSystemAlert(soap, p, "ns1:ClearSystemAlert", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__ClearSystemAlert * SOAP_FMAC4 soap_get_ns1__ClearSystemAlert(struct soap*, struct ns1__ClearSystemAlert *, const char*, const char*);

inline int soap_read_ns1__ClearSystemAlert(struct soap *soap, struct ns1__ClearSystemAlert *p)
{
	if (p)
	{	::soap_default_ns1__ClearSystemAlert(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__ClearSystemAlert(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ClearSystemAlert(struct soap *soap, const char *URL, struct ns1__ClearSystemAlert *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__ClearSystemAlert(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__ClearSystemAlert(struct soap *soap, struct ns1__ClearSystemAlert *p)
{
	if (::soap_read_ns1__ClearSystemAlert(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__ClearSystemAlertResponse_DEFINED
#define SOAP_TYPE_ns1__ClearSystemAlertResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__ClearSystemAlertResponse(struct soap*, struct ns1__ClearSystemAlertResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__ClearSystemAlertResponse(struct soap*, const struct ns1__ClearSystemAlertResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ClearSystemAlertResponse(struct soap*, const char*, int, const struct ns1__ClearSystemAlertResponse *, const char*);
SOAP_FMAC3 struct ns1__ClearSystemAlertResponse * SOAP_FMAC4 soap_in_ns1__ClearSystemAlertResponse(struct soap*, const char*, struct ns1__ClearSystemAlertResponse *, const char*);
SOAP_FMAC1 struct ns1__ClearSystemAlertResponse * SOAP_FMAC2 soap_instantiate_ns1__ClearSystemAlertResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__ClearSystemAlertResponse * soap_new_ns1__ClearSystemAlertResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ClearSystemAlertResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__ClearSystemAlertResponse * soap_new_req_ns1__ClearSystemAlertResponse(
	struct soap *soap)
{
	struct ns1__ClearSystemAlertResponse *_p = ::soap_new_ns1__ClearSystemAlertResponse(soap);
	if (_p)
	{	::soap_default_ns1__ClearSystemAlertResponse(soap, _p);
	}
	return _p;
}

inline struct ns1__ClearSystemAlertResponse * soap_new_set_ns1__ClearSystemAlertResponse(
	struct soap *soap)
{
	struct ns1__ClearSystemAlertResponse *_p = ::soap_new_ns1__ClearSystemAlertResponse(soap);
	if (_p)
	{	::soap_default_ns1__ClearSystemAlertResponse(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__ClearSystemAlertResponse(struct soap*, const struct ns1__ClearSystemAlertResponse *, const char*, const char*);

inline int soap_write_ns1__ClearSystemAlertResponse(struct soap *soap, struct ns1__ClearSystemAlertResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__ClearSystemAlertResponse(soap, p), 0) || ::soap_put_ns1__ClearSystemAlertResponse(soap, p, "ns1:ClearSystemAlertResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ClearSystemAlertResponse(struct soap *soap, const char *URL, struct ns1__ClearSystemAlertResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__ClearSystemAlertResponse(soap, p), 0) || ::soap_put_ns1__ClearSystemAlertResponse(soap, p, "ns1:ClearSystemAlertResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__ClearSystemAlertResponse(struct soap *soap, const char *URL, struct ns1__ClearSystemAlertResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__ClearSystemAlertResponse(soap, p), 0) || ::soap_put_ns1__ClearSystemAlertResponse(soap, p, "ns1:ClearSystemAlertResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ClearSystemAlertResponse(struct soap *soap, const char *URL, struct ns1__ClearSystemAlertResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__ClearSystemAlertResponse(soap, p), 0) || ::soap_put_ns1__ClearSystemAlertResponse(soap, p, "ns1:ClearSystemAlertResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__ClearSystemAlertResponse * SOAP_FMAC4 soap_get_ns1__ClearSystemAlertResponse(struct soap*, struct ns1__ClearSystemAlertResponse *, const char*, const char*);

inline int soap_read_ns1__ClearSystemAlertResponse(struct soap *soap, struct ns1__ClearSystemAlertResponse *p)
{
	if (p)
	{	::soap_default_ns1__ClearSystemAlertResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__ClearSystemAlertResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ClearSystemAlertResponse(struct soap *soap, const char *URL, struct ns1__ClearSystemAlertResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__ClearSystemAlertResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__ClearSystemAlertResponse(struct soap *soap, struct ns1__ClearSystemAlertResponse *p)
{
	if (::soap_read_ns1__ClearSystemAlertResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GetVersion_DEFINED
#define SOAP_TYPE_ns1__GetVersion_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__GetVersion(struct soap*, struct ns1__GetVersion *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__GetVersion(struct soap*, const struct ns1__GetVersion *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetVersion(struct soap*, const char*, int, const struct ns1__GetVersion *, const char*);
SOAP_FMAC3 struct ns1__GetVersion * SOAP_FMAC4 soap_in_ns1__GetVersion(struct soap*, const char*, struct ns1__GetVersion *, const char*);
SOAP_FMAC1 struct ns1__GetVersion * SOAP_FMAC2 soap_instantiate_ns1__GetVersion(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__GetVersion * soap_new_ns1__GetVersion(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetVersion(soap, n, NULL, NULL, NULL);
}

inline struct ns1__GetVersion * soap_new_req_ns1__GetVersion(
	struct soap *soap)
{
	struct ns1__GetVersion *_p = ::soap_new_ns1__GetVersion(soap);
	if (_p)
	{	::soap_default_ns1__GetVersion(soap, _p);
	}
	return _p;
}

inline struct ns1__GetVersion * soap_new_set_ns1__GetVersion(
	struct soap *soap)
{
	struct ns1__GetVersion *_p = ::soap_new_ns1__GetVersion(soap);
	if (_p)
	{	::soap_default_ns1__GetVersion(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__GetVersion(struct soap*, const struct ns1__GetVersion *, const char*, const char*);

inline int soap_write_ns1__GetVersion(struct soap *soap, struct ns1__GetVersion const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__GetVersion(soap, p), 0) || ::soap_put_ns1__GetVersion(soap, p, "ns1:GetVersion", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetVersion(struct soap *soap, const char *URL, struct ns1__GetVersion const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetVersion(soap, p), 0) || ::soap_put_ns1__GetVersion(soap, p, "ns1:GetVersion", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__GetVersion(struct soap *soap, const char *URL, struct ns1__GetVersion const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetVersion(soap, p), 0) || ::soap_put_ns1__GetVersion(soap, p, "ns1:GetVersion", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetVersion(struct soap *soap, const char *URL, struct ns1__GetVersion const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetVersion(soap, p), 0) || ::soap_put_ns1__GetVersion(soap, p, "ns1:GetVersion", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__GetVersion * SOAP_FMAC4 soap_get_ns1__GetVersion(struct soap*, struct ns1__GetVersion *, const char*, const char*);

inline int soap_read_ns1__GetVersion(struct soap *soap, struct ns1__GetVersion *p)
{
	if (p)
	{	::soap_default_ns1__GetVersion(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__GetVersion(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetVersion(struct soap *soap, const char *URL, struct ns1__GetVersion *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__GetVersion(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GetVersion(struct soap *soap, struct ns1__GetVersion *p)
{
	if (::soap_read_ns1__GetVersion(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GetVersionResponse_DEFINED
#define SOAP_TYPE_ns1__GetVersionResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__GetVersionResponse(struct soap*, struct ns1__GetVersionResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__GetVersionResponse(struct soap*, const struct ns1__GetVersionResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetVersionResponse(struct soap*, const char*, int, const struct ns1__GetVersionResponse *, const char*);
SOAP_FMAC3 struct ns1__GetVersionResponse * SOAP_FMAC4 soap_in_ns1__GetVersionResponse(struct soap*, const char*, struct ns1__GetVersionResponse *, const char*);
SOAP_FMAC1 struct ns1__GetVersionResponse * SOAP_FMAC2 soap_instantiate_ns1__GetVersionResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__GetVersionResponse * soap_new_ns1__GetVersionResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetVersionResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__GetVersionResponse * soap_new_req_ns1__GetVersionResponse(
	struct soap *soap,
	const std::string& GetVersionReturn)
{
	struct ns1__GetVersionResponse *_p = ::soap_new_ns1__GetVersionResponse(soap);
	if (_p)
	{	::soap_default_ns1__GetVersionResponse(soap, _p);
		_p->GetVersionReturn = GetVersionReturn;
	}
	return _p;
}

inline struct ns1__GetVersionResponse * soap_new_set_ns1__GetVersionResponse(
	struct soap *soap,
	const std::string& GetVersionReturn)
{
	struct ns1__GetVersionResponse *_p = ::soap_new_ns1__GetVersionResponse(soap);
	if (_p)
	{	::soap_default_ns1__GetVersionResponse(soap, _p);
		_p->GetVersionReturn = GetVersionReturn;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__GetVersionResponse(struct soap*, const struct ns1__GetVersionResponse *, const char*, const char*);

inline int soap_write_ns1__GetVersionResponse(struct soap *soap, struct ns1__GetVersionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__GetVersionResponse(soap, p), 0) || ::soap_put_ns1__GetVersionResponse(soap, p, "ns1:GetVersionResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetVersionResponse(struct soap *soap, const char *URL, struct ns1__GetVersionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetVersionResponse(soap, p), 0) || ::soap_put_ns1__GetVersionResponse(soap, p, "ns1:GetVersionResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__GetVersionResponse(struct soap *soap, const char *URL, struct ns1__GetVersionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetVersionResponse(soap, p), 0) || ::soap_put_ns1__GetVersionResponse(soap, p, "ns1:GetVersionResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetVersionResponse(struct soap *soap, const char *URL, struct ns1__GetVersionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__GetVersionResponse(soap, p), 0) || ::soap_put_ns1__GetVersionResponse(soap, p, "ns1:GetVersionResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__GetVersionResponse * SOAP_FMAC4 soap_get_ns1__GetVersionResponse(struct soap*, struct ns1__GetVersionResponse *, const char*, const char*);

inline int soap_read_ns1__GetVersionResponse(struct soap *soap, struct ns1__GetVersionResponse *p)
{
	if (p)
	{	::soap_default_ns1__GetVersionResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__GetVersionResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetVersionResponse(struct soap *soap, const char *URL, struct ns1__GetVersionResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__GetVersionResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GetVersionResponse(struct soap *soap, struct ns1__GetVersionResponse *p)
{
	if (::soap_read_ns1__GetVersionResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);
#endif

#endif

#ifndef SOAP_TYPE_PointerTons1__DCenterCordInfo_DEFINED
#define SOAP_TYPE_PointerTons1__DCenterCordInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__DCenterCordInfo(struct soap*, ns1__DCenterCordInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__DCenterCordInfo(struct soap*, const char *, int, ns1__DCenterCordInfo *const*, const char *);
SOAP_FMAC3 ns1__DCenterCordInfo ** SOAP_FMAC4 soap_in_PointerTons1__DCenterCordInfo(struct soap*, const char*, ns1__DCenterCordInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__DCenterCordInfo(struct soap*, ns1__DCenterCordInfo *const*, const char*, const char*);
SOAP_FMAC3 ns1__DCenterCordInfo ** SOAP_FMAC4 soap_get_PointerTons1__DCenterCordInfo(struct soap*, ns1__DCenterCordInfo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToSOAP_ENC__string_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENC__string_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENC__string(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENC__string(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToSOAP_ENC__string(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENC__string(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToSOAP_ENC__string(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE__QName_DEFINED
#define SOAP_TYPE__QName_DEFINED

inline void soap_default__QName(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__QName
	*a = SOAP_DEFAULT__QName;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);

#define soap__QName2s(soap, a) soap_QName2s(soap, (a))
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2_QName(soap, s, a) soap_s2QName((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);

#define soap_instantiate__QName soap_instantiate_string


#define soap_new__QName soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

inline int soap_write__QName(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

inline int soap_read__QName(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__QName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__QName(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__QName(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__QName(struct soap *soap, char **p)
{
	if (::soap_read__QName(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__XML_DEFINED
#define SOAP_TYPE__XML_DEFINED
#endif

#ifndef SOAP_TYPE_string_DEFINED
#define SOAP_TYPE_string_DEFINED

inline void soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);

#define soap_string2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2string(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

inline int soap_write_string(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

inline int soap_read_string(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_string(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_string(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_string(struct soap *soap, char **p)
{
	if (::soap_read_string(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

/* End of soapH.h */
